<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>电脑深度清理C盘-技巧</title>
    <link href="/blog/posts/25153.html"/>
    <url>/blog/posts/25153.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>C盘爆红，满了如何清理？</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20241101231002.png"></p><h2 id="第一步：清理系统缓存"><a href="#第一步：清理系统缓存" class="headerlink" title="第一步：清理系统缓存"></a>第一步：清理系统缓存</h2><p>按<code>win+R</code>，输入<code>%temp%</code>，接着全选删除</p><p>按<code>win+R</code>，输入<code>SoftWareDistribution</code>,进入<code>Download</code>文件夹，全选删除</p><p>按<code>win+R</code>，输入<code>temp</code>，全选删除</p><h2 id="第二步，清理系统更新文件"><a href="#第二步，清理系统更新文件" class="headerlink" title="第二步，清理系统更新文件"></a>第二步，清理系统更新文件</h2><p>此电脑&#x3D;》C盘&#x3D;》属性&#x3D;》磁盘清理&#x3D;》清理系统文件&#x3D;》列表全选&#x3D;》删除</p><p>开始&#x3D;》设置&#x3D;》存储&#x3D;》临时文件&#x3D;》全选删除</p><h2 id="第三步，修改文件保存位置"><a href="#第三步，修改文件保存位置" class="headerlink" title="第三步，修改文件保存位置"></a>第三步，修改文件保存位置</h2><p>开始&#x3D;》设置&#x3D;》存储&#x3D;》更改新内容的保存位置&#x3D;》全改其他盘</p><p>此外，电脑软件如微信，浏览器，网盘等各自内部也可以修改文件保存位置，全改其他盘</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java8的新特性与案例解析</title>
    <link href="/blog/posts/49921.html"/>
    <url>/blog/posts/49921.html</url>
    
    <content type="html"><![CDATA[<h3 id="Java8的新特性"><a href="#Java8的新特性" class="headerlink" title="Java8的新特性"></a>Java8的新特性</h3><ol><li><p>Lambda表达式：一种简洁、可读性高的函数式编程风格，可以更方便地编写代码。</p></li><li><p>Stream API：通过流式处理数据，可以更加高效地操作集合和数组。</p></li><li><p>时间API：提供了新的时间和日期类，可以更加方便地处理时间和日期相关的操作。</p></li><li><p>接口的默认方法和静态方法：接口中可以定义默认方法和静态方法，使得接口的使用更加方便。</p></li><li><p>方法引用：可以使用已有的方法作为Lambda表达式的实现。</p></li><li><p>Optional类：可以更好地处理空值问题。</p></li><li><p>Nashorn引擎：一种基于JavaScript的引擎，可以在Java中使用JavaScript。</p></li><li><p>并行流：通过并行处理流，可以更加高效地处理大量数据。</p></li><li><p>新的注解：包括重复注解、类型注解等。</p></li><li><p>其他改进：包括新的Base64编码和解码API、新的ConcurrentHashMap等。</p></li></ol><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda表达式是一种匿名函数，可以在Java中用来简化代码和提高可读性。以下是一些Lambda表达式的使用示例：</p><ol><li>使用Lambda表达式来实现一个简单的计算器：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br><br><span class="hljs-type">Calculator</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> (a, b) -&gt; a + b;<br><span class="hljs-type">Calculator</span> <span class="hljs-variable">subtract</span> <span class="hljs-operator">=</span> (a, b) -&gt; a - b;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> add.calculate(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 15</span><br><span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> subtract.calculate(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用Lambda表达式来过滤集合中的元素：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; names = Arrays.asList(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Mary&quot;</span>, <span class="hljs-string">&quot;Peter&quot;</span>, <span class="hljs-string">&quot;David&quot;</span>);<br><br>List&lt;String&gt; filteredNames = names.stream()<br>        .filter(name -&gt; name.startsWith(<span class="hljs-string">&quot;J&quot;</span>))<br>        .collect(Collectors.toList());<br><br>System.out.println(filteredNames); <span class="hljs-comment">// [John]</span><br></code></pre></td></tr></table></figure><ol start="3"><li>使用Lambda表达式来处理异常：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 执行一些可能会抛出异常的代码</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">// 处理异常</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task).start();<br></code></pre></td></tr></table></figure><ol start="4"><li>使用Lambda表达式来排序一个集合：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numbers = Arrays.asList(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br><br>List&lt;Integer&gt; sortedNumbers = numbers.stream()<br>        .sorted((a, b) -&gt; a.compareTo(b))<br>        .collect(Collectors.toList());<br><br>System.out.println(sortedNumbers); <span class="hljs-comment">// [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]</span><br></code></pre></td></tr></table></figure><ol start="5"><li>使用Lambda表达式来创建一个线程：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task).start();<br></code></pre></td></tr></table></figure><h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><p>Stream API 是 Java 8 中引入的一种新的编程方式，它提供了一种简单、高效、灵活的处理集合数据的方式。下面是一些 Stream API 的使用示例：</p><ol><li>过滤</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; names = Arrays.asList(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>);<br>List&lt;String&gt; result = names.stream().filter(name -&gt; name.startsWith(<span class="hljs-string">&quot;J&quot;</span>)).collect(Collectors.toList());<br>System.out.println(result); <span class="hljs-comment">// 输出 [Jerry, Jack]</span><br></code></pre></td></tr></table></figure><ol start="2"><li>映射</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; nums = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>List&lt;Integer&gt; squares = nums.stream().map(num -&gt; num * num).collect(Collectors.toList());<br>System.out.println(squares); <span class="hljs-comment">// 输出 [1, 4, 9, 16, 25]</span><br></code></pre></td></tr></table></figure><ol start="3"><li>排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; names = Arrays.asList(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>);<br>List&lt;String&gt; result = names.stream().sorted().collect(Collectors.toList());<br>System.out.println(result); <span class="hljs-comment">// 输出 [Alice, Bob, Jack, Jerry, Tom]</span><br></code></pre></td></tr></table></figure><ol start="4"><li>统计</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; nums = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> nums.stream().count();<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> nums.stream().mapToInt(Integer::intValue).sum();<br><span class="hljs-type">OptionalInt</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums.stream().mapToInt(Integer::intValue).max();<br>System.out.println(<span class="hljs-string">&quot;count: &quot;</span> + count + <span class="hljs-string">&quot;, sum: &quot;</span> + sum + <span class="hljs-string">&quot;, max: &quot;</span> + max.getAsInt());<br><span class="hljs-comment">// 输出 count: 5, sum: 15, max: 5</span><br></code></pre></td></tr></table></figure><ol start="5"><li>匹配</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; nums = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">allMatch</span> <span class="hljs-operator">=</span> nums.stream().allMatch(num -&gt; num &gt; <span class="hljs-number">0</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">anyMatch</span> <span class="hljs-operator">=</span> nums.stream().anyMatch(num -&gt; num &gt; <span class="hljs-number">3</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">noneMatch</span> <span class="hljs-operator">=</span> nums.stream().noneMatch(num -&gt; num &gt; <span class="hljs-number">5</span>);<br>System.out.println(<span class="hljs-string">&quot;allMatch: &quot;</span> + allMatch + <span class="hljs-string">&quot;, anyMatch: &quot;</span> + anyMatch + <span class="hljs-string">&quot;, noneMatch: &quot;</span> + noneMatch);<br><span class="hljs-comment">// 输出 allMatch: true, anyMatch: true, noneMatch: true</span><br></code></pre></td></tr></table></figure><ol start="6"><li>归约</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; nums = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> nums.stream().reduce(<span class="hljs-number">0</span>, (acc, num) -&gt; acc + num);<br>Optional&lt;Integer&gt; product = nums.stream().reduce((acc, num) -&gt; acc * num);<br>System.out.println(<span class="hljs-string">&quot;sum: &quot;</span> + sum + <span class="hljs-string">&quot;, product: &quot;</span> + product.orElse(<span class="hljs-number">0</span>));<br><span class="hljs-comment">// 输出 sum: 15, product: 120</span><br></code></pre></td></tr></table></figure><p>以上代码展示了 Stream API 的一些常见用法，通过使用 Stream API，我们可以更加简洁、高效地处理集合数据。</p><h3 id="时间API"><a href="#时间API" class="headerlink" title="时间API"></a>时间API</h3><p>Java 8引入了全新的时间API，提供了更加方便和易用的时间处理方式。以下是几个示例代码，展示了Java 8时间API的新改进：</p><ol><li>LocalDate</li></ol><p>LocalDate是一个表示日期的类，可以用于存储和操作年、月、日等信息。以下是一个示例代码，展示了如何使用LocalDate来获取当前日期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDate</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> LocalDate.now();<br>System.out.println(<span class="hljs-string">&quot;Today&#x27;s date: &quot;</span> + today);<br></code></pre></td></tr></table></figure><ol start="2"><li>LocalTime</li></ol><p>LocalTime是一个表示时间的类，可以用于存储和操作小时、分钟、秒等信息。以下是一个示例代码，展示了如何使用LocalTime来获取当前时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalTime.now();<br>System.out.println(<span class="hljs-string">&quot;Current time: &quot;</span> + now);<br></code></pre></td></tr></table></figure><ol start="3"><li>LocalDateTime</li></ol><p>LocalDateTime是一个同时表示日期和时间的类，可以用于存储和操作年、月、日、小时、分钟、秒等信息。以下是一个示例代码，展示了如何使用LocalDateTime来获取当前日期和时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>System.out.println(<span class="hljs-string">&quot;Current date and time: &quot;</span> + dateTime);<br></code></pre></td></tr></table></figure><ol start="4"><li>Instant</li></ol><p>Instant是一个表示时间戳的类，可以用于存储和操作以1970年1月1日为起点的秒数。以下是一个示例代码，展示了如何使用Instant来获取当前时间戳：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Instant</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> Instant.now();<br>System.out.println(<span class="hljs-string">&quot;Current timestamp: &quot;</span> + timestamp);<br></code></pre></td></tr></table></figure><ol start="5"><li>Duration</li></ol><p>Duration是一个表示时间间隔的类，可以用于计算两个时间点之间的差值。以下是一个示例代码，展示了如何使用Duration来计算两个时间点的差值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">dateTime1</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2021</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">dateTime2</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(dateTime1, dateTime2);<br>System.out.println(<span class="hljs-string">&quot;Duration between &quot;</span> + dateTime1 + <span class="hljs-string">&quot; and &quot;</span> + dateTime2 + <span class="hljs-string">&quot;: &quot;</span> + duration);<br></code></pre></td></tr></table></figure><ol start="6"><li>Period</li></ol><p>Period是一个表示日期间隔的类，可以用于计算两个日期之间的差值。以下是一个示例代码，展示了如何使用Period来计算两个日期的差值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDate</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2021</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">date2</span> <span class="hljs-operator">=</span> LocalDate.now();<br><span class="hljs-type">Period</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> Period.between(date1, date2);<br>System.out.println(<span class="hljs-string">&quot;Period between &quot;</span> + date1 + <span class="hljs-string">&quot; and &quot;</span> + date2 + <span class="hljs-string">&quot;: &quot;</span> + period);<br></code></pre></td></tr></table></figure><p>以上是几个Java 8时间API的示例代码，展示了新的时间处理方式和更加方便的时间计算。</p><h3 id="接口的默认方法和静态方法"><a href="#接口的默认方法和静态方法" class="headerlink" title="接口的默认方法和静态方法"></a>接口的默认方法和静态方法</h3><p>Java 8 引入了接口的默认方法和静态方法，这是为了方便在接口中添加新的功能而不破坏现有的实现类。</p><p>默认方法：</p><p>默认方法是指在接口中定义的具有默认实现的方法。默认方法使用 default 关键字修饰，可以被实现类继承或重写，也可以通过接口名直接调用。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyInterface</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyInterface</span> &#123;<br>    <span class="hljs-comment">// 可以继承默认方法</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyInterface</span> <span class="hljs-variable">myObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br>        myObj.myMethod(); <span class="hljs-comment">// 输出：Hello, world!</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态方法：</p><p>静态方法是指在接口中定义的使用 static 关键字修饰的方法。静态方法只能通过接口名直接调用，不能被实现类继承或重写。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyInterface</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myStaticMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This is a static method!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        MyInterface.myStaticMethod(); <span class="hljs-comment">// 输出：This is a static method!</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>Java 8 引入了方法引用，它是一种更简洁的 Lambda 表达式语法，用于简化 Lambda 表达式的书写。方法引用是指在 Lambda 表达式中直接引用已有方法的方式。</p><p>方法引用使用双冒号(::)语法来引用方法，它可以引用静态方法、实例方法和构造方法。</p><ol><li>静态方法引用</li></ol><p>静态方法引用可以直接使用类名来引用静态方法，语法格式为：类名::静态方法名。</p><p>例如，假设有一个静态方法 printMessage()，我们可以使用方法引用的方式将它传递给一个函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodReferenceExample</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMessage</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> MethodReferenceExample::printMessage;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnable);<br>        thread.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>实例方法引用</li></ol><p>实例方法引用使用对象名或类名来引用实例方法，语法格式为：对象名::实例方法名 或 类名::实例方法名。</p><p>例如，假设有一个类 Person，它有一个实例方法 getName()，我们可以使用方法引用的方式将它传递给一个函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodReferenceExample</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Person&gt; people = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Alice&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Bob&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Charlie&quot;</span>));<br><br>        <span class="hljs-comment">// 使用 Lambda 表达式</span><br>        people.forEach(person -&gt; System.out.println(person.getName()));<br><br>        <span class="hljs-comment">// 使用方法引用</span><br>        people.forEach(Person::getName);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>构造方法引用</li></ol><p>构造方法引用使用类名来引用构造方法，语法格式为：类名::new。</p><p>例如，假设有一个类 Person，我们可以使用方法引用的方式创建它的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodReferenceExample</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用 Lambda 表达式</span><br>        Supplier&lt;Person&gt; supplier1 = () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><br>        <span class="hljs-comment">// 使用方法引用</span><br>        Supplier&lt;Person&gt; supplier2 = Person::<span class="hljs-keyword">new</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><p>Optional类是Java 8中引入的一个新类，用于解决空指针异常问题。它是一个容器对象，可以包含一个非空值或者为空。</p><p>以下是一个使用Optional类的简单例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OptionalExample</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">// 创建一个包含非空值的Optional对象</span><br>        Optional&lt;String&gt; optional1 = Optional.of(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        <br>        <span class="hljs-comment">// 创建一个为空的Optional对象</span><br>        Optional&lt;String&gt; optional2 = Optional.empty();<br>        <br>        <span class="hljs-comment">// 输出Optional对象的值</span><br>        System.out.println(optional1.get()); <span class="hljs-comment">// Hello World</span><br>        <br>        <span class="hljs-comment">// 如果Optional对象为空，则抛出NoSuchElementException异常</span><br>        System.out.println(optional2.get()); <span class="hljs-comment">// 抛出NoSuchElementException异常</span><br>        <br>        <span class="hljs-comment">// 判断Optional对象是否有值</span><br>        System.out.println(optional1.isPresent()); <span class="hljs-comment">// true</span><br>        System.out.println(optional2.isPresent()); <span class="hljs-comment">// false</span><br>        <br>        <span class="hljs-comment">// 如果Optional对象为空，则返回指定的默认值</span><br>        System.out.println(optional2.orElse(<span class="hljs-string">&quot;Default Value&quot;</span>)); <span class="hljs-comment">// Default Value</span><br>        <br>        <span class="hljs-comment">// 如果Optional对象为空，则执行指定的操作</span><br>        optional2.ifPresent(value -&gt; System.out.println(<span class="hljs-string">&quot;Value is present&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，我们创建了两个Optional对象，一个包含非空值，一个为空。我们使用get()方法获取包含在Optional对象中的值，但是如果Optional对象为空，则会抛出NoSuchElementException异常。因此，我们可以使用isPresent()方法判断Optional对象是否为空，或者使用orElse()方法返回一个默认值。如果我们想要在Optional对象不为空的情况下执行某些操作，可以使用ifPresent()方法。</p><h3 id="Nashorn引擎"><a href="#Nashorn引擎" class="headerlink" title="Nashorn引擎"></a>Nashorn引擎</h3><p>Nashorn是Java 8中引入的一种新的JavaScript引擎，它是基于Java虚拟机实现的，可以将JavaScript代码直接编译成Java字节码运行。下面是一个简单的Nashorn引擎示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.script.ScriptEngine;<br><span class="hljs-keyword">import</span> javax.script.ScriptEngineManager;<br><span class="hljs-keyword">import</span> javax.script.ScriptException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NashornExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ScriptException &#123;<br>        <span class="hljs-type">ScriptEngineManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScriptEngineManager</span>();<br>        <span class="hljs-type">ScriptEngine</span> <span class="hljs-variable">engine</span> <span class="hljs-operator">=</span> manager.getEngineByName(<span class="hljs-string">&quot;nashorn&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;var message = &#x27;Hello, World!&#x27;;&quot;</span> +<br>                        <span class="hljs-string">&quot;print(message);&quot;</span>;<br><br>        engine.eval(script);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个示例代码中，我们使用了Java 8中提供的javax.script包，创建了一个ScriptEngineManager对象来获取Nashorn引擎实例。然后，我们将一个简单的JavaScript代码作为字符串传递给引擎的eval()方法，该方法会将JavaScript代码编译成Java字节码并执行。</p><p>在这个示例中，我们定义了一个JavaScript变量message，并将其赋值为字符串“Hello, World!”，然后通过print()函数将其输出到控制台。当我们运行这个Java程序时，它会输出以下内容：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">Hello,</span> World!<br></code></pre></td></tr></table></figure><p>这表明Nashorn引擎成功地执行了我们的JavaScript代码。除了简单的输出语句，Nashorn还支持更复杂的JavaScript功能，例如函数定义、对象和数组操作等。</p><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><p>假设我们有一个列表，其中包含 100 个元素。我们想要对这些元素进行操作，以获得一个新的列表。在使用传统的串行流时，我们可以这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; myList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>    myList.add(i);<br>&#125;<br><br>List&lt;Integer&gt; newList = myList.stream()<br>    .map(num -&gt; num * <span class="hljs-number">2</span>)<br>    .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><p>这将返回一个包含 100 个元素的新列表，其中每个元素都是原始列表中对应元素的两倍。但是，如果我们想要更快地执行此操作，我们可以使用 Java 8 中的并行流。这可以通过在流上调用 <code>parallel()</code> 方法来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; myList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>    myList.add(i);<br>&#125;<br><br>List&lt;Integer&gt; newList = myList.parallelStream()<br>    .map(num -&gt; num * <span class="hljs-number">2</span>)<br>    .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><p>在这个例子中，我们使用了 <code>parallelStream()</code> 方法来将列表转换为一个并行流。这样，当我们调用 <code>map()</code> 方法时，每个元素都会在不同的线程上进行操作，从而加快了处理速度。最后，我们使用 <code>collect()</code> 方法将结果收集到一个新的列表中。</p><p>需要注意的是，并行流并不总是比串行流更快，因为它需要更多的系统资源来管理线程。因此，在使用并行流时，应该进行基准测试，以确保它确实能够提高程序的性能。</p><h3 id="新的注解"><a href="#新的注解" class="headerlink" title="新的注解"></a>新的注解</h3><ol><li><p>@FunctionalInterface：用于标记一个接口是函数式接口，即只包含一个抽象方法的接口。</p></li><li><p>@Repeatable：用于标记一个注解可以重复使用，即可以在同一个元素上使用多次。</p></li><li><p>@SafeVarargs：用于标记一个方法使用了可变参数，并且不会对参数数组中的元素进行修改操作。</p></li><li><p>@SuppressWarnings：用于抑制编译器对某些代码的警告信息。</p></li><li><p>@Deprecated：用于标记一个方法或类已经过时，不建议使用。</p></li><li><p>@Override：用于标记一个方法是覆盖父类的方法。</p></li><li><p>@Documented：用于标记一个注解可以被包含在 JavaDoc 文档中。</p></li><li><p>@Retention：用于指定注解的生命周期，包括 SOURCE、CLASS 和 RUNTIME 三种生命周期。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 JComboBox 在 Java Swing 中创建下拉列表</title>
    <link href="/blog/posts/8345.html"/>
    <url>/blog/posts/8345.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>在 Java Swing 中，JComboBox 是一个常用的组件，可以让用户从下拉列表中选择一个选项。本文将介绍如何在 Swing 中使用 JComboBox，并提供一个简单的示例代码。</p></blockquote><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li><p>创建一个 JComboBox 实例：<br> 你可以使用一个字符串数组或一个向量来初始化它。</p></li><li><p>添加到容器中：<br> 通常会将 JComboBox 添加到一个面板或其它容器中，比如 JFrame。</p></li><li><p>处理事件：<br> 可以添加一个 ActionListener 来处理用户选择的事件。</p></li></ol><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JComboBoxExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个 JFrame</span><br>        <span class="hljs-type">JFrame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>(<span class="hljs-string">&quot;JComboBox Example&quot;</span>);<br>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        frame.setSize(<span class="hljs-number">400</span>, <span class="hljs-number">200</span>);<br>        <br>        <span class="hljs-comment">// 创建一个 JPanel</span><br>        <span class="hljs-type">JPanel</span> <span class="hljs-variable">panel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<br>        frame.add(panel);<br>        placeComponents(panel);<br>        <br>        <span class="hljs-comment">// 设置 JFrame 可见</span><br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">placeComponents</span><span class="hljs-params">(JPanel panel)</span> &#123;<br>        panel.setLayout(<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 创建标签</span><br>        <span class="hljs-type">JLabel</span> <span class="hljs-variable">label</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;Choose an option:&quot;</span>);<br>        label.setBounds(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">160</span>, <span class="hljs-number">25</span>);<br>        panel.add(label);<br><br>        <span class="hljs-comment">// 创建 JComboBox</span><br>        String[] options = &#123; <span class="hljs-string">&quot;Option 1&quot;</span>, <span class="hljs-string">&quot;Option 2&quot;</span>, <span class="hljs-string">&quot;Option 3&quot;</span>, <span class="hljs-string">&quot;Option 4&quot;</span> &#125;;<br>        JComboBox&lt;String&gt; comboBox = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JComboBox</span>&lt;&gt;(options);<br>        comboBox.setBounds(<span class="hljs-number">180</span>, <span class="hljs-number">20</span>, <span class="hljs-number">160</span>, <span class="hljs-number">25</span>);<br>        panel.add(comboBox);<br><br>        <span class="hljs-comment">// 添加 ActionListener 处理事件</span><br>        comboBox.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>                JComboBox&lt;String&gt; cb = (JComboBox&lt;String&gt;) e.getSource();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">selectedOption</span> <span class="hljs-operator">=</span> (String) cb.getSelectedItem();<br>                JOptionPane.showMessageDialog(panel, <span class="hljs-string">&quot;Selected: &quot;</span> + selectedOption);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><ol><li><p>创建 JFrame：<br> JFrame 是 Swing 中主要的顶层容器，用于创建窗口。</p></li><li><p>创建 JPanel 并设置布局：<br> JPanel 是一个通用容器，可以包含其他 Swing 组件。这里设置为 null 布局以手动定位组件。</p></li><li><p>创建 JComboBox 并添加选项：<br> 使用字符串数组初始化 JComboBox。</p></li><li><p>添加事件监听器：<br> addActionListener 方法用于处理当用户选择某个选项时的事件。在这个例子中，我们显示一个消息框来显示选择的选项。</p></li></ol><p>通过这个简单的示例，你应该能够创建并使用 JComboBox。根据需要，你可以扩展这个示例来实现更复杂的功能。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>⚙常用工具安装教程</title>
    <link href="/blog/install/"/>
    <url>/blog/install/</url>
    
    <content type="html"><![CDATA[<h2 id="1、todesk【必装】"><a href="#1、todesk【必装】" class="headerlink" title="1、todesk【必装】"></a>1、todesk【必装】</h2><p><a href="https://www.todesk.com/">👉点我去下载</a><br><img src="http://cdn.qiniu.liyansheng.top/img/20240702141503.png"></p><h2 id="2、IDEA社区版【必装】"><a href="#2、IDEA社区版【必装】" class="headerlink" title="2、IDEA社区版【必装】"></a>2、IDEA社区版【必装】</h2><p><a href="https://www.jetbrains.com/zh-cn/idea/download/?section=windows">👉点我去下载</a><br><img src="http://cdn.qiniu.liyansheng.top/img/20240702130931.png"></p><h2 id="3、MySQL【必装】"><a href="#3、MySQL【必装】" class="headerlink" title="3、MySQL【必装】"></a>3、MySQL【必装】</h2><p><a href="https://dev.mysql.com/downloads/windows/installer/8.0.html">👉点我去下载</a><br><img src="http://cdn.qiniu.liyansheng.top/img/20240702141752.png"></p><h2 id="4、Git【推荐】"><a href="#4、Git【推荐】" class="headerlink" title="4、Git【推荐】"></a>4、Git【推荐】</h2><p><a href="https://git-scm.com/download/win">👉点我去下载</a><br><img src="http://cdn.qiniu.liyansheng.top/img/20240702183936.png"></p><h2 id="5、Navcat【推荐】"><a href="#5、Navcat【推荐】" class="headerlink" title="5、Navcat【推荐】"></a>5、Navcat【推荐】</h2><p><a href="https://www.navicat.com.cn/products#navicat">👉点我去下载</a><br><img src="http://cdn.qiniu.liyansheng.top/img/20240702184307.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用 Java Swing 和 XChart 创建多种图表</title>
    <link href="/blog/posts/25116.html"/>
    <url>/blog/posts/25116.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>在现代应用程序开发中，数据可视化是一个关键部分。本文将介绍如何使用 Java Swing 和 XChart 库创建各种类型的图表。XChart 是一个轻量级的图表库，支持多种类型的图表，非常适合在 Java 应用中进行快速的图表绘制。</p></blockquote><h2 id="1、环境配置"><a href="#1、环境配置" class="headerlink" title="1、环境配置"></a>1、环境配置</h2><p>在开始之前，我们需要确保项目中包含了 XChart 的依赖。以下是在 Maven 项目中的 pom.xml 文件中添加 XChart 依赖的方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.knowm.xchart<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xchart<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、创建不同类型的图表"><a href="#2、创建不同类型的图表" class="headerlink" title="2、创建不同类型的图表"></a>2、创建不同类型的图表</h2><p>以下是如何使用 XChart 创建不同类型的图表的示例代码，包括堆积柱状图、阶梯图、时间序列图、直方图和气泡图。</p><h3 id="面积图"><a href="#面积图" class="headerlink" title="面积图"></a>面积图</h3><p><img src="http://cdn.qiniu.liyansheng.top/img/20240627121605.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AreaChartExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AreaChartExample</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建图表</span><br>        <span class="hljs-type">XYChart</span> <span class="hljs-variable">chart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XYChartBuilder</span>().width(<span class="hljs-number">800</span>).height(<span class="hljs-number">600</span>).title(<span class="hljs-string">&quot;Area Chart Example&quot;</span>).xAxisTitle(<span class="hljs-string">&quot;X&quot;</span>).yAxisTitle(<span class="hljs-string">&quot;Y&quot;</span>).build();<br><br>        <span class="hljs-comment">// 添加数据</span><br>        <span class="hljs-type">double</span>[] xData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[] &#123;<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>&#125;;<br>        <span class="hljs-type">double</span>[] yData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[] &#123;<span class="hljs-number">2.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>&#125;;<br>        chart.addSeries(<span class="hljs-string">&quot;y(x)&quot;</span>, xData, yData).setMarker(SeriesMarkers.NONE).setFillColor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">50</span>));<br><br>        <span class="hljs-comment">// 将图表面板添加到 JFrame</span><br>        <span class="hljs-type">JPanel</span> <span class="hljs-variable">chartPanel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XChartPanel</span>&lt;&gt;(chart);<br>        getContentPane().add(chartPanel, BorderLayout.CENTER);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SwingUtilities.invokeLater(() -&gt; &#123;<br>            <span class="hljs-type">AreaChartExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AreaChartExample</span>();<br>            example.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>            example.pack();<br>            example.setVisible(<span class="hljs-literal">true</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h3><p><img src="http://cdn.qiniu.liyansheng.top/img/20240627122041.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BarChartExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BarChartExample</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建图表</span><br>        <span class="hljs-type">CategoryChart</span> <span class="hljs-variable">chart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CategoryChartBuilder</span>().width(<span class="hljs-number">800</span>).height(<span class="hljs-number">600</span>).title(<span class="hljs-string">&quot;Bar Chart Example&quot;</span>).xAxisTitle(<span class="hljs-string">&quot;Category&quot;</span>).yAxisTitle(<span class="hljs-string">&quot;Value&quot;</span>).build();<br><br>        <span class="hljs-comment">// 添加数据</span><br>        List&lt;String&gt; categories = Arrays.asList(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>);<br>        List&lt;Number&gt; series1Values = Arrays.asList(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>);<br>        List&lt;Number&gt; series2Values = Arrays.asList(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>);<br><br>        chart.addSeries(<span class="hljs-string">&quot;Series 1&quot;</span>, categories, series1Values);<br>        chart.addSeries(<span class="hljs-string">&quot;Series 2&quot;</span>, categories, series2Values);<br><br>        <span class="hljs-comment">// 将图表面板添加到 JFrame</span><br>        <span class="hljs-type">JPanel</span> <span class="hljs-variable">chartPanel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XChartPanel</span>&lt;&gt;(chart);<br>        getContentPane().add(chartPanel, BorderLayout.CENTER);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SwingUtilities.invokeLater(() -&gt; &#123;<br>            <span class="hljs-type">BarChartExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BarChartExample</span>();<br>            example.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>            example.pack();<br>            example.setVisible(<span class="hljs-literal">true</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="气泡图"><a href="#气泡图" class="headerlink" title="气泡图"></a>气泡图</h3><p><img src="http://cdn.qiniu.liyansheng.top/img/20240627122141.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">BubbleChartExample</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建图表</span><br>        <span class="hljs-type">XYChart</span> <span class="hljs-variable">chart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XYChartBuilder</span>().width(<span class="hljs-number">800</span>).height(<span class="hljs-number">600</span>).title(<span class="hljs-string">&quot;Bubble Chart Example&quot;</span>).xAxisTitle(<span class="hljs-string">&quot;X&quot;</span>).yAxisTitle(<span class="hljs-string">&quot;Y&quot;</span>).build();<br><br>        <span class="hljs-comment">// 添加数据</span><br>        <span class="hljs-type">double</span>[] xData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[] &#123;<span class="hljs-number">0.1</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.0</span>&#125;;<br>        <span class="hljs-type">double</span>[] yData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[] &#123;<span class="hljs-number">2.0</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">1.4</span>, <span class="hljs-number">1.9</span>, <span class="hljs-number">2.2</span>&#125;;<br>        <span class="hljs-type">double</span>[] bubbleSize = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[] &#123;<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>&#125;;<br>        chart.addSeries(<span class="hljs-string">&quot;y(x)&quot;</span>, xData, yData, bubbleSize).setMarker(SeriesMarkers.CIRCLE);<br><br>        <span class="hljs-comment">// 将图表面板添加到 JFrame</span><br>        <span class="hljs-type">JPanel</span> <span class="hljs-variable">chartPanel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XChartPanel</span>&lt;&gt;(chart);<br>        getContentPane().add(chartPanel, BorderLayout.CENTER);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SwingUtilities.invokeLater(() -&gt; &#123;<br>            <span class="hljs-type">BubbleChartExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BubbleChartExample</span>();<br>            example.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>            example.pack();<br>            example.setVisible(<span class="hljs-literal">true</span>);<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><p><img src="http://cdn.qiniu.liyansheng.top/img/20240627122331.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LineChartExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LineChartExample</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建图表</span><br>        <span class="hljs-type">XYChart</span> <span class="hljs-variable">chart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XYChartBuilder</span>().width(<span class="hljs-number">800</span>).height(<span class="hljs-number">600</span>).title(<span class="hljs-string">&quot;Line Chart Example&quot;</span>).xAxisTitle(<span class="hljs-string">&quot;X&quot;</span>).yAxisTitle(<span class="hljs-string">&quot;Y&quot;</span>).build();<br><br>        <span class="hljs-comment">// 自定义图表样式</span><br>        chart.getStyler().setLegendPosition(Styler.LegendPosition.InsideNE);<br>        chart.getStyler().setMarkerSize(<span class="hljs-number">16</span>);<br><br>        <span class="hljs-comment">// 添加数据</span><br>        <span class="hljs-type">double</span>[] xData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[] &#123;<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>&#125;;<br>        <span class="hljs-type">double</span>[] yData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[] &#123;<span class="hljs-number">2.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>&#125;;<br>        chart.addSeries(<span class="hljs-string">&quot;y(x)&quot;</span>, xData, yData);<br><br>        <span class="hljs-comment">// 将图表面板添加到 JFrame</span><br>        <span class="hljs-type">JPanel</span> <span class="hljs-variable">chartPanel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XChartPanel</span>&lt;&gt;(chart);<br>        getContentPane().add(chartPanel, BorderLayout.CENTER);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SwingUtilities.invokeLater(() -&gt; &#123;<br>            <span class="hljs-type">LineChartExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LineChartExample</span>();<br>            example.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>            example.pack();<br>            example.setVisible(<span class="hljs-literal">true</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><p><img src="http://cdn.qiniu.liyansheng.top/img/20240627122556.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PieChartExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PieChartExample</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建图表</span><br>        <span class="hljs-type">PieChart</span> <span class="hljs-variable">chart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PieChartBuilder</span>().width(<span class="hljs-number">800</span>).height(<span class="hljs-number">600</span>).title(<span class="hljs-string">&quot;Pie Chart Example&quot;</span>).build();<br><br>        <span class="hljs-comment">// 添加数据</span><br>        chart.addSeries(<span class="hljs-string">&quot;Category A&quot;</span>, <span class="hljs-number">40</span>);<br>        chart.addSeries(<span class="hljs-string">&quot;Category B&quot;</span>, <span class="hljs-number">30</span>);<br>        chart.addSeries(<span class="hljs-string">&quot;Category C&quot;</span>, <span class="hljs-number">20</span>);<br>        chart.addSeries(<span class="hljs-string">&quot;Category D&quot;</span>, <span class="hljs-number">10</span>);<br><br>        <span class="hljs-comment">// 将图表面板添加到 JFrame</span><br>        <span class="hljs-type">JPanel</span> <span class="hljs-variable">chartPanel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XChartPanel</span>&lt;&gt;(chart);<br>        getContentPane().add(chartPanel, BorderLayout.CENTER);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SwingUtilities.invokeLater(() -&gt; &#123;<br>            <span class="hljs-type">PieChartExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PieChartExample</span>();<br>            example.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>            example.pack();<br>            example.setVisible(<span class="hljs-literal">true</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="阶梯图"><a href="#阶梯图" class="headerlink" title="阶梯图"></a>阶梯图</h3><p><img src="http://cdn.qiniu.liyansheng.top/img/20240627122654.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StepChartExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StepChartExample</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建图表</span><br>        <span class="hljs-type">XYChart</span> <span class="hljs-variable">chart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XYChartBuilder</span>().width(<span class="hljs-number">800</span>).height(<span class="hljs-number">600</span>).title(<span class="hljs-string">&quot;Step Chart Example&quot;</span>).xAxisTitle(<span class="hljs-string">&quot;X&quot;</span>).yAxisTitle(<span class="hljs-string">&quot;Y&quot;</span>).build();<br><br>        <span class="hljs-comment">// 添加数据</span><br>        <span class="hljs-type">double</span>[] xData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[] &#123;<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>&#125;;<br>        <span class="hljs-type">double</span>[] yData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[] &#123;<span class="hljs-number">2.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>&#125;;<br>        chart.addSeries(<span class="hljs-string">&quot;y(x)&quot;</span>, xData, yData).setXYSeriesRenderStyle(XYSeries.XYSeriesRenderStyle.Step);<br><br>        <span class="hljs-comment">// 将图表面板添加到 JFrame</span><br>        <span class="hljs-type">JPanel</span> <span class="hljs-variable">chartPanel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XChartPanel</span>&lt;&gt;(chart);<br>        getContentPane().add(chartPanel, BorderLayout.CENTER);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SwingUtilities.invokeLater(() -&gt; &#123;<br>            <span class="hljs-type">StepChartExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StepChartExample</span>();<br>            example.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>            example.pack();<br>            example.setVisible(<span class="hljs-literal">true</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>通过本文的示例代码，您可以在 Java 应用程序中轻松创建多种类型的图表。XChart 提供了简单且强大的 API，能够满足大多数数据可视化需求。希望这些示例能帮助您更好地理解如何使用 XChart 进行数据可视化。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Vue Router 的 meta 属性实现多种功能</title>
    <link href="/blog/posts/44467.html"/>
    <url>/blog/posts/44467.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>在 Vue.js 中，Vue Router 提供了强大的路由管理功能。通过 meta 属性，我们可以在路由定义中添加自定义元数据，以实现访问控制、页面标题设置、角色权限管理、页面过渡效果等多种功能。本文将总结如何使用 meta 属性来实现这些常见的功能。</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240626104725.png"></p><h2 id="1-设置页面标题"><a href="#1-设置页面标题" class="headerlink" title="1. 设置页面标题"></a>1. 设置页面标题</h2><p>可以在路由的 meta 属性中指定页面标题，并在路由守卫中动态设置 document.title。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/Home&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Home Page&#x27;</span><br>        &#125;<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/About&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;About Us&#x27;</span><br>        &#125;<br>    &#125;<br>];<br><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>;<br>    &#125;<br>    <span class="hljs-title function_">next</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="2-角色权限管理"><a href="#2-角色权限管理" class="headerlink" title="2. 角色权限管理"></a>2. 角色权限管理</h2><p>通过在 meta 属性中指定允许访问的角色，可以实现不同用户角色的权限管理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Admin&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/Admin&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">requiresAuth</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">roles</span>: [<span class="hljs-string">&#x27;admin&#x27;</span>]<br>        &#125;<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/User&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">requiresAuth</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">roles</span>: [<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>]<br>        &#125;<br>    &#125;<br>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserRole</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;userRole&#x27;</span>);<br>&#125;<br><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">matched</span>.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">record</span> =&gt;</span> record.<span class="hljs-property">meta</span>.<span class="hljs-property">requiresAuth</span>)) &#123;<br>        <span class="hljs-keyword">const</span> userRole = <span class="hljs-title function_">getUserRole</span>();<br>        <span class="hljs-keyword">if</span> (!userRole) &#123;<br>            <span class="hljs-title function_">next</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span> &#125;);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (to.<span class="hljs-property">meta</span>.<span class="hljs-property">roles</span> &amp;&amp; to.<span class="hljs-property">meta</span>.<span class="hljs-property">roles</span>.<span class="hljs-title function_">indexOf</span>(userRole) === -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-title function_">next</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/unauthorized&#x27;</span> &#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">next</span>();<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">next</span>();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="3-页面过渡效果"><a href="#3-页面过渡效果" class="headerlink" title="3. 页面过渡效果"></a>3. 页面过渡效果</h2><p>在 meta 属性中指定页面过渡效果，并在主组件中使用 <transition> 标签。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/Home&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">transition</span>: <span class="hljs-string">&#x27;slide-left&#x27;</span><br>        &#125;<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/About&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">transition</span>: <span class="hljs-string">&#x27;fade&#x27;</span><br>        &#125;<br>    &#125;<br>];<br><br><span class="hljs-comment">// 在主组件中使用&lt;transition&gt;，例如App.vue</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;$route.meta.transition&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="4-页面缓存"><a href="#4-页面缓存" class="headerlink" title="4. 页面缓存"></a>4. 页面缓存</h2><p>使用 meta 属性来控制页面缓存，通过 keep-alive 组件实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/Home&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/About&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>];<br><br><span class="hljs-comment">// 在主组件中使用&lt;keep-alive&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;$route.meta.keepAlive&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="5-页面加载指示器"><a href="#5-页面加载指示器" class="headerlink" title="5. 页面加载指示器"></a>5. 页面加载指示器</h2><p>在路由切换时显示加载指示器，通过 meta 属性控制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/Home&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">showLoading</span>: <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/About&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">showLoading</span>: <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>];<br><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">meta</span>.<span class="hljs-property">showLoading</span>) &#123;<br>        <span class="hljs-comment">// 显示加载指示器</span><br>        <span class="hljs-title function_">showLoadingIndicator</span>();<br>    &#125;<br>    <span class="hljs-title function_">next</span>();<br>&#125;);<br><br>router.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 隐藏加载指示器</span><br>    <span class="hljs-title function_">hideLoadingIndicator</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="6-路由动画"><a href="#6-路由动画" class="headerlink" title="6. 路由动画"></a>6. 路由动画</h2><p>在路由切换时使用不同的动画效果，通过 meta 属性指定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/Home&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">animation</span>: <span class="hljs-string">&#x27;slide-left&#x27;</span><br>        &#125;<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/About&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">animation</span>: <span class="hljs-string">&#x27;slide-right&#x27;</span><br>        &#125;<br>    &#125;<br>];<br><br><span class="hljs-comment">// 在App.vue中使用&lt;transition&gt;标签</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;$route.meta.animation&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过在 Vue Router 中使用 meta 属性，我们可以方便地实现多种功能，如设置页面标题、管理角色权限、控制页面过渡效果和缓存等。这不仅提高了代码的可维护性，还大大增强了应用的用户体验。希望这篇文章能帮助你更好地理解和使用 Vue Router 的 meta 属性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解 Vuex：State、Mutations、Actions 和 Getters</title>
    <link href="/blog/posts/65492.html"/>
    <url>/blog/posts/65492.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>Vuex 是 Vue.js 的状态管理模式库，它提供了一种集中式存储应用中所有组件的状态的机制，并以相应的规则保证状态以一种可预测的方式发生变化。在这篇博客中，我们将深入探讨 Vuex 的四个核心概念：state、mutations、actions 和 getters，并了解它们如何协同工作来管理 Vue.js 应用的状态。</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240624234740.png"></p><h2 id="一、State：应用的状态存储"><a href="#一、State：应用的状态存储" class="headerlink" title="一、State：应用的状态存储"></a>一、State：应用的状态存储</h2><p>state 是 Vuex 的基本构件，它存储了应用的所有共享数据。可以将 state 想象成一个大的数据仓库，应用中的每个组件都可以访问和使用这个仓库中的数据。</p><p>示例：</p><p>在 store&#x2F;index.js 中定义 state：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>在组件中访问 state：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;template&gt;<br>  &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  computed: &#123;<br>    count() &#123;<br>      return this.$store.state.count;<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="二、Mutations：同步地更改状态"><a href="#二、Mutations：同步地更改状态" class="headerlink" title="二、Mutations：同步地更改状态"></a>二、Mutations：同步地更改状态</h2><p>mutations 是唯一能够更改 Vuex 状态的方法。每个 mutation 都有一个字符串类型的事件类型和一个回调函数。这个回调函数接收 state 作为第一个参数。</p><p>如何理解：<br>可以把 mutations 看作是用于修改 state 的同步函数。</p><p>示例：</p><p>在 store&#x2F;index.js 中定义 mutations：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">count</span>++;<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>在组件中提交 mutations：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;&#123;&#123; count &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  computed: &#123;<br>    count() &#123;<br>      return this.$store.state.count;<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    increment() &#123;<br>      this.$store.commit(&#x27;increment&#x27;);<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="三、Actions：处理异步操作"><a href="#三、Actions：处理异步操作" class="headerlink" title="三、Actions：处理异步操作"></a>三、Actions：处理异步操作</h2><p>actions 与 mutations 类似，不同的是 actions 可以包含异步操作。actions 通过提交 mutations 来间接更改状态，而不是直接更改状态。</p><p>如何理解：<br>可以把 actions 看作是可以包含异步操作的函数，它们最终会通过 mutations 来改变状态。</p><p>示例：</p><p>在 store&#x2F;index.js 中定义 actions：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">count</span>++;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params">context</span>) &#123;<br>      context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>在组件中分发 actions：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;&#123;&#123; count &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  computed: &#123;<br>    count() &#123;<br>      return this.$store.state.count;<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    increment() &#123;<br>      this.$store.dispatch(&#x27;increment&#x27;);<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="四、Getters：派生状态"><a href="#四、Getters：派生状态" class="headerlink" title="四、Getters：派生状态"></a>四、Getters：派生状态</h2><p>getters 类似于 Vue 组件中的计算属性，它们用来从 state 中派生出一些状态。getters 可以用来过滤、计算或格式化 state 中的数据。</p><p>如何理解：<br>可以把 getters 看作是对 state 进行计算或处理后派生出的新的状态。</p><p>示例：</p><p>在 store&#x2F;index.js 中定义 getters：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">doubleCount</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> * <span class="hljs-number">2</span>;<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>在组件中使用 getters：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;template&gt;<br>  &lt;div&gt;&#123;&#123; doubleCount &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  computed: &#123;<br>    doubleCount() &#123;<br>      return this.$store.getters.doubleCount;<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过结合使用 Vuex 的 state、mutations、actions 和 getters，我们可以有效地管理 Vue.js 应用的状态：</p><pre><code class="hljs">State：存储应用中的状态数据。Mutations：定义同步操作以更改状态。Actions：定义可以包含异步操作的函数，最终通过 mutations 来更改状态。Getters：定义从 state 中派生出的新状态，用于对 state 进行计算或处理。</code></pre><p>理解和掌握这四个核心概念，可以帮助你更好地使用 Vuex 来管理 Vue.js 应用的状态，使你的应用更加稳定和易于维护。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬取与可视化豆瓣电影Top250数据(python实现)</title>
    <link href="/blog/posts/3884.html"/>
    <url>/blog/posts/3884.html</url>
    
    <content type="html"><![CDATA[<h1 id="爬取与可视化豆瓣电影Top250数据"><a href="#爬取与可视化豆瓣电影Top250数据" class="headerlink" title="爬取与可视化豆瓣电影Top250数据"></a>爬取与可视化豆瓣电影Top250数据</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>在数据科学的学习过程中，数据获取与数据可视化是两项重要的技能。本文将展示如何通过Python爬取豆瓣电影Top250的电影数据，并将这些数据存储到数据库中，随后进行数据分析和可视化展示。这个项目涵盖了从数据抓取、存储到数据可视化的整个过程，帮助大家理解数据科学项目的全流程。</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/image-20240607153947167.png" alt="image-20240607153947167"></p><h2 id="环境配置与准备工作"><a href="#环境配置与准备工作" class="headerlink" title="环境配置与准备工作"></a>环境配置与准备工作</h2><p>在开始之前，我们需要确保安装了一些必要的库：</p><ul><li>urllib：用于发送HTTP请求和获取网页数据</li><li>BeautifulSoup：用于解析HTML数据</li><li>pymysql：用于连接和操作MySQL数据库</li><li>time 和 random：用于添加延迟，防止被目标网站屏蔽</li><li>pandas：用于数据操作和分析</li><li>matplotlib 和 seaborn：用于数据可视化</li></ul><h2 id="数据爬取"><a href="#数据爬取" class="headerlink" title="数据爬取"></a>数据爬取</h2><p>我们将通过Python脚本爬取豆瓣电影Top250的数据。豆瓣Top250电影的页面按25部电影分页展示，我们将遍历这些页面获取电影信息。以下是爬取电影数据的伪代码描述：</p><ol><li>设置数据库连接配置</li><li>定义豆瓣电影URL模板</li><li>创建函数 get_movie_data(start) 用于爬取指定页面的数据<br>a. 构造请求URL并发送请求<br>b. 解析返回的HTML数据<br>c. 提取电影的标题、评分、URL、描述和评论数量等信息</li><li>创建函数 save_to_db(movies) 用于将电影数据保存到数据库</li><li>遍历所有页面，获取电影数据并保存到数据库</li><li>关闭数据库连接</li></ol><p><img src="http://cdn.qiniu.liyansheng.top/img/image-20240607153823702.png" alt="image-20240607153823702"></p><h2 id="数据分析与可视化"><a href="#数据分析与可视化" class="headerlink" title="数据分析与可视化"></a>数据分析与可视化</h2><p>完成数据爬取后，我们将数据从数据库中读取出来，并进行分析和可视化展示。</p><p>做出以下图表用来分析：</p><pre><code class="hljs">电影评分分布图：显示了电影评分的分布情况，评分主要集中在8.0到9.0之间。评分与评论数量关系图：展示了评分与评论数量之间的关系，评论数量较多的电影评分也较高。电影评分箱线图：展示了电影评分的箱线图，可以看出大部分电影的评分都很高，几乎没有低评分的电影。热门电影前十排名：展示了评分最高的前十部电影。评论数量分布图：显示了评论数量的分布情况，大部分电影的评论数量集中在几千到几万之间。评分与评论数量双轴图：展示了每部电影的评分和评论数量的关系，方便对比。</code></pre><p>结果展示</p><p><img src="http://cdn.qiniu.liyansheng.top/img/20240607015233.png"></p><p>通过这个项目，我们从豆瓣电影网站爬取了Top250的电影数据，并对这些数据进行了可视化展示。我们可以看到，豆瓣电影Top250的评分普遍较高，评分与评论数量之间存在一定的正相关关系。这种数据分析和可视化方法不仅可以应用于电影数据，还可以扩展到其他领域的数据分析中。希望这篇文章对大家有所帮助！</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><img src="http://cdn.qiniu.liyansheng.top/img/20240607155150.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>体育器材管理系统（Java+MySQL）</title>
    <link href="/blog/posts/1935.html"/>
    <url>/blog/posts/1935.html</url>
    
    <content type="html"><![CDATA[<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li><strong>Java语言</strong>：作为主要编程语言，用于编写应用逻辑和界面交互。</li><li><strong>MySQL数据库</strong>：用于存储和管理体育器材的相关数据。</li><li><strong>Swing窗口视图</strong>：用于创建图形用户界面，使用户能够通过窗口进行操作（GBK编码）。</li><li><strong>JDBC依赖包</strong>：用于Java与MySQL数据库之间的连接和交互。</li></ul><h2 id="功能效果展示"><a href="#功能效果展示" class="headerlink" title="功能效果展示"></a>功能效果展示</h2><h3 id="管理员登录"><a href="#管理员登录" class="headerlink" title="管理员登录"></a>管理员登录</h3><p>管理员可以通过登录界面进入系统，确保只有授权用户才能管理器材。<br><img src="http://cdn.qiniu.liyansheng.top/img/20240606182055.png"></p><h3 id="主页及查询功能"><a href="#主页及查询功能" class="headerlink" title="主页及查询功能"></a>主页及查询功能</h3><p>在主页上，用户可以浏览所有器材的信息，并通过搜索功能快速查找特定器材。</p><p><img src="http://cdn.qiniu.liyansheng.top/img/20240606182141.png"></p><h3 id="新增器材"><a href="#新增器材" class="headerlink" title="新增器材"></a>新增器材</h3><p>管理员可以通过此界面添加新的体育器材，输入器材名称、归属、负责人等信息并保存到数据库中。<br><img src="http://cdn.qiniu.liyansheng.top/img/20240606182517.png"></p><h3 id="编辑器材"><a href="#编辑器材" class="headerlink" title="编辑器材"></a>编辑器材</h3><p>管理员可以选择并编辑现有器材的信息，包括名称、归属，数量等。修改后的信息将实时更新到数据库中。<br><img src="http://cdn.qiniu.liyansheng.top/img/20240606182637.png"></p><h3 id="删除器材"><a href="#删除器材" class="headerlink" title="删除器材"></a>删除器材</h3><p>管理员可以删除选中的器材，系统将提示确认操作以避免误删，删除后数据将从数据库中移除。<br><img src="http://cdn.qiniu.liyansheng.top/img/20240606183319.png"></p><h3 id="器材借出"><a href="#器材借出" class="headerlink" title="器材借出"></a>器材借出</h3><p>用户可以选择器材并进行借出操作，系统会记录借用人信息等，并更新器材状态为“借出”，同时更新该器材的存量。<br><img src="http://cdn.qiniu.liyansheng.top/img/20240606182552.png"></p><h3 id="归还器材"><a href="#归还器材" class="headerlink" title="归还器材"></a>归还器材</h3><p>借出的器材可以通过此界面进行归还操作，系统会将器材状态更新为“已归还”。同时更新该器材的存量。<br><img src="http://cdn.qiniu.liyansheng.top/img/20240606184129.png"></p><h3 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h3><ul><li><strong>登录模块</strong>：用于验证用户身份，确保只有授权用户能访问系统。</li><li><strong>主页模块</strong>：展示所有器材的列表，提供查询和筛选功能。</li><li><strong>器材管理模块</strong>：包括新增、编辑、删除功能，用于维护器材信息。</li><li><strong>借还管理模块</strong>：记录器材的借出和归还操作，管理借用记录。</li></ul><h3 id="Swing窗口视图"><a href="#Swing窗口视图" class="headerlink" title="Swing窗口视图"></a>Swing窗口视图</h3><p>使用Java Swing创建用户界面，提供友好的图形界面以方便用户操作。主要包括：</p><ul><li><strong>登录窗口</strong>：用于用户登录验证。</li><li><strong>主窗口</strong>：展示器材列表及查询功能。</li><li><strong>新增&#x2F;编辑窗口</strong>：用于添加或修改器材信息。</li><li><strong>借出&#x2F;归还窗口</strong>：用于管理器材的借出和归还操作。</li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><img src="http://cdn.qiniu.liyansheng.top/img/20240606185229.png"></p><h2 id="远程调试，点我"><a href="#远程调试，点我" class="headerlink" title="远程调试，点我"></a><a href="http://blog.liyansheng.top/remote_help">远程调试，点我</a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运动会信息管理系统（web）</title>
    <link href="/blog/posts/39916.html"/>
    <url>/blog/posts/39916.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本课题主要实现对运动会信息的管理，基础功能包含运动员报名比赛，比赛成绩查询，资讯留言等功能，可扩展性较高，使用主流的开发技术实现，项目结构规范。</p></blockquote><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>MySQL</li><li>Springboot</li><li>Sa-token</li><li>Mybatis-plus</li><li>Thymeleaf</li><li>LayUI</li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><table><thead><tr><th>功能点</th><th>效果图</th></tr></thead><tbody><tr><td>首页-轮播-公告</td><td><img src="http://cdn.qiniu.liyansheng.top/img/20240602223346.png"></td></tr><tr><td>登录认证</td><td><img src="http://cdn.qiniu.liyansheng.top/img/20240602223220.png"></td></tr><tr><td>比赛报名</td><td><img src="http://cdn.qiniu.liyansheng.top/img/20240602223506.png"></td></tr><tr><td>成绩查询</td><td><img src="http://cdn.qiniu.liyansheng.top/img/20240602223532.png"></td></tr><tr><td>留言板块</td><td><img src="http://cdn.qiniu.liyansheng.top/img/20240602224036.png"></td></tr></tbody></table><blockquote><p>可根据需要，继续扩展</p></blockquote><h2 id="需要远程调试，点我😀"><a href="#需要远程调试，点我😀" class="headerlink" title="需要远程调试，点我😀"></a><a href="http://blog.liyansheng.top/remote_help/">需要远程调试，点我😀</a></h2><h2 id="源码👇"><a href="#源码👇" class="headerlink" title="源码👇"></a>源码👇</h2><p><img src="http://cdn.qiniu.liyansheng.top/img/20240602231331.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>就诊预约-微信小程序</title>
    <link href="/blog/posts/35671.html"/>
    <url>/blog/posts/35671.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>核心功能要求实现根据病症推荐医院，可结合多种推荐逻辑，可新增预约，查看预约信息，要实现微信登录，可根据自己发挥扩加别的功能使其更完善。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li>Java</li><li>MySQL</li><li>SpringBoot</li><li>MybatisPlus</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li>微信小程序</li></ul><h2 id="已实现👇"><a href="#已实现👇" class="headerlink" title="已实现👇"></a>已实现👇</h2><blockquote><p>微信登录</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240603173606.png"></p><blockquote><p>首页   </p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240603170813.png">   </p><blockquote><p>健康科普 </p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240603170847.png">    </p><blockquote><p>名师风采</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240603170950.png"></p><blockquote><p>个人预约</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240603171038.png"></p><blockquote><p>健康档案</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240603171546.png"></p><blockquote><p>信息反馈</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240603171617.png"></p><blockquote><p>医院推荐</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240603182633.png"></p><blockquote><p>科室预约</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240603182737.png"></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><img src="http://cdn.qiniu.liyansheng.top/img/20240603192844.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态网页实现-人脸识别-案例（web)</title>
    <link href="/blog/posts/875.html"/>
    <url>/blog/posts/875.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于开源大模型，将人脸识别功能整合到网页中，提供用户友好的界面和强大的功能。</p></blockquote><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><ul><li>人脸轮廓识别： 通过深度学习算法，精确识别人脸的轮廓，包括眼睛、鼻子、嘴巴等关键部位。支持实时识别和静态图像识别。</li><li>表情识别： 能够识别多种表情，如高兴、悲伤、愤怒、惊讶等。 支持多表情同时识别，提供细致的情感分析。</li><li>人脸相似度识别： 计算两张人脸图像的相似度，返回相似度评分。可用于身份验证、社交平台用户推荐等场景。</li></ul><h2 id="页面附加"><a href="#页面附加" class="headerlink" title="页面附加"></a>页面附加</h2><ul><li>可控制图像识别的启停</li><li>可捕获图像画面</li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><blockquote><p>测试1</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240604004418.png"></p><blockquote><p>测试2</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/img/20240604004439.png"></p><h2 id="源码👇"><a href="#源码👇" class="headerlink" title="源码👇"></a>源码👇</h2><p><img src="http://cdn.qiniu.liyansheng.top/img/20240604005952.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL做全文搜索</title>
    <link href="/blog/posts/20208.html"/>
    <url>/blog/posts/20208.html</url>
    
    <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>MySQL 提供了全文搜索功能，可以使用 <code>MATCH</code> … <code>AGAINST</code> 来执行全文搜索操作。</p><p>在使用全文索引之前，需要先创建一个全文索引。你可以为表中的多个字段创建一个全文索引。下面是一个简单的示例：</p><p>假设你有一个表名为 <code>your_table</code>，包含两个字段 <code>column1</code> 和 <code>column2</code>，你想要对这两个字段进行全文搜索。首先，你需要为这两个字段创建一个全文索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> FULLTEXT INDEX idx_fulltext_search <span class="hljs-keyword">ON</span> your_table (column1, column2);<br></code></pre></td></tr></table></figure><p>这将创建一个名为 <code>idx_fulltext_search</code> 的全文索引，用于 <code>column1</code> 和 <code>column2</code> 字段。</p><p>然后，你可以使用 <code>MATCH</code> … <code>AGAINST</code> 语句执行全文搜索操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> your_table <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">MATCH</span>(column1, column2) AGAINST (<span class="hljs-string">&#x27;your_keyword&#x27;</span>);<br></code></pre></td></tr></table></figure><p>这将返回包含 ‘your_keyword’ 的行，其中 ‘your_keyword’ 可以是一个单词或者短语。</p><p>需要注意的是，全文索引只能用于特定的存储引擎（如 MyISAM 和 InnoDB），而且只支持特定的字符集（如 utf8）。此外，全文索引也不支持部分匹配，如通配符或 <code>LIKE</code> 操作符，它主要用于执行全文搜索。</p><h2 id="在Mybatis-plus使用"><a href="#在Mybatis-plus使用" class="headerlink" title="在Mybatis-plus使用"></a>在Mybatis-plus使用</h2><p>在 MyBatis-Plus 中，你可以使用 QueryWrapper 或 LambdaQueryWrapper 来构建查询条件。虽然 MyBatis-Plus 不直接提供全文搜索的 API，但你仍然可以使用自定义的 SQL 语句来执行全文搜索。</p><p>以下是一个示例，演示了如何在 MyBatis-Plus 中使用自定义 SQL 执行全文搜索：</p><p>假设你有一个实体类 <code>YourEntity</code> 对应数据库表 <code>your_table</code>，你想要对其中的 <code>column1</code> 和 <code>column2</code> 字段执行全文搜索。</p><ol><li>首先，创建一个 Mapper 接口，定义一个自定义的查询方法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">YourMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;YourEntity&gt; &#123;<br>    List&lt;YourEntity&gt; <span class="hljs-title function_">searchByFullText</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;keyword&quot;)</span> String keyword)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>然后，在 XML 映射文件中编写 SQL 语句：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;searchByFullText&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;YourEntity&quot;</span>&gt;</span><br>    SELECT * FROM your_table<br>    WHERE MATCH(column1, column2) AGAINST (#&#123;keyword&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>最后，在 Service 层中调用自定义的查询方法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YourService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> YourMapper yourMapper;<br><br>    <span class="hljs-keyword">public</span> List&lt;YourEntity&gt; <span class="hljs-title function_">searchByFullText</span><span class="hljs-params">(String keyword)</span> &#123;<br>        <span class="hljs-keyword">return</span> yourMapper.searchByFullText(keyword);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就可以在 MyBatis-Plus 中执行全文搜索了。需要注意的是，确保你的数据库表引擎支持全文索引，并且正确配置了全文索引的字段。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pm2 进程管理工具</title>
    <link href="/blog/posts/49317.html"/>
    <url>/blog/posts/49317.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>官网：<a href="https://pm2.keymetrics.io/">https://pm2.keymetrics.io/</a></p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>PM2是一个流行的Node.js进程管理器。它允许你简化Node.js应用程序的部署和管理。PM2可以帮助你在生产环境中管理Node.js进程，包括启动、停止、重启应用程序，以及监视应用程序的状态和日志。它还具有一些其他功能，比如负载均衡、自动重新启动、内存监控等。 PM2还提供了一个简单的命令行界面，使得管理和监控Node.js应用程序变得更加方便。</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><strong>启动应用程序</strong>：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">pm2 <span class="hljs-keyword">start</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">app.js</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>停止应用程序</strong>：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">pm2 stop &lt;app_name<span class="hljs-string">|app_id&gt;</span><br></code></pre></td></tr></table></figure><p><strong>重启应用程序</strong>：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">pm2 restart &lt;app_name<span class="hljs-string">|app_id&gt;</span><br></code></pre></td></tr></table></figure><p><strong>重新加载应用程序</strong>（不关闭服务）：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">pm2 reload &lt;app_name<span class="hljs-string">|app_id&gt;</span><br></code></pre></td></tr></table></figure><p><strong>查看应用程序列表</strong>：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">p<span class="hljs-name">m2</span> list<br></code></pre></td></tr></table></figure><p><strong>查看应用程序详细信息</strong>：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">pm2 show &lt;app_name<span class="hljs-string">|app_id&gt;</span><br></code></pre></td></tr></table></figure><p><strong>查看实时日志</strong>：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">pm2 logs &lt;app_name<span class="hljs-string">|app_id&gt;</span><br></code></pre></td></tr></table></figure><p><strong>清除日志</strong>：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">pm2 flush<br></code></pre></td></tr></table></figure><p><strong>监视模式启动应用程序</strong>（会自动重启）：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> &lt;app.js&gt; <span class="hljs-comment">--watch</span><br></code></pre></td></tr></table></figure><p><strong>设置应用程序的数量</strong>（用于负载均衡）：</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">pm2 scale <span class="hljs-attribute">&lt;app_name|app_id&gt;</span> <span class="hljs-attribute">&lt;number_of_instances&gt;</span><br></code></pre></td></tr></table></figure><p>这只是其中的一部分命令，PM2还有更多功能和选项，你可以通过查阅官方文档来获取更多信息。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><blockquote><p>使用pm2管理hexo 进程，使其可以在后台持续运行</p></blockquote><ol><li><p>安装</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -g pm2<br></code></pre></td></tr></table></figure></li><li><p>在hexo根目录新建运行文件，如<code>hexo_run.js</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//run</span><br><span class="hljs-keyword">const</span> &#123; exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<br><span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;hexo server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(error)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exec error: $&#123;error&#125;&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>启动进程服务 </p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@Lys-Server hexo-blog]<span class="hljs-comment"># pm2 start hexo_run.js </span><br>[PM2] Starting <span class="hljs-regexp">/root/</span>hexo<span class="hljs-regexp">/hexo-blog-originfile/</span>hexo_run.js <span class="hljs-keyword">in</span> fork_mode (<span class="hljs-number">1</span> instance)<br>[PM2] Done.<br>┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐<br>│ id │ name               │ mode     │ ↺    │ status    │ cpu      │ memory   │<br>├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼──────────┤<br>│ <span class="hljs-number">0</span>  │ hexo_run           │ fork     │ <span class="hljs-number">0</span>    │ online    │ <span class="hljs-number">0</span>%       │ <span class="hljs-number">15.3</span>mb   │<br>└────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘<br></code></pre></td></tr></table></figure></li><li><p>这样就OK了😁</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🕹工欲善其事，必先利其器——常用开发手段汇总</title>
    <link href="/blog/tool/"/>
    <url>/blog/tool/</url>
    
    <content type="html"><![CDATA[<h1 id="👉持续更新中…"><a href="#👉持续更新中…" class="headerlink" title="👉持续更新中….."></a>👉持续更新中…..</h1><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><table><thead><tr><th>名称</th><th>用途</th><th>📝</th></tr></thead><tbody><tr><td><a href="https://sa-token.cc/">sa-token</a></td><td>极简权限控制</td><td>常用</td></tr><tr><td><a href="https://java.bejson.com/generator/">大狼狗代码生成器</a></td><td>减少大量的重复CRUD</td><td>留用</td></tr><tr><td><a href="https://www.usebruno.com/">Bruno接口调试工具</a></td><td>可替代postman，免费开源</td><td>推荐</td></tr><tr><td><a href="https://gitee.com/qishibo/AnotherRedisDesktopManager/releases">Redis可视化</a></td><td>免费开源</td><td>推荐</td></tr><tr><td><a href="https://www.justauth.cn/">JustAuth第三方登录 </a></td><td>免费开源</td><td>推荐</td></tr></tbody></table><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><table><thead><tr><th>名称</th><th>用途</th><th>📝</th></tr></thead><tbody><tr><td><a href="https://layui.dev/docs/2/carousel/">layUI-Carousel</a></td><td>轮播图</td><td>上手简单</td></tr><tr><td><a href="https://fullcalendar.io/">FullCalendar</a></td><td>日历日程展示</td><td>推荐</td></tr><tr><td><a href="https://www.wangeditor.com/">wangEditor 5</a></td><td>富文本编辑器</td><td>简洁易用，功能强大</td></tr><tr><td><a href="https://select2.org/">select2</a></td><td>选择、下拉、多选组件</td><td>简约，自带搜索，功能多</td></tr><tr><td><a href="https://layui.dev/docs/2/layer/">Layer</a></td><td>弹出层，消息，表单，新窗口等</td><td>yyds🎉</td></tr><tr><td><a href="https://leafletjs.com/">Leaflet</a></td><td>开源地图</td><td>太牛了，力荐</td></tr><tr><td><a href="https://xdsoft.net/jodit/">Jodit Editor</a></td><td>富文本编辑器</td><td>功能齐全，首选</td></tr><tr><td><a href="https://layui.dev/docs/2/laydate/">laydate</a></td><td>时间日期选择</td><td>这个更简单，首选😁</td></tr><tr><td><a href="https://animate.style/">Animate.css</a></td><td>动画效果</td><td>超简单，加个类名就生效了🤳</td></tr><tr><td><a href="https://driverjs.com/">driver.js</a></td><td>网页操作引导</td><td>简单易用</td></tr><tr><td><a href="http://mockjs.com/">Mock.js</a></td><td>生成随机数据，拦截 Ajax 请求</td><td>留着先</td></tr><tr><td><a href="https://www.sojson.com/web/use.html">色彩</a></td><td>网页色彩搭配</td><td></td></tr><tr><td><a href="https://bootstrap-table.com/">Bootstrap Table</a></td><td>表格组件</td><td>集成还是挺好用的❤</td></tr><tr><td><a href="https://icons.getbootstrap.com/">Bootstrap Icons</a></td><td>图标库</td><td>备用</td></tr><tr><td><a href="https://datatables.club/">Datatables</a></td><td>表格组件</td><td>有点难，留着备用</td></tr><tr><td><a href="https://www.bootstrap-admin.top/">bootstrap-admin</a></td><td>bootstrap后台模板</td><td>学习参考不错</td></tr><tr><td><a href="https://sweetalert2.github.io/#examples">sweetalert2</a></td><td>各种弹窗操作</td><td>挺不错，备选</td></tr><tr><td><a href="https://fengyuanchen.github.io/viewerjs/">viewer</a></td><td>点击图片放大预览等操作</td><td>nice👍</td></tr><tr><td><a href="https://splidejs.com/guides/getting-started/">Splide</a></td><td>轮播图</td><td>很惊艳华丽，使用简单❤</td></tr><tr><td><a href="https://ajcaptcha.beliefteam.cn/captcha-doc/">AJ-Captcha</a></td><td>滑动验证码</td><td>使用简单❤</td></tr></tbody></table><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><table><thead><tr><th>名称</th><th>用途</th><th>📝</th></tr></thead><tbody><tr><td><a href="https://1panel.cn/">1Panel</a></td><td>可视化操作Linux</td><td>方便</td></tr><tr><td><a href="https://pm2.keymetrics.io/">pm2</a></td><td>进程管理工具</td><td>上手简单</td></tr><tr><td><a href="https://analytics.google.com/analytics/web/">谷歌站点访问记录</a></td><td>站点分析</td><td>易集成</td></tr></tbody></table><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><table><thead><tr><th>名称</th><th>用途</th><th>📝</th></tr></thead><tbody><tr><td><a href="https://codeimg.io/">codeimg</a></td><td>将代码转成精美的图片</td><td>挺好</td></tr><tr><td><a href="https://cdnjs.com/">cdnjs</a></td><td>免费，开源的CDN</td><td>常用</td></tr><tr><td><a href="https://www.jsdelivr.com/">jsdelivr</a></td><td>免费，开源的CDN</td><td>常用</td></tr><tr><td><a href="https://stackblitz.com/">StackBlitz</a></td><td>在线版VScode</td><td>力荐❤</td></tr><tr><td><a href="https://sc.chinaz.com/">站长素材</a></td><td>网页模板，各种资源</td><td>nice</td></tr><tr><td><a href="https://codepen.io/">CodePen</a></td><td>各种精美的网页组件</td><td>常用</td></tr><tr><td><a href="https://wormhole.app/">在线加密传输文件</a></td><td>nice</td><td>常用</td></tr></tbody></table><h2 id="多媒体素材"><a href="#多媒体素材" class="headerlink" title="多媒体素材"></a>多媒体素材</h2><table><thead><tr><th>名称</th><th>用途</th><th>📝</th></tr></thead><tbody><tr><td><a href="http://www.netbian.com/">彼岸壁纸</a></td><td>图片，壁纸多多</td><td>力荐</td></tr><tr><td><a href="https://www.nuantang.net/">暖糖壁纸</a></td><td>免费，质量高</td><td>力荐</td></tr><tr><td><a href="https://www.pngsucai.com/">PNG素材</a></td><td>丰富</td><td>常用</td></tr><tr><td><a href="https://bz.zzzmh.cn/index">极简壁纸</a></td><td>丰富</td><td>常用</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java程序生成文字图片</title>
    <link href="/blog/posts/974.html"/>
    <url>/blog/posts/974.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>文字图片还手画？接下来教你如何程序自动生成，只需传入字符串即可，效果很nice👇</p></blockquote><h2 id="1️⃣效果1"><a href="#1️⃣效果1" class="headerlink" title="1️⃣效果1"></a>1️⃣效果1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.travel.util;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.embed.swing.SwingFXUtils;<br><span class="hljs-keyword">import</span> javafx.scene.Group;<br><span class="hljs-keyword">import</span> javafx.scene.SnapshotParameters;<br><span class="hljs-keyword">import</span> javafx.scene.canvas.Canvas;<br><span class="hljs-keyword">import</span> javafx.scene.canvas.GraphicsContext;<br><span class="hljs-keyword">import</span> javafx.scene.image.WritableImage;<br><span class="hljs-keyword">import</span> javafx.scene.paint.Color;<br><span class="hljs-keyword">import</span> javafx.scene.text.Font;<br><span class="hljs-keyword">import</span> javafx.scene.text.FontWeight;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DirectionImage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">WIDTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">450</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">HEIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> &#123;<br>        <span class="hljs-comment">// Input locations</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">location1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;广州  ——&gt;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">location2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;上海&quot;</span>;<br><br>        <span class="hljs-comment">// Create a canvas</span><br>        <span class="hljs-type">Canvas</span> <span class="hljs-variable">canvas</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Canvas</span>(WIDTH, HEIGHT);<br>        <span class="hljs-type">GraphicsContext</span> <span class="hljs-variable">gc</span> <span class="hljs-operator">=</span> canvas.getGraphicsContext2D();<br><br>        gc.setFont(Font.font(<span class="hljs-string">&quot;宋体&quot;</span>, FontWeight.BOLD, <span class="hljs-number">45</span>));<br><br>        <span class="hljs-comment">// Draw text</span><br>        gc.setFill(Color.BLUE);<br>        gc.fillText(location1, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>);<br>        gc.fillText(location2, <span class="hljs-number">300</span>, <span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">// Save the canvas as an image</span><br>        saveAsImage(canvas);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAsImage</span><span class="hljs-params">(Canvas canvas)</span> &#123;<br>        <span class="hljs-type">WritableImage</span> <span class="hljs-variable">writableImage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WritableImage</span>(WIDTH, HEIGHT);<br>        canvas.snapshot(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SnapshotParameters</span>(), writableImage);<br><br>        <span class="hljs-comment">// Write the image to file</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;output.png&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            ImageIO.write(SwingFXUtils.fromFXImage(writableImage, <span class="hljs-literal">null</span>), <span class="hljs-string">&quot;png&quot;</span>, file);<br>            System.out.println(<span class="hljs-string">&quot;Image saved as: &quot;</span> + file.getAbsolutePath());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// Close the application</span><br>        System.exit(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240423211736939.png" alt="image-20240423211736939"></p><h2 id="2️⃣效果2"><a href="#2️⃣效果2" class="headerlink" title="2️⃣效果2"></a>2️⃣效果2</h2><p>添加随机背景偏淡颜色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.travel.util;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.embed.swing.SwingFXUtils;<br><span class="hljs-keyword">import</span> javafx.scene.Group;<br><span class="hljs-keyword">import</span> javafx.scene.SnapshotParameters;<br><span class="hljs-keyword">import</span> javafx.scene.canvas.Canvas;<br><span class="hljs-keyword">import</span> javafx.scene.canvas.GraphicsContext;<br><span class="hljs-keyword">import</span> javafx.scene.image.WritableImage;<br><span class="hljs-keyword">import</span> javafx.scene.paint.Color;<br><span class="hljs-keyword">import</span> javafx.scene.text.Font;<br><span class="hljs-keyword">import</span> javafx.scene.text.FontWeight;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DirectionImage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">WIDTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">450</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">HEIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> &#123;<br>        <span class="hljs-comment">// Input locations</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">location1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;广州  ——&gt;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">location2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;上海&quot;</span>;<br><br>        <span class="hljs-comment">// Create a canvas</span><br>        <span class="hljs-type">Canvas</span> <span class="hljs-variable">canvas</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Canvas</span>(WIDTH, HEIGHT);<br>        <span class="hljs-type">GraphicsContext</span> <span class="hljs-variable">gc</span> <span class="hljs-operator">=</span> canvas.getGraphicsContext2D();<br><br>        <span class="hljs-comment">// Fill canvas with a randomly light background color</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">Color</span> <span class="hljs-variable">backgroundColor</span> <span class="hljs-operator">=</span> Color.rgb(random.nextInt(<span class="hljs-number">150</span>), random.nextInt(<span class="hljs-number">150</span>), random.nextInt(<span class="hljs-number">150</span>), <span class="hljs-number">0.5</span>);<br>        gc.setFill(backgroundColor);<br>        gc.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, WIDTH, HEIGHT);<br><br>        gc.setFont(Font.font(<span class="hljs-string">&quot;宋体&quot;</span>, FontWeight.BOLD, <span class="hljs-number">45</span>));<br><br>        <span class="hljs-comment">// Draw text</span><br>        gc.setFill(Color.BLUE);<br>        gc.fillText(location1, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>);<br>        gc.fillText(location2, <span class="hljs-number">300</span>, <span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">// Save the canvas as an image</span><br>        saveAsImage(canvas);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAsImage</span><span class="hljs-params">(Canvas canvas)</span> &#123;<br>        <span class="hljs-type">WritableImage</span> <span class="hljs-variable">writableImage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WritableImage</span>(WIDTH, HEIGHT);<br>        canvas.snapshot(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SnapshotParameters</span>(), writableImage);<br><br>        <span class="hljs-comment">// Write the image to file</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;output.png&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            ImageIO.write(SwingFXUtils.fromFXImage(writableImage, <span class="hljs-literal">null</span>), <span class="hljs-string">&quot;png&quot;</span>, file);<br>            System.out.println(<span class="hljs-string">&quot;Image saved as: &quot;</span> + file.getAbsolutePath());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// Close the application</span><br>        System.exit(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240423211853757.png" alt="image-20240423211853757"></p><h2 id="🔑补充"><a href="#🔑补充" class="headerlink" title="🔑补充"></a>🔑补充</h2><blockquote><p>字符串包含<code>表情包</code>也行的</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240423212149342.png" alt="image-20240423212149342"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更新日志📝</title>
    <link href="/blog/posts/34223.html"/>
    <url>/blog/posts/34223.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="82ca9808a5e25a53f03fbe5e6f4c1775b4670425f98d4e1d6ccac85d02177909">43541987eb8aa9c68b023511d255b3510726cdcf096115fc735465eb7ee2b105942282e39c75851fbc8b781ec079b49b1bd52214d993f25c7c8c7000ecd572b0dacc179f0a470e71576b01802d396b3ee7b5a60907c4f797f49638102c250e8b8d0bb5308a7520e2119ea4b631774dfd2ab0ba286282726f6a36d8e28cea74439ecf77dd5a6078fbd88ae1d9f498cc59fa123bc01d728dd5863e4b45997ed51e77749422a301dda7c299b090f03b940743ff44956ac714011045edafedb297f5f501a0f4794c5fef09d6d112ab219e3f99fa5e4e5b4c7768f863a17dcf6780baa854f9048143d2a01b414c4c51c24be1958d79ca1456500c153e3cd7c3d311bb91eba65574b621d3b42f3133fc7c90d007fcb14856e938cb4b7aa716cb66b6f37174f465da204838af261fbb4f0c5b3f21d2f89cf0c35fe8768e6d4cd94d90e8f95e61476ffac98d755be6aba3c9b796838db90d4c7021a171d81593cf606e55c4c306bd58798fbed8a8149d39e7cce1ce601dc5ad3c6ca310dd5759af12406d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码✏</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>💪100%保真，在线监工，修改更追溯，随写随更新</title>
    <link href="/blog/issues_flow/"/>
    <url>/blog/issues_flow/</url>
    
    <content type="html"><![CDATA[<h1 id="😀任务进度跟踪"><a href="#😀任务进度跟踪" class="headerlink" title="😀任务进度跟踪"></a>😀任务进度跟踪</h1><p><img src="http://cdn.qiniu.liyansheng.top/img/note2.png"></p><h1 id="🎯代码提交记录"><a href="#🎯代码提交记录" class="headerlink" title="🎯代码提交记录"></a>🎯代码提交记录</h1><p><img src="http://cdn.qiniu.liyansheng.top/img/note4.png"></p><h1 id="📝修改细节，我怎么改的，改了哪里，你都可以看得到"><a href="#📝修改细节，我怎么改的，改了哪里，你都可以看得到" class="headerlink" title="📝修改细节，我怎么改的，改了哪里，你都可以看得到"></a>📝修改细节，我怎么改的，改了哪里，你都可以看得到</h1><p><img src="http://cdn.qiniu.liyansheng.top/img/20240623140314.png"></p><h3 id="1-使用码云，点我前往"><a href="#1-使用码云，点我前往" class="headerlink" title="1. 使用码云，点我前往"></a>1. 使用码云，<a href="https://gitee.com/">点我前往</a></h3><h3 id="2-需求、问题、bug随时提-👇"><a href="#2-需求、问题、bug随时提-👇" class="headerlink" title="2. 需求、问题、bug随时提     👇"></a>2. 需求、问题、bug随时提     👇</h3><hr><p>找到对应的仓库，点击<code>issues</code>，然后点击右边的<code>新增</code></p><p><img src="http://cdn.qiniu.liyansheng.top/img/s1.png"></p><p>填写<code>问题/需求</code>，<code>描述</code>，然后<code>提交</code></p><p><img src="http://cdn.qiniu.liyansheng.top/img/s2.png"></p><h3 id="3-🔑举例"><a href="#3-🔑举例" class="headerlink" title="3.🔑举例"></a>3.🔑举例</h3><p><img src="http://cdn.qiniu.liyansheng.top/img/s3.png"></p><h2 id="一般资费说明：点我查看"><a href="#一般资费说明：点我查看" class="headerlink" title="一般资费说明：点我查看"></a>一般资费说明：<a href="/remote_help/">点我查看</a></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>💪Springboot：最硬核的，最丝滑的数据导入导出</title>
    <link href="/blog/posts/14172.html"/>
    <url>/blog/posts/14172.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>🎉 数据导出,数据导入比较常见，这次碰壁比较久，在此总结下，这个操作方式是最精简丝滑的。</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240411132740576.png" alt="image-20240411132740576"></p><h2 id="🛠依赖"><a href="#🛠依赖" class="headerlink" title="🛠依赖"></a>🛠依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--hutool--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="✒写接口"><a href="#✒写接口" class="headerlink" title="✒写接口"></a>✒写接口</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><blockquote><p>先查出数据放到List，然后自定义表名，一次全部导出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/export&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">export</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 从数据库查询出所有的数据</span><br>        List&lt;User&gt; list = userService.list();<br> <br>        <span class="hljs-comment">// 左内存操作，写出到浏览器</span><br>        <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> ExcelUtil.getWriter(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 自定义标题别名</span><br>        writer.addHeaderAlias(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;用户名&quot;</span>);<br>        writer.addHeaderAlias(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;密码&quot;</span>);<br>        writer.addHeaderAlias(<span class="hljs-string">&quot;nickname&quot;</span>, <span class="hljs-string">&quot;昵称&quot;</span>);<br>        writer.addHeaderAlias(<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;邮箱&quot;</span>);<br>        writer.addHeaderAlias(<span class="hljs-string">&quot;phone&quot;</span>, <span class="hljs-string">&quot;电话&quot;</span>);<br>        writer.addHeaderAlias(<span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;地址&quot;</span>);<br>        writer.addHeaderAlias(<span class="hljs-string">&quot;createTime&quot;</span>, <span class="hljs-string">&quot;创建时间&quot;</span>);<br>        <span class="hljs-comment">// 一次性写出list内的对象到Excel，使用默认样式，强制输出标题</span><br>        writer.write(list, <span class="hljs-literal">true</span>);<br> <br>        <span class="hljs-comment">// 设置浏览器响应的格式</span><br>        response.setContentType(<span class="hljs-string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> URLEncoder.encode(<span class="hljs-string">&quot;用户信息&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + fileName + <span class="hljs-string">&quot;.xlsx&quot;</span>);<br> <br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        writer.flush(out, <span class="hljs-literal">true</span>);<br>        out.close();<br>        writer.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="🖼效果："><a href="#🖼效果：" class="headerlink" title="🖼效果："></a>🖼效果：</h3><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240411132621639.png" alt="image-20240411132621639"></p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><blockquote><p>导入也好理解，也是先设置对应列的映射。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    export 导入</span><br>    <span class="hljs-meta">@PostMapping(&quot;/import&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">imp</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> file.getInputStream();<br>        <span class="hljs-type">ExcelReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> ExcelUtil.getReader(inputStream);<br>        reader.addHeaderAlias(<span class="hljs-string">&quot;用户名&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>);<br>        reader.addHeaderAlias(<span class="hljs-string">&quot;密码&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>);<br>        reader.addHeaderAlias(<span class="hljs-string">&quot;昵称&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>);<br>        reader.addHeaderAlias(<span class="hljs-string">&quot;邮箱&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>);<br>        reader.addHeaderAlias(<span class="hljs-string">&quot;电话&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>);<br>        reader.addHeaderAlias(<span class="hljs-string">&quot;地址&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>);<br>        List&lt;User&gt; list = reader.readAll(User.class);<br>        <span class="hljs-keyword">return</span> Result.success(userService.saveBatch(list), <span class="hljs-string">&quot;&#x27;返回成功&#x27;&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Spring Boot与MyBatis的租车行者网站开发实践</title>
    <link href="/blog/posts/34106.html"/>
    <url>/blog/posts/34106.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>随着城市交通的不断发展和人们对便捷出行的需求不断增加，租车行业逐渐成为了一种流行的出行方式。在这个背景下，为了满足用户的需求，我开发了一个租车行者网站，采用了Spring Boot与MyBatis作为主要的开发技术，通过MySQL作为数据存储，结合Sa-token进行权限管理，实现了一系列功能。</p></blockquote><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>在现代社会，人们对出行的需求越来越多样化，传统的出行方式已经无法满足人们的需求。租车行业应运而生，为人们提供了一种便捷灵活的出行选择。为了更好地满足用户的需求，我决定开发一个租车行者网站，让用户可以方便地租车、查看车辆信息、进行评论等操作。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>Spring Boot：作为一个快速开发框架，Spring Boot提供了诸多便利，可以快速搭建起一个健壮的后端服务。</li><li>MyBatis：作为一个优秀的持久层框架，MyBatis可以帮助我们更方便地与数据库进行交互，提高开发效率。</li><li>MySQL：作为关系型数据库，MySQL具有成熟稳定的特点，能够满足网站的数据存储需求。</li><li>Sa-token：作为一个轻量级的权限框架，Sa-token提供了简单易用的权限管理功能，帮助我们保障网站的安全性。</li></ul><h2 id="已实现功能"><a href="#已实现功能" class="headerlink" title="已实现功能"></a>已实现功能</h2><ol><li><strong>登录与注册</strong>：用户可以通过注册账号并登录系统，享受更多个性化的服务。</li><li><strong>首页</strong>：展示网站的基本信息，让用户快速了解网站的特色。</li><li><strong>使用引导</strong>：提供用户使用网站的操作指南，帮助用户快速上手。</li><li><strong>车列表与车详情</strong>：展示可租用车辆的列表，并提供详细的车辆信息，方便用户选择。</li><li><strong>评论区</strong>：用户可以对租用过的车辆进行评价，分享使用体验。</li><li><strong>收藏</strong>：用户可以收藏自己喜欢的车辆，方便以后查看。</li><li><strong>下单约车</strong>：用户可以通过网站下单租车，方便快捷。</li><li><strong>车出租</strong>：车主可以在网站上发布自己的车辆信息，提供给他人租用。</li><li><strong>处理单子</strong>：管理员可以对订单进行管理，保障订单的顺利完成。</li></ol><p>根据需要可以继续扩展其他功能</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><table><thead><tr><th>功能</th><th>效果图</th></tr></thead><tbody><tr><td>登录</td><td><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409174413193.png" alt="image-20240409174413193"></td></tr><tr><td>注册</td><td><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409174426370.png" alt="image-20240409174426370"></td></tr><tr><td>首页</td><td><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409174445320.png" alt="image-20240409174445320"></td></tr><tr><td>使用引导</td><td><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409174513463.png" alt="image-20240409174513463"><img src="http://cdn.qiniu.liyansheng.top/typora/ad.jpg"></td></tr><tr><td>车列表</td><td><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409174900509.png" alt="image-20240409174900509"></td></tr><tr><td>车详情</td><td><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409174914824.png" alt="image-20240409174914824"></td></tr><tr><td>评论区</td><td><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409174640727.png" alt="image-20240409174640727"></td></tr><tr><td>收藏</td><td><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409175003549.png" alt="image-20240409175003549"></td></tr><tr><td>下单约车</td><td><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409175045992.png" alt="image-20240409175045992"></td></tr><tr><td>车出租</td><td><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409175114963.png" alt="image-20240409175114963"></td></tr><tr><td>处理单子</td><td><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409175149871.png" alt="image-20240409175149871"></td></tr><tr><td>更多功能</td><td>敬请期待！！！</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring Boot提供了一种快速开发的方式，让我们可以更加关注业务逻辑的实现，而不用过多地关注配置和细节问题；MyBatis则让数据库操作变得异常简单，通过XML映射文件可以轻松实现数据的CRUD操作。此外，Sa-token提供了便捷的权限管理功能，为网站的安全运行提供了保障。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240410000521238.png" alt="image-20240410000521238"></p>]]></content>
    
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jodit：富文本编辑器，js直接引用，真香</title>
    <link href="/blog/posts/44214.html"/>
    <url>/blog/posts/44214.html</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>Jodit Editor是一款出色的所见即所得编辑器，使用纯TypeScript编写，无需使用其他库。它包括一个文件编辑器和图像编辑器。</p></blockquote><p>官网：<a href="https://xdsoft.net/jodit/">https://xdsoft.net/jodit/</a></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409000620687.png" alt="image-20240409000620687"></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><blockquote><p>使用很是方便，导入两个文件即可。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/jodit@4.0.1/es2021/jodit.min.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/jodit@4.0.1/es2021/jodit.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>定义个放置的容器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 800px;height: 400px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;editor&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;editor&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> editor = <span class="hljs-title class_">Jodit</span>.<span class="hljs-title function_">make</span>(<span class="hljs-string">&#x27;#editor&#x27;</span>);<br>editor.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&lt;p&gt;start&lt;/p&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>:💪然后效果就出来了，如下：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240408231459075.png" alt="image-20240408231459075"></p><p>插入素材也很方便</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240408234708195.png" alt="image-20240408234708195"></p><h2 id="完整案例"><a href="#完整案例" class="headerlink" title="完整案例"></a>完整案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/jodit@4.0.1/es2021/jodit.min.css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/jodit@4.0.1/es2021/jodit.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 800px;height: 400px;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;editor&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;editor&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> editor = <span class="hljs-title class_">Jodit</span>.<span class="hljs-title function_">make</span>(<span class="hljs-string">&#x27;#editor&#x27;</span>);</span><br><span class="language-javascript">    editor.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&lt;p&gt;start&lt;/p&gt;&#x27;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>补充：如果需要自定义上传文件路径，可以在初始化时添加以下配置：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> editor = <span class="hljs-title class_">Jodit</span>.<span class="hljs-title function_">make</span>(<span class="hljs-string">&#x27;#editor&#x27;</span>, &#123;<br>    <span class="hljs-comment">// 配置文件上传器的选项</span><br>    <span class="hljs-attr">uploader</span>: &#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/upload&#x27;</span>, <span class="hljs-comment">// 文件上传的URL</span><br>        <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;json&#x27;</span>, <span class="hljs-comment">// 服务器返回的数据格式</span><br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-comment">// 文件上传的HTTP方法</span><br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>            <span class="hljs-comment">// 文件上传错误处理函数</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;图片上传出错！&#x27;</span>, response);<br>        &#125;<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240409000332380.png" alt="image-20240409000332380"></p><p>更多配置和用法请移步官网查阅。<a href="https://xdsoft.net/jodit/">👉直达</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fullPage.js：网站单页滚动插件，真香</title>
    <link href="/blog/posts/26208.html"/>
    <url>/blog/posts/26208.html</url>
    
    <content type="html"><![CDATA[<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://alvarotrigo.com/fullPage/zh/">https://alvarotrigo.com/fullPage/zh/</a></p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>通过调用本库可轻易创建全屏滚动网站(也称为单页网站)。 本库可创建全屏滚动网站，同时也可在网站中添加横向滚动条。</p><p>效果如下：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/demo-fullpage.gif"></p><h2 id="cdn引用"><a href="#cdn引用" class="headerlink" title="cdn引用"></a>cdn引用</h2><p>点击查看：<a href="https://cdnjs.com/libraries/fullPage.js">https://cdnjs.com/libraries/fullPage.js</a></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>详细使用文档参考：<a href="https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs">https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>FullPage.js Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入jQuery --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入fullPage.js --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/3.1.2/fullpage.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入fullPage.js的CSS文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/3.1.2/fullpage.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 自定义样式 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.section</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-comment">/* 为了相对定位 */</span></span><br><span class="language-css">            <span class="hljs-attribute">background-size</span>: cover;</span><br><span class="language-css">            <span class="hljs-comment">/* 调整背景图像以填充整个区域 */</span></span><br><span class="language-css">            <span class="hljs-attribute">background-position</span>: center;</span><br><span class="language-css">            <span class="hljs-comment">/* 将背景图像居中 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.slide</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-comment">/* 为了相对定位 */</span></span><br><span class="language-css">            <span class="hljs-attribute">background-size</span>: cover;</span><br><span class="language-css">            <span class="hljs-comment">/* 调整背景图像以填充整个区域 */</span></span><br><span class="language-css">            <span class="hljs-attribute">background-position</span>: center;</span><br><span class="language-css">            <span class="hljs-comment">/* 将背景图像居中 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 导航菜单样式 */</span></span><br><span class="language-css">        <span class="hljs-selector-id">#navbar</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1000</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#navbar</span> <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">max-width</span>: <span class="hljs-number">960px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#navbar</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#navbar</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#section1&quot;</span>&gt;</span>Section 1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#section2&quot;</span>&gt;</span>Section 2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#section3&quot;</span>&gt;</span>Section 3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#section4&quot;</span>&gt;</span>Section 4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#section4/1&quot;</span>&gt;</span>Section 5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fullpage&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;section&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;section1&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-image: url(&#x27;https://desk-fd.zol-img.com.cn/t_s960x600c5/g4/M08/0C/09/Cg-4WVSBfl-IanN7AC__cIPrv8EAAR5PQMDkT8AL_-I272.jpg&#x27;);&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Section 1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is the content of section 1.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;section&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;section2&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-image: url(&#x27;https://desk-fd.zol-img.com.cn/t_s960x600c5/g5/M00/02/08/ChMkJ1bKzFWIZlBXAD2We1G9mDsAALI1QAOSgkAPZaT215.jpg&#x27;);&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Section 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is the content of section 2.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;section&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;section3&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-image: url(&#x27;https://desk-fd.zol-img.com.cn/t_s960x600c5/g5/M00/02/08/ChMkJlbKzFWIZNvSABBYF9awqNAAALI1QDmg-YAEFgv220.jpg&#x27;);&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Section 3<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is the content of section 3.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;section&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;section4&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;slide&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-image: url(&#x27;https://images.pexels.com/photos/842711/pexels-photo-842711.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=600&#x27;);&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Smple Demo<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;slide&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-image: url(&#x27;https://images.pexels.com/photos/1435075/pexels-photo-1435075.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=600&#x27;);&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Only text<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 初始化fullPage.js</span></span><br><span class="language-javascript">        $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;#fullpage&#x27;</span>).<span class="hljs-title function_">fullpage</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 滚动速度</span></span><br><span class="language-javascript">                <span class="hljs-attr">scrollingSpeed</span>: <span class="hljs-number">1000</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 自动滚动</span></span><br><span class="language-javascript">                <span class="hljs-attr">autoScrolling</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 锚点</span></span><br><span class="language-javascript">                <span class="hljs-attr">anchors</span>: [<span class="hljs-string">&#x27;section1&#x27;</span>, <span class="hljs-string">&#x27;section2&#x27;</span>, <span class="hljs-string">&#x27;section3&#x27;</span>, <span class="hljs-string">&#x27;section4&#x27;</span>],</span><br><span class="language-javascript">                <span class="hljs-comment">// 导航条</span></span><br><span class="language-javascript">                <span class="hljs-attr">navigation</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 导航条位置</span></span><br><span class="language-javascript">                <span class="hljs-attr">navigationPosition</span>: <span class="hljs-string">&#x27;right&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 控制箭头</span></span><br><span class="language-javascript">                <span class="hljs-attr">controlArrows</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 水平循环</span></span><br><span class="language-javascript">                <span class="hljs-attr">loopHorizontal</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 键盘滚动</span></span><br><span class="language-javascript">                <span class="hljs-attr">keyboardScrolling</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 垂直居中</span></span><br><span class="language-javascript">                <span class="hljs-attr">verticalCentered</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 分段颜色</span></span><br><span class="language-javascript">                <span class="hljs-attr">sectionsColor</span>: [<span class="hljs-string">&#x27;#f2f2f2&#x27;</span>, <span class="hljs-string">&#x27;#e6e6e6&#x27;</span>, <span class="hljs-string">&#x27;#cccccc&#x27;</span>],</span><br><span class="language-javascript">                <span class="hljs-comment">// 响应式宽度</span></span><br><span class="language-javascript">                <span class="hljs-attr">responsiveWidth</span>: <span class="hljs-number">768</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 响应式高度</span></span><br><span class="language-javascript">                <span class="hljs-attr">responsiveHeight</span>: <span class="hljs-number">0</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 滚动溢出</span></span><br><span class="language-javascript">                <span class="hljs-attr">scrollOverflow</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>这个设计还是很惊艳的，容易上手，可以将上面的案例来跑一下，更详细的用法请参考官方教程。</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/typora/ad.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>flatpicker：时间选择工具</title>
    <link href="/blog/posts/5116.html"/>
    <url>/blog/posts/5116.html</url>
    
    <content type="html"><![CDATA[<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><blockquote><p>flatpicker是一个轻量级且功能强大的日期时间选择器。精益、用户体验驱动和可扩展，但它不依赖于任何库。用户界面很少，但主题很多。丰富、公开的API和事件系统使其适用于任何环境。</p></blockquote><p><a href="https://flatpickr.js.org/">https://flatpickr.js.org/</a></p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/flatpickr&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.net/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;rentalStart&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-label&quot;</span>&gt;</span>起租时间<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">required</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rentalStart&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rentalStart&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入您的起租时间&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">flatpickr</span>(<span class="hljs-string">&quot;#rentalStart&quot;</span>, &#123;<br>        <span class="hljs-attr">enableTime</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">enableSeconds</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">dateFormat</span>: <span class="hljs-string">&quot;Y-m-d H:i:S&quot;</span>,<br>    &#125;);<br>&#125;)<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240404000142342.png" alt="image-20240404000142342"></p><h2 id="⚠注意"><a href="#⚠注意" class="headerlink" title="⚠注意"></a>⚠注意</h2><blockquote><p>后端在接收参数时注意数据类型</p></blockquote><p>这里我数据库字段类型是<code>datetime</code></p><p>那与之映射的实体，我们要这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="hljs-keyword">private</span> LocalDateTime rentalStart;<br></code></pre></td></tr></table></figure><p>在controller接收请求传来的参数时，需要给实体重新赋值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@PostMapping</span><br>  <span class="hljs-meta">@ResponseBody</span><br>  <span class="hljs-keyword">public</span> SaResult <span class="hljs-title function_">order</span><span class="hljs-params">(Order order)</span> &#123;<br>      <span class="hljs-comment">// ........</span><br>      <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">rentalStart</span> <span class="hljs-operator">=</span> order.getRentalStart();<br>      order.setRentalStart(rentalStart);<br><span class="hljs-comment">// .......</span><br>      <span class="hljs-keyword">return</span> SaResult.ok();<br>  &#125;<br></code></pre></td></tr></table></figure><p>❤这样我们就能将传来的时间保存到数据库了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Dropzonejs实现文件上传</title>
    <link href="/blog/posts/13815.html"/>
    <url>/blog/posts/13815.html</url>
    
    <content type="html"><![CDATA[<h3 id="Dropzone-js实现文件长传"><a href="#Dropzone-js实现文件长传" class="headerlink" title="Dropzone.js实现文件长传"></a>Dropzone.js实现文件长传</h3><h2 id="🏠官网"><a href="#🏠官网" class="headerlink" title="🏠官网"></a>🏠官网</h2><p><a href="https://docs.dropzone.dev/">https://docs.dropzone.dev/</a></p><h2 id="🥓依赖"><a href="#🥓依赖" class="headerlink" title="🥓依赖"></a>🥓依赖</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/dropzone@5/dist/min/dropzone.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/dropzone@5/dist/min/dropzone.min.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="可选："><a href="#可选：" class="headerlink" title="可选："></a>可选：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="🎈案例"><a href="#🎈案例" class="headerlink" title="🎈案例"></a>🎈案例</h2><blockquote><p>实现手动上传，已选待上传图片可删除，图片可预览</p></blockquote><p>容器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>文件上传：<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropzone&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDropzone&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fallback&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uploadButton&quot;</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 配置Dropzone</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Dropzone</span>.<span class="hljs-property">options</span>.<span class="hljs-property">myDropzone</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/upload&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">autoProcessQueue</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 设置为false，表示手动触发上传</span></span><br><span class="language-javascript">        <span class="hljs-attr">maxFilesize</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">// 最大文件大小，单位为MB</span></span><br><span class="language-javascript">        <span class="hljs-attr">maxFiles</span>: <span class="hljs-number">3</span>, <span class="hljs-comment">// 最大上传文件数量</span></span><br><span class="language-javascript">        <span class="hljs-attr">acceptedFiles</span>: <span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-comment">// 允许上传的文件类型</span></span><br><span class="language-javascript">        <span class="hljs-attr">addRemoveLinks</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 显示移除文件的链接</span></span><br><span class="language-javascript">        <span class="hljs-attr">dictDefaultMessage</span>: <span class="hljs-string">&quot;拖放文件到这里或点击上传&quot;</span>, <span class="hljs-comment">// Dropzone区域的默认消息</span></span><br><span class="language-javascript">        <span class="hljs-attr">dictRemoveFile</span>: <span class="hljs-string">&quot;移除文件&quot;</span>, <span class="hljs-comment">// 移除文件链接的文本</span></span><br><span class="language-javascript">        <span class="hljs-attr">init</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;removedfile&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">file</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 移除文件时的操作</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件 &quot;</span> + file.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; 已被移除&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-title class_">Dropzone</span>.<span class="hljs-property">autoDiscover</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 初始化Dropzone</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> myDropzone = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dropzone</span>(<span class="hljs-string">&quot;#myDropzone&quot;</span>, &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/upload&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">autoProcessQueue</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 设置为false，表示手动触发上传</span></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 手动触发上传</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;uploadButton&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        myDropzone.<span class="hljs-title function_">processQueue</span>();</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.dropzone</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dashed <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.dropzone</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f0f0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.fallback</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;file&quot;</span>]</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="🧨后端接口"><a href="#🧨后端接口" class="headerlink" title="🧨后端接口"></a>🧨后端接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xxx.rentcarease.controller;<br><br><span class="hljs-keyword">import</span> cn.dev33.satoken.util.SaResult;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> SaResult <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;<br>        <span class="hljs-keyword">if</span> (file.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> SaResult.error(<span class="hljs-string">&quot;请选择要上传的文件&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 上传文件到 src/main/resources/static/img 目录下</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> uploadFileToDirectory(file, <span class="hljs-string">&quot;src/main/resources/static/img/&quot;</span>);<br><br>            <span class="hljs-comment">// 上传文件到 target/classes/static/img 目录下</span><br>            uploadFileToDirectory(file, <span class="hljs-string">&quot;target/classes/static/img/&quot;</span>);<br>            <span class="hljs-keyword">return</span> SaResult.ok(<span class="hljs-string">&quot;文件上传成功，保存路径为：&quot;</span> + fileName);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> SaResult.error(<span class="hljs-string">&quot;文件上传失败：&quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">uploadFileToDirectory</span><span class="hljs-params">(MultipartFile file, String directory)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取静态资源目录的绝对路径</span><br>        <span class="hljs-type">Path</span> <span class="hljs-variable">uploadPath</span> <span class="hljs-operator">=</span> Paths.get(directory);<br><br>        <span class="hljs-comment">// 生成UUID并截取其中的一部分</span><br>        <span class="hljs-type">UUID</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuidPart</span> <span class="hljs-operator">=</span> uuid.toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>); <span class="hljs-comment">// 只取UUID的前8个字符</span><br><br>        <span class="hljs-comment">// 保存文件</span><br>        <span class="hljs-type">byte</span>[] bytes = file.getBytes();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> uuidPart + <span class="hljs-string">&quot;_&quot;</span> + file.getOriginalFilename();<br>        <span class="hljs-type">Path</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> uploadPath.resolve(fileName);<br>        Files.write(filePath, bytes);<br>        <span class="hljs-keyword">return</span> filePath.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="🎨效果"><a href="#🎨效果" class="headerlink" title="🎨效果"></a>🎨效果</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240403180555042.png" alt="image-20240403180555042"></p><p>附：</p><p>页面完整代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传测试页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入 Dropzone.js 样式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">            <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/min/dropzone.min.css&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入 Dropzone.js 脚本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/min/dropzone.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入 jQuery 库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.dropzone</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dashed <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.dropzone</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f0f0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.fallback</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;file&quot;</span>]</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 文件上传区域 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>文件上传：<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropzone&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDropzone&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fallback&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uploadButton&quot;</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 配置Dropzone</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Dropzone</span>.<span class="hljs-property">options</span>.<span class="hljs-property">myDropzone</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/upload&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">autoProcessQueue</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 设置为false，表示手动触发上传</span></span><br><span class="language-javascript">        <span class="hljs-attr">maxFilesize</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">// 最大文件大小，单位为MB</span></span><br><span class="language-javascript">        <span class="hljs-attr">maxFiles</span>: <span class="hljs-number">3</span>, <span class="hljs-comment">// 最大上传文件数量</span></span><br><span class="language-javascript">        <span class="hljs-attr">acceptedFiles</span>: <span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-comment">// 允许上传的文件类型</span></span><br><span class="language-javascript">        <span class="hljs-attr">addRemoveLinks</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 显示移除文件的链接</span></span><br><span class="language-javascript">        <span class="hljs-attr">dictDefaultMessage</span>: <span class="hljs-string">&quot;拖放文件到这里或点击上传&quot;</span>, <span class="hljs-comment">// Dropzone区域的默认消息</span></span><br><span class="language-javascript">        <span class="hljs-attr">dictRemoveFile</span>: <span class="hljs-string">&quot;移除文件&quot;</span>, <span class="hljs-comment">// 移除文件链接的文本</span></span><br><span class="language-javascript">        <span class="hljs-attr">init</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;removedfile&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">file</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 移除文件时的操作</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件 &quot;</span> + file.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; 已被移除&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-title class_">Dropzone</span>.<span class="hljs-property">autoDiscover</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 初始化Dropzone</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> myDropzone = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dropzone</span>(<span class="hljs-string">&quot;#myDropzone&quot;</span>, &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/upload&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">autoProcessQueue</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 设置为false，表示手动触发上传</span></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 手动触发上传</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;uploadButton&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        myDropzone.<span class="hljs-title function_">processQueue</span>();</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>driver.js 产品导览、亮点、上下文帮助</title>
    <link href="/blog/posts/54624.html"/>
    <url>/blog/posts/54624.html</url>
    
    <content type="html"><![CDATA[<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://driverjs.com/">https://driverjs.com/</a></p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/driver.js@1.0.1/dist/driver.js.iife.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/driver.js@1.0.1/dist/driver.css&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>注意：获取实例是：&#96;&#96;window.driver.js.driver&#96;</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> driver = <span class="hljs-variable language_">window</span>.<span class="hljs-property">driver</span>.<span class="hljs-property">js</span>.<span class="hljs-property">driver</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">helpMe</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> driverObj = <span class="hljs-title function_">driver</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 开启动画</span></span><br><span class="language-javascript">            <span class="hljs-attr">animate</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-comment">// 开启进度</span></span><br><span class="language-javascript">            <span class="hljs-attr">showProgress</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">showButtons</span>: [<span class="hljs-string">&#x27;next&#x27;</span>, <span class="hljs-string">&#x27;previous&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>],</span><br><span class="language-javascript">            <span class="hljs-attr">prevBtnText</span>: <span class="hljs-string">&#x27;上一步&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">nextBtnText</span>: <span class="hljs-string">&#x27;下一步&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">doneBtnText</span>: <span class="hljs-string">&#x27;结束引导&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">popoverClass</span>: <span class="hljs-string">&#x27;driverjs-theme&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">allowClose</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-comment">// 是否自动滚动以使高亮元素可见</span></span><br><span class="language-javascript">            <span class="hljs-attr">scrollIntoViewOptions</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">behavior</span>: <span class="hljs-string">&#x27;smooth&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">block</span>: <span class="hljs-string">&#x27;center&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">steps</span>: [</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#index&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">popover</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;这是首页&#x27;</span>,</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#torental&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">popover</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;租车点这里&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;你可以xxxxxxxxxxx&#x27;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                ,</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#steps&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">popover</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;租车流程看这里&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;你可以xxxxxxxxxxx&#x27;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        driverObj.<span class="hljs-title function_">drive</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/GIF%202024-4-3%2018-49-24.gif" alt="GIF 2024-4-3 18-49-24"></p><h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><p>也可以使用它来显示一个简单的模态，而不突出显示任何元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">const driverObj = driver();<br><br>driverObj.highlight(&#123;<br>  popover: &#123;<br>    description: &quot;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;https://i.imgur.com/EAQhHu5.gif&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;height: 202.5px; width: 270px;&#x27;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;font-size: 15px; display: block; margin-top: 10px; text-align: center;&#x27;</span>&gt;</span>Yet another highlight example.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&quot;,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="http://cdn.qiniu.liyansheng.top/typora/GIF%202024-4-3%2018-45-51.gif" alt="GIF 2024-4-3 18-45-51"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><blockquote><p>案例完整code</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="hljs-attr">xmlns:sa</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org/extras/sa-token&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>汽车租赁系统<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Bootstrap CSS --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/css/my.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/driver.js@1.0.1/dist/driver.js.iife.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/driver.js@1.0.1/dist/driver.css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* Custom Styles */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">70px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f8f9fa</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置页面背景色 */</span></span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#343a40</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置文本颜色 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.footer</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.hero</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#007bff</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置hero区域背景色 */</span></span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置hero区域文本颜色 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.about</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f8f9fa</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置about区域背景色 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.renting-process</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置租车流程区域背景色 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.renting-process</span> <span class="hljs-selector-class">.card</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">            <span class="hljs-comment">/* 移除卡片边框 */</span></span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f8f9fa</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置卡片背景色 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.renting-process</span> <span class="hljs-selector-class">.card-title</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#007bff</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置卡片标题颜色 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Navigation Bar --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-expand-lg navbar-light bg-light fixed-top&quot;</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>租车行者<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-toggler&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">data-bs-toggle</span>=<span class="hljs-string">&quot;collapse&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">data-bs-target</span>=<span class="hljs-string">&quot;#navbarSupportedContent&quot;</span> <span class="hljs-attr">aria-controls</span>=<span class="hljs-string">&quot;navbarSupportedContent&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Toggle navigation&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-toggler-icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;collapse navbar-collapse&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;navbarSupportedContent&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-nav ms-auto mb-2 mb-lg-0&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/car/list&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;torental&quot;</span>&gt;</span>车辆租赁<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/like/carList&quot;</span>&gt;</span>我的收藏<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-outline-primary&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">sa:notLogin</span>&gt;</span>注册/登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-outline-success&quot;</span>  <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;helpMe()&quot;</span>&gt;</span>帮助引导<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span> <span class="hljs-attr">sa:login</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;$&#123;stp.getSession().get(&#x27;avatar&#x27;)&#125;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;User Avatar&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;32&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;32&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rounded-circle me-2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 2px solid #ccc;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;stp.getSession().get(&#x27;username&#x27;)&#125;&quot;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span> <span class="hljs-attr">sa:login</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-outline-danger&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/logout&quot;</span>&gt;</span>退出<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Hero Section --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hero&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container text-center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;display-4&quot;</span>&gt;</span>欢迎来到租车行者<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lead&quot;</span>&gt;</span>为您提供方便、快捷的汽车租赁服务<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/car/list&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-outline-light btn-lg mb-2&quot;</span>&gt;</span>立即租车<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- About Section --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;about mt-5&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container text-center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-4&quot;</span>&gt;</span>关于我们<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lead&quot;</span>&gt;</span>我们是一家致力于为客户提供高品质汽车租赁服务的公司。无论您是在旅途中还是需要暂时用车，我们都能满足您的需求。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-outline-primary&quot;</span>&gt;</span>了解更多<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Renting Process Section --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;renting-process&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top:10%&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;steps&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center mb-4&quot;</span>&gt;</span>如何租车？<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row justify-content-center&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- Renting Process Cards --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4 mb-4&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-body&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-title&quot;</span>&gt;</span>1.选择车辆<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>在车辆库中选择您喜欢的车辆。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4 mb-4&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-body&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-title&quot;</span>&gt;</span>2.提交租车申请<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>填写租车申请表格并提交。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4 mb-4&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-body&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-title&quot;</span>&gt;</span>3.确认订单<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>等待我们确认订单并进行付款。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Footer --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer bg-light text-center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted&quot;</span>&gt;</span><span class="hljs-symbol">&amp;copy;</span> 2024 汽车租赁系统<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Bootstrap Bundle with Popper --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> driver = <span class="hljs-variable language_">window</span>.<span class="hljs-property">driver</span>.<span class="hljs-property">js</span>.<span class="hljs-property">driver</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">helpMe</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> driverObj = <span class="hljs-title function_">driver</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">animate</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">showProgress</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">showButtons</span>: [<span class="hljs-string">&#x27;next&#x27;</span>, <span class="hljs-string">&#x27;previous&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>],</span><br><span class="language-javascript">                <span class="hljs-attr">prevBtnText</span>: <span class="hljs-string">&#x27;上一步&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">nextBtnText</span>: <span class="hljs-string">&#x27;下一步&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">doneBtnText</span>: <span class="hljs-string">&#x27;结束引导&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">popoverClass</span>: <span class="hljs-string">&#x27;driverjs-theme&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">allowClose</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 是否自动滚动以使高亮元素可见</span></span><br><span class="language-javascript">                <span class="hljs-attr">scrollIntoViewOptions</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">behavior</span>: <span class="hljs-string">&#x27;smooth&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">block</span>: <span class="hljs-string">&#x27;center&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">steps</span>: [</span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#index&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">popover</span>: &#123;</span><br><span class="language-javascript">                            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;这是首页&#x27;</span>,</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#torental&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">popover</span>: &#123;</span><br><span class="language-javascript">                            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;租车点这里&#x27;</span>,</span><br><span class="language-javascript">                            <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;你可以xxxxxxxxxxx&#x27;</span></span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    ,</span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#steps&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">popover</span>: &#123;</span><br><span class="language-javascript">                            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;租车流程看这里&#x27;</span>,</span><br><span class="language-javascript">                            <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;你可以xxxxxxxxxxx&#x27;</span></span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                ]</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            driverObj.<span class="hljs-title function_">drive</span>();</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>解决npm证书过期错误及其他常见npm问题</title>
    <link href="/blog/posts/41760.html"/>
    <url>/blog/posts/41760.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>在使用npm安装或更新包时，有时会遇到证书过期或其他常见问题。本文将介绍如何解决这些问题。</p></blockquote><h2 id="解决CERT-HAS-EXPIRED错误"><a href="#解决CERT-HAS-EXPIRED错误" class="headerlink" title="解决CERT_HAS_EXPIRED错误"></a>解决CERT_HAS_EXPIRED错误</h2><p>当尝试访问的服务器的SSL证书过期时，npm会抛出CERT_HAS_EXPIRED错误。以下是解决方法：<br>清除npm缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm cache clean --force<br></code></pre></td></tr></table></figure><p>取消SSL验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> strict-ssl <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>更换npm镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry http://registry.cnpmjs.org<br>npm config <span class="hljs-built_in">set</span> registry http://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h2 id="解决EPERM错误"><a href="#解决EPERM错误" class="headerlink" title="解决EPERM错误"></a>解决EPERM错误</h2><p>EPERM错误通常是由于文件权限问题引起的。以下是解决方法：<br>检查文件权限</p><p>确保你有权限访问文件以及其所在的目录。<br>关闭占用文件的程序</p><p>有时文件可能正在被其他程序占用，如文本编辑器或防病毒软件。关闭这些程序，然后再次尝试操作。<br>以管理员权限运行命令</p><p>如果你使用的是Windows系统，尝试以管理员权限运行命令。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了解决npm证书过期错误和EPERM错误的方法。你可以通过清除npm缓存、取消SSL验证、更换npm镜像源以及检查文件权限来解决这些问题。如果问题仍然存在，请参考npm的官方文档或在相关社区寻求帮助。</p><p>希望本文能帮助你解决npm相关的问题！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Webapp：Servlet计算正实数平方根并返回</title>
    <link href="/blog/posts/22005.html"/>
    <url>/blog/posts/22005.html</url>
    
    <content type="html"><![CDATA[<h2 id="🎈主线"><a href="#🎈主线" class="headerlink" title="🎈主线"></a>🎈主线</h2><blockquote><p>编写一个servlet，html页面通过表单向Servlet提交个正实数，Servlet负责计算这个数的平方根返回给客户。</p></blockquote><h2 id="📌步骤"><a href="#📌步骤" class="headerlink" title="📌步骤"></a>📌步骤</h2><p>1️⃣使用IDEA创建Maven项目，勾选webapp（首先，确保你的 IntelliJ IDEA 中已经配置好了 Maven，并且创建了一个 Maven 项目。然后，在 Maven 项目的 src&#x2F;main 目录下创建 Java 和 webapp 目录，分别用于放置 Java 源代码和 web 资源文件）</p><p>2️⃣在 src&#x2F;main&#x2F;java 目录下创建一个包，比如 <code>com.wangxinhong</code>。</p><p>3️⃣在 <code>com.wangxinhong</code> 包下创建一个名为 <code>SquareRootServlet</code> 的 Java 类，该类将承担 Servlet 的功能。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangxinhong;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SquareRootServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 从请求参数中获取正实数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;number&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> Double.parseDouble(input);<br><br>        <span class="hljs-comment">// 计算平方根</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">squareRoot</span> <span class="hljs-operator">=</span> Math.sqrt(number);<br><br>        <span class="hljs-comment">// 返回结果给客户端</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>        response.getWriter().println(<span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);<br>        response.getWriter().println(<span class="hljs-string">&quot;The square root of &quot;</span> + number + <span class="hljs-string">&quot; is: &quot;</span> + squareRoot);<br>        response.getWriter().println(<span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4️⃣在 src&#x2F;main&#x2F;webapp 目录下创建一个名为 <code>index.html</code> 的 HTML 文件，用于输入正实数并提交给 Servlet。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Calculate Square Root<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;squareRoot&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        Enter a positive real number: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Calculate&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5️⃣配置 web.xml 文件（在WEB-INF下），以将 Servlet 映射到 URL。在 webapp 目录下创建一个名为 <code>web.xml</code> 的文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SquareRootServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wangxinhong.SquareRootServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SquareRootServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/squareRoot<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>6️⃣确保项目的 <code>pom.xml</code> 中包含了 servlet-api 的依赖（⚠  或者手动导也行)。在 <code>&lt;dependencies&gt;</code> 标签内添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>7️⃣构建并运行项目。你可以使用 Maven 命令 <code>mvn clean install</code> 来构建项目，然后在容器中部署运行。在浏览器中访问 <code>http://localhost:8080/你的项目名/</code> 即可看到表单页面，输入一个正实数并提交，将会计算出其平方根并显示在页面上。</p><h2 id="🙌项目结构"><a href="#🙌项目结构" class="headerlink" title="🙌项目结构"></a>🙌项目结构</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240329005240916.png" alt="image-20240329005240916"></p><h2 id="🎨效果图"><a href="#🎨效果图" class="headerlink" title="🎨效果图"></a>🎨效果图</h2><p>初始：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240329004919515.png" alt="image-20240329004919515"></p><p>计算结果：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240329004941975.png" alt="image-20240329004941975"></p><hr><h2 id="📢tips"><a href="#📢tips" class="headerlink" title="📢tips"></a>📢tips</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/ad.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧-11：Java项目打包docker部署</title>
    <link href="/blog/posts/1939.html"/>
    <url>/blog/posts/1939.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>项目导包要领如下：</p></blockquote><p>pom依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 使用官方的 OpenJDK 作为基础镜像</span><br><span class="hljs-keyword">FROM</span> openjdk:latest<br><br><span class="hljs-comment"># 设置工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-comment"># 将本地的 JAR 文件复制到容器内</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> your-application.jar /app/your-application.jar</span><br><br><span class="hljs-comment"># 指定容器启动时要执行的命令</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;your-application.jar&quot;</span>]</span><br><br></code></pre></td></tr></table></figure><h3 id="一键启动部署"><a href="#一键启动部署" class="headerlink" title="一键启动部署"></a>一键启动部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">定义容器名称和镜像名称【都小写】</span><br>container_name=&quot;your-container-name&quot;<br>image_name=&quot;your-image-name&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查容器是否已经在运行</span><br>if docker ps -a --format &#x27;&#123;&#123;.Names&#125;&#125;&#x27; | grep -q &quot;^$&#123;container_name&#125;$&quot;; then<br>    echo &quot;Container $container_name already exists. Removing...&quot;<br>    # 停止并删除现有的容器<br>    docker stop $container_name &amp;&amp; docker rm $container_name<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查镜像是否存在</span><br>if docker images --format &#x27;&#123;&#123;.Repository&#125;&#125;&#x27; | grep -q &quot;^$&#123;image_name&#125;$&quot;; then<br>    echo &quot;Image $image_name already exists. Removing...&quot;<br>    # 删除现有的镜像<br>    docker rmi $image_name<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">构建镜像</span><br>echo &quot;Building image $image_name...&quot;<br>docker build -t $image_name .<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器,可自定义其他参数，如端口，数据卷，环境变量等</span><br>echo &quot;Starting container $container_name...&quot;<br>docker run -d --name $container_name $image_name<br><br>echo &quot;Container $container_name started successfully.&quot;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>实用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧-10：自定义异常处理</title>
    <link href="/blog/posts/48873.html"/>
    <url>/blog/posts/48873.html</url>
    
    <content type="html"><![CDATA[<h3 id="未找到资源404"><a href="#未找到资源404" class="headerlink" title="未找到资源404"></a>未找到资源404</h3><blockquote><p>本案例结合sa-token权限认证使用</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/typora/404.png"></p><p>页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:sa</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org/extras/sa-token&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br>        我的预约<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Required meta tags --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Bootstrap CSS v5.2.1 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rgb(55, 89, 161);&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: aliceblue;text-align: center;margin-top: 10%;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cdn.qiniu.liyansheng.top/typora/404.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;404&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>抱歉，没有找到您请求的页面！<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Sorry，didn&#x27;t find the page you requet.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: aliceblue;&quot;</span>&gt;</span>返回首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- place footer here --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Bootstrap JavaScript Libraries --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端配置：</p><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">throw-exception-if-no-handler-found:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">add-mappings:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>自定义错误类实现接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lys.sams.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.error.ErrorController;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomErrorController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ErrorController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/error&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getError</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;404&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getErrorPath</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/error&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="权限不足403"><a href="#权限不足403" class="headerlink" title="权限不足403"></a>权限不足403</h3><p><img src="http://cdn.qiniu.liyansheng.top/typora/no_auc.png"></p><p>异常：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cn<span class="hljs-selector-class">.dev33</span><span class="hljs-selector-class">.satoken</span><span class="hljs-selector-class">.exception</span><span class="hljs-selector-class">.NotRoleException</span>: 无此角色：admin<br>at cn<span class="hljs-selector-class">.dev33</span><span class="hljs-selector-class">.satoken</span><span class="hljs-selector-class">.stp</span><span class="hljs-selector-class">.StpLogic</span><span class="hljs-selector-class">.checkRoleAnd</span>(StpLogic<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1826</span>)<br></code></pre></td></tr></table></figure><p>页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:sa</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org/extras/sa-token&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br>        权限不足<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Required meta tags --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Bootstrap CSS v5.2.1 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rgb(55, 89, 161);&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: aliceblue;text-align: center;margin-top: 10%;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cdn.qiniu.liyansheng.top/typora/no_auc.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;404&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>抱歉，当前操作不可进行！<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Sorry, the current operation is not available.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: aliceblue;&quot;</span>&gt;</span>我知道了，返回首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- place footer here --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Bootstrap JavaScript Libraries --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主动捕获异常和转发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-comment">// 全局异常拦截 </span><br>    <span class="hljs-meta">@ExceptionHandler</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handlerException</span><span class="hljs-params">(Exception e, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> cn.dev33.satoken.exception.NotLoginException) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                response.sendRedirect(<span class="hljs-string">&quot;/login&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> cn.dev33.satoken.exception.NotRoleException) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                response.sendRedirect(<span class="hljs-string">&quot;/notRole&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            response.sendRedirect(<span class="hljs-string">&quot;/login&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>实用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧-9：Springboot加持Jsp</title>
    <link href="/blog/posts/41256.html"/>
    <url>/blog/posts/41256.html</url>
    
    <content type="html"><![CDATA[<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用JSP引擎，SpringBoot内置Tomcat没有此依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 添加JSTL标签库依赖模块 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">view:</span><br>      <span class="hljs-attr">prefix:</span> <span class="hljs-string">/WEB-INF/page/</span><br>      <span class="hljs-attr">suffix:</span> <span class="hljs-string">.jsp</span><br>    <span class="hljs-attr">index:</span><br>      <span class="hljs-attr">view-name:</span> <span class="hljs-string">login</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>实用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧-8：文件选择器</title>
    <link href="/blog/posts/26908.html"/>
    <url>/blog/posts/26908.html</url>
    
    <content type="html"><![CDATA[<p>选择文件打开：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReadExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">JFileChooser</span> <span class="hljs-variable">fileChooser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFileChooser</span>(); <span class="hljs-comment">// 创建文件选择器对象</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> fileChooser.showOpenDialog(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 打开文件选择对话框</span><br><br>        <span class="hljs-keyword">if</span> (result == JFileChooser.APPROVE_OPTION) &#123; <span class="hljs-comment">// 用户选择了一个文件</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">selectedFile</span> <span class="hljs-operator">=</span> fileChooser.getSelectedFile(); <span class="hljs-comment">// 获取选择的文件</span><br><br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(selectedFile))) &#123;<br>                String line;<br>                <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                    System.out.println(line); <span class="hljs-comment">// 输出文件内容</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>导出数据并指定位置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileWriteExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">JFileChooser</span> <span class="hljs-variable">fileChooser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFileChooser</span>(); <span class="hljs-comment">// 创建文件选择器对象</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> fileChooser.showSaveDialog(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 打开保存文件对话框</span><br><br>        <span class="hljs-keyword">if</span> (result == JFileChooser.APPROVE_OPTION) &#123; <span class="hljs-comment">// 用户选择了保存位置</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">selectedFile</span> <span class="hljs-operator">=</span> fileChooser.getSelectedFile(); <span class="hljs-comment">// 获取选择的文件</span><br><br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(selectedFile))) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;这是要导出的数据&quot;</span>; <span class="hljs-comment">// 要导出的数据</span><br><br>                writer.write(data); <span class="hljs-comment">// 将数据写入文件</span><br><br>                System.out.println(<span class="hljs-string">&quot;数据已成功导出到：&quot;</span> + selectedFile.getAbsolutePath());<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>实用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧-7：快速整合使用bootstrap-table</title>
    <link href="/blog/posts/43379.html"/>
    <url>/blog/posts/43379.html</url>
    
    <content type="html"><![CDATA[<h1 id="快速整合bootstrap-table"><a href="#快速整合bootstrap-table" class="headerlink" title="快速整合bootstrap-table"></a>快速整合bootstrap-table</h1><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240325192345466.png" alt="image-20240325192345466"></p><h2 id="接口案例"><a href="#接口案例" class="headerlink" title="接口案例"></a>接口案例</h2><p>数据列表：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ok&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">52</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;哈哈哈&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">53</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;哈哈哈地方&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;悬疑灵异&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;武侠仙侠&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;玄幻奇幻&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>增：&#x2F;novel-category&#x2F;add</p><p>删：&#x2F;novel-category&#x2F;delete&#x2F;{id}</p><p>改：&#x2F;novel-category&#x2F;update</p><p>查：&#x2F;novel-category&#x2F;list</p><p>批量删：&#x2F;novel-category&#x2F;deleteBatch</p><h2 id="对应后端实现"><a href="#对应后端实现" class="headerlink" title="对应后端实现"></a>对应后端实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xxx.readverse.controller;<br><br><br><span class="hljs-keyword">import</span> cn.dev33.satoken.util.SaResult;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;<br><span class="hljs-keyword">import</span> com.xxx.readverse.entity.Category;<br><span class="hljs-keyword">import</span> com.xxx.readverse.service.CategoryService;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.dao.DuplicateKeyException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/novel-category&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;小说分类&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CategoryController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CategoryService novelCategoryService;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;分类列表&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> SaResult <span class="hljs-title function_">getNovelCategories</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Category&gt; categoryList = novelCategoryService.list(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;Category&gt;().last(<span class="hljs-string">&quot;limit 12&quot;</span>));<br>        <span class="hljs-keyword">return</span> SaResult.data(categoryList);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;新增分类&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> SaResult <span class="hljs-title function_">add</span><span class="hljs-params">(Category novelCategory)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            novelCategoryService.save(novelCategory);<br>        &#125; <span class="hljs-keyword">catch</span> (DuplicateKeyException e) &#123;<br>            <span class="hljs-keyword">return</span> SaResult.error(<span class="hljs-string">&quot;操作未成功，可能是因为数据重复导致的&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> SaResult.data(novelCategory.getCategoryId());<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/deleteBatch&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;批量删除&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> SaResult <span class="hljs-title function_">deleteBatch</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;ids&quot;)</span> Integer[] ids)</span> &#123;<br>        novelCategoryService.removeByIds(Arrays.asList(ids));<br>        <span class="hljs-keyword">return</span> SaResult.ok();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/delete/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;删除分类&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> SaResult <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        novelCategoryService.removeById(id);<br>        <span class="hljs-keyword">return</span> SaResult.ok();<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/update&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;修改分类&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> SaResult <span class="hljs-title function_">update</span><span class="hljs-params">(Category novelCategory)</span> &#123;<br>        novelCategoryService.updateById(novelCategory);<br>        <span class="hljs-keyword">return</span> SaResult.ok();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;获取某个分类信息&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> SaResult <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        <span class="hljs-type">Category</span> <span class="hljs-variable">category</span> <span class="hljs-operator">=</span> novelCategoryService.getById(id);<br>        <span class="hljs-keyword">return</span>  SaResult.data(category);<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="页面完整代码"><a href="#页面完整代码" class="headerlink" title="页面完整代码"></a>页面完整代码</h2><p>需要注意的问题</p><ol><li><p>注意依赖引进</p></li><li><p>方法异步操作，特别是弹窗组件</p></li><li><p>数据项的ID，并不是每个都是id，根据实体数据来确认。</p></li><li><p>新增，编辑使用弹窗，控制弹窗的显示和关闭，$(‘xxx’).modal(‘show’),        $(‘xxx’).modal(‘hide’)</p></li><li><p>基本通用，直接换接口名称就行。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表格演示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap-table@1.22.3/dist/bootstrap-table.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap-table@1.22.3/dist/bootstrap-table.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap-table@1.22.3/dist/locale/bootstrap-table-zh-CN.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/tableexport.jquery.plugin@1.28.0/tableExport.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/sweetalert2@11&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.select</span>,</span><br><span class="language-css">    <span class="hljs-selector-id">#locale</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.edit</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 新增弹窗 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- Modal Body --&gt;</span><br>  <span class="hljs-comment">&lt;!-- if you want to close by clicking outside the modal, delete the last endpoint:data-bs-backdrop and data-bs-keyboard --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addModal&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">data-bs-backdrop</span>=<span class="hljs-string">&quot;static&quot;</span> <span class="hljs-attr">data-bs-keyboard</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;dialog&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;modalTitleId&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-dialog modal-dialog-scrollable modal-dialog-centered modal-md&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;document&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addForm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;modalTitleId&quot;</span>&gt;</span><br>              新增<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-close&quot;</span> <span class="hljs-attr">data-bs-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Close&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-floating mb-3&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;categoryName&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;categoryName&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;categoryName&quot;</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-secondary&quot;</span> <span class="hljs-attr">data-bs-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span><br>              关闭<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-outline-danger&quot;</span>&gt;</span>清空<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 编辑弹窗 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- Modal Body --&gt;</span><br>  <span class="hljs-comment">&lt;!-- if you want to close by clicking outside the modal, delete the last endpoint:data-bs-backdrop and data-bs-keyboard --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;editModal&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">data-bs-backdrop</span>=<span class="hljs-string">&quot;static&quot;</span> <span class="hljs-attr">data-bs-keyboard</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;dialog&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;modalTitleId&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-dialog modal-dialog-scrollable modal-dialog-centered modal-md&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;document&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;editForm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;modalTitleId&quot;</span>&gt;</span><br>              编辑<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-close&quot;</span> <span class="hljs-attr">data-bs-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Close&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;categoryId&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-floating mb-3&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;categoryName&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;categoryName&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;categoryName&quot;</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-secondary&quot;</span> <span class="hljs-attr">data-bs-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span><br>              关闭<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-outline-danger&quot;</span>&gt;</span>清空<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 自定义工具栏 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;toolbar&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">data-bs-toggle</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">data-bs-target</span>=<span class="hljs-string">&quot;#addModal&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bi bi-plus-square&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 新增<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;export&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bi bi-file-earmark-spreadsheet&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 导出<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;remove&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bi bi-trash&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 批量删除<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 表格初始化 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table&quot;</span> <span class="hljs-attr">data-toolbar</span>=<span class="hljs-string">&quot;#toolbar&quot;</span> <span class="hljs-attr">data-search</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">data-show-refresh</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">data-show-toggle</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">data-show-fullscreen</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">data-show-columns</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">data-show-columns-toggle-all</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">data-detail-view</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">data-show-export</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">data-click-to-select</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">data-detail-formatter</span>=<span class="hljs-string">&quot;detailFormatter&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">data-minimum-count-columns</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">data-show-pagination-switch</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">data-pagination</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">data-id-field</span>=<span class="hljs-string">&quot;id&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">data-page-list</span>=<span class="hljs-string">&quot;[5,10, 25, 50, 100, all]&quot;</span> <span class="hljs-attr">data-show-footer</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">data-side-pagination</span>=<span class="hljs-string">&quot;client&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">data-url</span>=<span class="hljs-string">&quot;/novel-category/list&quot;</span> <span class="hljs-attr">data-response-handler</span>=<span class="hljs-string">&quot;responseHandler&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 获取组件</span></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> $table = $(<span class="hljs-string">&#x27;#table&#x27;</span>)</span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> $remove = $(<span class="hljs-string">&#x27;#remove&#x27;</span>)</span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> selections = []</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 获取被选中行的ID</span></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getIdSelections</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> $.<span class="hljs-title function_">map</span>($table.<span class="hljs-title function_">bootstrapTable</span>(<span class="hljs-string">&#x27;getSelections&#x27;</span>), <span class="hljs-keyword">function</span> (<span class="hljs-params">row</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> row.<span class="hljs-property">categoryId</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 处理远程响应的数据，可以指定要在表格显示的数据</span></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">responseHandler</span>(<span class="hljs-params">res</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> res.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 自定义显示样式</span></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">detailFormatter</span>(<span class="hljs-params">index, row</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> html = []</span><br><span class="language-javascript">    $.<span class="hljs-title function_">each</span>(row, <span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) &#123;</span><br><span class="language-javascript">      html.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;&lt;p&gt;&lt;b&gt;&#x27;</span> + key + <span class="hljs-string">&#x27;:&lt;/b&gt; &#x27;</span> + value + <span class="hljs-string">&#x27;&lt;/p&gt;&#x27;</span>)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> html.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">operateFormatter</span>(<span class="hljs-params">value, row, index</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> [</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;&lt;button type=&quot;button&quot; class=&quot;btn btn-outline-primary edit btn-sm&quot; title=&quot;编辑&quot;&gt;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;&lt;i class=&quot;bi bi-pencil&quot;&gt;&lt;/i&gt; 编辑&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;&lt;/button&gt; &#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;&lt;button type=&quot;button&quot; class=&quot;btn btn-outline-danger remove btn-sm&quot; title=&quot;删除&quot;&gt;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;&lt;i class=&quot;bi bi-trash&quot;&gt;&lt;/i&gt; 删除&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;&lt;/button&gt;&#x27;</span></span><br><span class="language-javascript">    ].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 按钮点击事件</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">window</span>.<span class="hljs-property">operateEvents</span> = &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-string">&#x27;click .edit&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">e, value, row, index</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 弹窗编辑回显</span></span><br><span class="language-javascript">      $.<span class="hljs-title function_">each</span>(row, <span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) &#123;</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;#editForm input[name=&quot;&#x27;</span> + key + <span class="hljs-string">&#x27;&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(value);</span><br><span class="language-javascript">        <span class="hljs-comment">// 如果表单字段是&lt;input&gt;标签之外的其他类型，也可以使用类似的方式进行赋值</span></span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">      $editModal.<span class="hljs-title function_">modal</span>(<span class="hljs-string">&#x27;show&#x27;</span>);</span><br><span class="language-javascript">      <span class="hljs-comment">// alert(&#x27;You click edit action, row: &#x27; + JSON.stringify(row))</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 移除</span></span><br><span class="language-javascript">    <span class="hljs-string">&#x27;click .remove&#x27;</span>: <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">e, value, row, index</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> <span class="hljs-title function_">askDelete</span>()) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 从表格中移除选中的行</span></span><br><span class="language-javascript">        <span class="hljs-title function_">remove</span>(row.<span class="hljs-property">categoryId</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 表格初始化</span></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">initTable</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    $table.<span class="hljs-title function_">bootstrapTable</span>(<span class="hljs-string">&#x27;destroy&#x27;</span>).<span class="hljs-title function_">bootstrapTable</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">exportDataType</span>: <span class="hljs-string">&#x27;all&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">height</span>: <span class="hljs-number">550</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">locale</span>: $(<span class="hljs-string">&#x27;#locale&#x27;</span>).<span class="hljs-title function_">val</span>(),</span><br><span class="language-javascript">      <span class="hljs-attr">columns</span>: [</span><br><span class="language-javascript">        [</span><br><span class="language-javascript">          &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;state&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">checkbox</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">align</span>: <span class="hljs-string">&#x27;center&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">valign</span>: <span class="hljs-string">&#x27;middle&#x27;</span></span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;ID编号&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;categoryId&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">align</span>: <span class="hljs-string">&#x27;center&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">valign</span>: <span class="hljs-string">&#x27;middle&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript"></span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;分类名&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;categoryName&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">align</span>: <span class="hljs-string">&#x27;center&#x27;</span></span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;operate&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;操作&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">align</span>: <span class="hljs-string">&#x27;center&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">clickToSelect</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">events</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">operateEvents</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">formatter</span>: operateFormatter</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      ]</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-comment">// 监听表格的选择事件，当表格中的行被选中或取消选中时触发</span></span><br><span class="language-javascript">    $table.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;check.bs.table uncheck.bs.table &#x27;</span> +</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;check-all.bs.table uncheck-all.bs.table&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 根据当前选中的行的数量来启用或禁用删除按钮</span></span><br><span class="language-javascript">        $remove.<span class="hljs-title function_">prop</span>(<span class="hljs-string">&#x27;disabled&#x27;</span>, !$table.<span class="hljs-title function_">bootstrapTable</span>(<span class="hljs-string">&#x27;getSelections&#x27;</span>).<span class="hljs-property">length</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 保存你的数据，这里只保存当前页的数据</span></span><br><span class="language-javascript">        selections = <span class="hljs-title function_">getIdSelections</span>()</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;当前选中:&quot;</span> + selections)</span><br><span class="language-javascript">        <span class="hljs-comment">// 如果你想要保存所有选中的数据，可以在这里使用 push 或 splice 方法</span></span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 监听表格的所有事件，用于调试目的</span></span><br><span class="language-javascript">    $table.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;all.bs.table&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e, name, args</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// console.log(name, args)</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 点击删除按钮时执行的操作</span></span><br><span class="language-javascript">    $remove.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 获取所有选中行的 ID</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> ids = <span class="hljs-title function_">getIdSelections</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> <span class="hljs-title function_">askDelete</span>()) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 从表格中移除选中的行</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;要删除的ids：&quot;</span> + ids)</span><br><span class="language-javascript">        <span class="hljs-title function_">removeBatch</span>(ids);</span><br><span class="language-javascript">        <span class="hljs-comment">// 禁用删除按钮</span></span><br><span class="language-javascript">        $remove.<span class="hljs-title function_">prop</span>(<span class="hljs-string">&#x27;disabled&#x27;</span>, <span class="hljs-literal">true</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 绑定导出按钮点击事件</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&#x27;#export&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    $table.<span class="hljs-title function_">tableExport</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;excel&#x27;</span>, <span class="hljs-comment">// 导出文件类型，可选 &#x27;csv&#x27;, &#x27;txt&#x27;, &#x27;sql&#x27;, &#x27;json&#x27;, &#x27;xml&#x27;, &#x27;excel&#x27;, &#x27;doc&#x27;, &#x27;png&#x27;, &#x27;pdf&#x27;</span></span><br><span class="language-javascript">      <span class="hljs-attr">escape</span>: <span class="hljs-string">&#x27;false&#x27;</span> <span class="hljs-comment">// 是否使用转义，默认为 true</span></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">  $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">initTable</span>();</span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;#locale&#x27;</span>).<span class="hljs-title function_">change</span>(initTable)</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 删除确认弹窗</span></span><br><span class="language-javascript">  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">askDelete</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;确定要删除它吗?&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;删除后无法恢复!&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;warning&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">showCancelButton</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">confirmButtonColor</span>: <span class="hljs-string">&quot;#3085d6&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">cancelButtonColor</span>: <span class="hljs-string">&quot;#d33&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&quot;确定!&quot;</span></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> result.<span class="hljs-property">isConfirmed</span>;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 操作提示</span></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">mess</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">position</span>: <span class="hljs-string">&quot;top-end&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;success&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;操作OK&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">showConfirmButton</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">timer</span>: <span class="hljs-number">1500</span></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> $addModal = $(<span class="hljs-string">&#x27;#addModal&#x27;</span>);</span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> $editModal = $(<span class="hljs-string">&#x27;#editModal&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 新增</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&#x27;#addForm&#x27;</span>).<span class="hljs-title function_">submit</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">    event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> data = $(<span class="hljs-string">&#x27;#addForm&#x27;</span>).<span class="hljs-title function_">serialize</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);</span><br><span class="language-javascript">    <span class="hljs-title function_">save</span>(data)</span><br><span class="language-javascript">    $addModal.<span class="hljs-title function_">modal</span>(<span class="hljs-string">&#x27;hide&#x27;</span>);</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 保存编辑</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&#x27;#editForm&#x27;</span>).<span class="hljs-title function_">submit</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">    event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> data = $(<span class="hljs-string">&#x27;#editForm&#x27;</span>).<span class="hljs-title function_">serialize</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);</span><br><span class="language-javascript">    <span class="hljs-title function_">update</span>(data);</span><br><span class="language-javascript">    $editModal.<span class="hljs-title function_">modal</span>(<span class="hljs-string">&#x27;hide&#x27;</span>);</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">save</span>(<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">    $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/novel-category/add&quot;</span>, data, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">mess</span>();</span><br><span class="language-javascript">        <span class="hljs-title function_">refresh</span>();</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">    $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/novel-category/update&quot;</span>, data, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">mess</span>();</span><br><span class="language-javascript">        <span class="hljs-title function_">refresh</span>();</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">    $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/novel-category/delete/&quot;</span> + id, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">refresh</span>();</span><br><span class="language-javascript">        <span class="hljs-title function_">mess</span>();</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">removeBatch</span>(<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">    $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/novel-category/deleteBatch?ids=&quot;</span> + data.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>), <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">mess</span>();</span><br><span class="language-javascript">        <span class="hljs-title function_">refresh</span>();</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">refresh</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    $table.<span class="hljs-title function_">bootstrapTable</span>(<span class="hljs-string">&#x27;refresh&#x27;</span>);</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>实用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧-6：最快速的权限控制：Sa-Toekn</title>
    <link href="/blog/posts/53762.html"/>
    <url>/blog/posts/53762.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考文档：<a href="https://sa-token.cc/doc.html">https://sa-token.cc/doc.html</a></p></blockquote><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Sa-Token 权限认证，在线文档：https://sa-token.cc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.dev33<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sa-token-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.37.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 在 thymeleaf 标签中使用 Sa-Token --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.dev33<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sa-token-dialect-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.37.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一般用户-角色-权限</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>核心：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xxx.readverse.config;<br><br><span class="hljs-keyword">import</span> cn.dev33.satoken.interceptor.SaInterceptor;<br><span class="hljs-keyword">import</span> cn.dev33.satoken.stp.StpUtil;<br><span class="hljs-keyword">import</span> cn.dev33.satoken.thymeleaf.dialect.SaTokenDialect;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class="hljs-keyword">import</span> org.thymeleaf.spring5.view.ThymeleafViewResolver;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaTokenConfig</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br><br>    <span class="hljs-comment">// 注册 Sa-Token 拦截器，打开注解式鉴权功能 </span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 注册 Sa-Token 拦截器，打开注解式鉴权功能 </span><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SaInterceptor</span>()).<br>                addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).excludePathPatterns(<span class="hljs-string">&quot;/swagger-resources/**&quot;</span>, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;/v3/api-docs/**&quot;</span>, <span class="hljs-string">&quot;/swagger-ui.html/**&quot;</span><br>                        ,<span class="hljs-string">&quot;/doc.html/**&quot;</span>,<span class="hljs-string">&quot;/error&quot;</span>,<span class="hljs-string">&quot;/favicon.ico&quot;</span>,<span class="hljs-string">&quot;doc.html&quot;</span>, <span class="hljs-string">&quot;/static/**&quot;</span><br>                );<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SaTokenDialect <span class="hljs-title function_">saTokenDialect</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SaTokenDialect</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 为 Thymeleaf 注入全局变量，以便在页面中调用 Sa-Token 的方法</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureThymeleafStaticVars</span><span class="hljs-params">(ThymeleafViewResolver viewResolver)</span> &#123;<br>        viewResolver.addStaticVariable(<span class="hljs-string">&quot;stp&quot;</span>, StpUtil.stpLogic);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>认证与授权：把用户对应的角色和权限放到列表就行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xxx.readverse.config;<br><br><span class="hljs-keyword">import</span> cn.dev33.satoken.stp.StpInterface;<br><span class="hljs-keyword">import</span> cn.dev33.satoken.stp.StpUtil;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StpInterfaceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StpInterface</span> &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getPermissionList</span><span class="hljs-params">(Object o, String s)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getRoleList</span><span class="hljs-params">(Object o, String s)</span> &#123;<br><br>        ArrayList&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> String.valueOf(StpUtil.getSession().get(<span class="hljs-string">&quot;role&quot;</span>));<br>        arrayList.add(role);<br>        <span class="hljs-keyword">return</span> arrayList;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>更多内容可以参考官方文档</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>实用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧-5：整合thymeleaf</title>
    <link href="/blog/posts/29285.html"/>
    <url>/blog/posts/29285.html</url>
    
    <content type="html"><![CDATA[<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">prefix:</span> <span class="hljs-string">classpath:/templates/</span><br>    <span class="hljs-attr">suffix:</span> <span class="hljs-string">.html</span><br>    <span class="hljs-attr">encoding:</span> <span class="hljs-string">UTF-8</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><p>备注：注意thymeleaf语法</p><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><pre><code class="hljs">变量表达式：    $&#123;...&#125;：用于在模板中输出变量的值。    *&#123;...&#125;：用于在表单中绑定对象属性。选择性渲染：    th:if：用于条件性地渲染 HTML 元素。    th:unless：与 th:if 相反，用于条件性地不渲染 HTML 元素。    th:switch、th:case、th:case-default：用于类似 switch-case 的条件渲染。循环迭代：    th:each：用于循环迭代集合中的元素，并渲染 HTML 元素。属性操作：    th:href：用于设置链接的 href 属性。    th:src：用于设置图片等资源的 src 属性。    th:value：用于设置表单元素的值。事件处理：    th:onclick、th:onchange 等：用于设置元素的点击、变化等事件处理函数。模板布局：    th:insert：用于将另一个页面片段插入当前页面。    th:replace：用于用另一个页面片段替换当前元素。    th:include：用于包含另一个页面片段到当前页面。国际化和国际化消息：    #&#123;...&#125;：用于获取国际化消息。片段操作：    th:fragment、th:include：用于定义和引用片段。模板继承：    th:replace、th:insert、th:include：用于模板布局中的不同部分的组合。文本操作：    |...|：用于字符串的字面量。CSS 类操作：    th:class、th:id 等：用于设置元素的 CSS 类和 ID。条件属性：    th:attr：根据条件设置元素的属性。模板注释：    &lt;!-- /*...*/ --&gt;：用于模板注释。                页面跳转：    th:action：用于设置表单提交的目标地址。    th:href：用于设置超链接的跳转地址。日期和时间格式化：    #dates：用于对日期和时间进行格式化和处理。数学计算：    #numbers：用于执行数学运算，如格式化数字、比较大小等。集合操作：    #lists、#sets、#arrays：用于对集合进行操作，如过滤、排序等。条件判断：    th:if, th:unless, th:switch, th:case, th:case-default 等：用于条件判断和渲染。表达式工具：    #ctx、#session、#request 等：用于获取上下文信息，如上下文路径、会话信息等。表单处理：    th:object：用于表单数据绑定到后端对象。    th:field：用于表单字段绑定到后端对象属性。重复块：    th:block：用于定义重复使用的 HTML 块。安全处理：    #aggregates：用于执行安全相关的聚合操作，如求和、求平均值等。国际化处理：    th:text、#&#123;...&#125;：用于国际化消息的显示。自定义标签库：    th:*、th:each、th:if 等：Thymeleaf 还支持使用自定义标签库，可以通过这些标签来扩展 Thymeleaf 的功能。</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>实用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧-4：整合Api文档</title>
    <link href="/blog/posts/17772.html"/>
    <url>/blog/posts/17772.html</url>
    
    <content type="html"><![CDATA[<h2 id="加强版swagger"><a href="#加强版swagger" class="headerlink" title="加强版swagger"></a>加强版swagger</h2><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/20240326144539.png"></p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 替换为最新版本 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lys.sims.config;<br><br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig2</span> &#123;<br>    <span class="hljs-comment">// 创建Docket存入容器，Docket代表一个接口文档</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">webApiConfig</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                <span class="hljs-comment">// 创建接口文档的具体信息</span><br>                .apiInfo(webApiInfo())<br>                <span class="hljs-comment">// 创建选择器，控制哪些接口被加入文档</span><br>                .select()<br>                <span class="hljs-comment">// 指定@ApiOperation标注的接口被加入文档</span><br>                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))<br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">// 创建接口文档的具体信息，会显示在接口文档页面中</span><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">webApiInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                <span class="hljs-comment">// 文档标题</span><br>                .title(<span class="hljs-string">&quot;xxxx系统接口文档&quot;</span>)<br>                <span class="hljs-comment">// 文档描述</span><br>                .description(<span class="hljs-string">&quot;本文档描述了xxxx信息管理系统的接口定义&quot;</span>)<br>                <span class="hljs-comment">// 版本</span><br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                <span class="hljs-comment">// 联系人信息</span><br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;程序员小李&quot;</span>, <span class="hljs-string">&quot;http://xxxxx.gitee.io&quot;</span>, <span class="hljs-string">&quot;xxxx@163.com&quot;</span>))<br>                <span class="hljs-comment">// 版权</span><br>                .license(<span class="hljs-string">&quot;&quot;</span>)<br>                <span class="hljs-comment">// 版权地址</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>需要放行路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SaInterceptor</span>()).<br>        addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).excludePathPatterns(<span class="hljs-string">&quot;/swagger-resources/**&quot;</span>, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;/v3/api-docs/**&quot;</span>, <span class="hljs-string">&quot;/swagger-ui.html/**&quot;</span><br>                ,<span class="hljs-string">&quot;/doc.html/**&quot;</span>,<span class="hljs-string">&quot;/error&quot;</span>,<span class="hljs-string">&quot;/favicon.ico&quot;</span>,<span class="hljs-string">&quot;doc.html&quot;</span>, <span class="hljs-string">&quot;/static/**&quot;</span><br>        );<br></code></pre></td></tr></table></figure><p>访问：<br><a href="http://ip:端口/doc.html">http://ip:端口/doc.html</a></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/novel-category&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;小说分类&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CategoryController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;分类列表&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> SaResult <span class="hljs-title function_">getNovelCategories</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Category&gt; categoryList = novelCategoryService.list(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;Category&gt;().last(<span class="hljs-string">&quot;limit 12&quot;</span>));<br>        <span class="hljs-keyword">return</span> SaResult.data(categoryList);<br>    &#125;<br>    <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>实用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧-3：整合代码生成器</title>
    <link href="/blog/posts/23223.html"/>
    <url>/blog/posts/23223.html</url>
    
    <content type="html"><![CDATA[<h2 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        代码生成器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generate</span><span class="hljs-params">()</span> &#123;<br>    FastAutoGenerator.create(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/xxx?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>)<br>            .globalConfig(builder -&gt; &#123;<br>                builder.outputDir(<span class="hljs-string">&quot;G:\\gitee\\xxx\\src\\main\\java&quot;</span>); <span class="hljs-comment">// 指定输出目录</span><br>            &#125;)<br>            .packageConfig(builder -&gt; &#123;<br>                builder.parent(<span class="hljs-string">&quot;com.xxx.xxx&quot;</span>) <span class="hljs-comment">// 设置xxx父包名</span><br>                        .moduleName(<span class="hljs-string">&quot;xxx&quot;</span>) <span class="hljs-comment">// 设置父包模块名</span><br>                        .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="hljs-string">&quot;G:\\gitee\\xxxx\\src\\main\\resources\\mapper&quot;</span>)); <span class="hljs-comment">// 设置mapperXml生成路径</span><br>            &#125;)<br>            .strategyConfig(builder -&gt; &#123;<br>                builder.entityBuilder().enableLombok();<br>                builder.mapperBuilder().enableMapperAnnotation().build();<br>                builder.controllerBuilder().enableHyphenStyle()  <span class="hljs-comment">// 开启驼峰转连字符</span><br>                        .enableRestStyle();  <span class="hljs-comment">// 开启生成@RestController 控制器</span><br>                builder.addInclude(<span class="hljs-string">&quot;xxx&quot;</span>) <span class="hljs-comment">// 设置需要生成的表名</span><br>                        .addTablePrefix(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 设置过滤表前缀</span><br>            &#125;)<br>            .templateEngine(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FreemarkerTemplateEngine</span>()) <span class="hljs-comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span><br>            .execute();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多个表一次生成："><a href="#多个表一次生成：" class="headerlink" title="多个表一次生成："></a>多个表一次生成：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       String tableName[] = &#123;<span class="hljs-string">&quot;novel_category&quot;</span>&#125;;<br>       <span class="hljs-keyword">for</span> (String s : tableName) &#123;<br>           generate(s);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>实用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技巧-2：使用Mybatis-Plus</title>
    <link href="/blog/posts/29573.html"/>
    <url>/blog/posts/29573.html</url>
    
    <content type="html"><![CDATA[<h2 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">xxxx</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/xxx?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><br><span class="hljs-attr">mybatis-plus:</span><br><span class="hljs-comment"># 扫描实体类</span><br>  <span class="hljs-attr">typeAliasesPackage:</span> <span class="hljs-string">com.xxx.xxx.entity</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">auto-mapping-behavior:</span> <span class="hljs-string">FULL</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>  <span class="hljs-comment"># 指定mapper文件的位置</span><br>  <span class="hljs-attr">mapper-locations:</span><br>    <span class="hljs-string">classpath*:mapper/*.xml</span><br></code></pre></td></tr></table></figure><h2 id="开启分页："><a href="#开启分页：" class="headerlink" title="开启分页："></a>开启分页：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xxx.readverse.config;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisPlusConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        <span class="hljs-comment">// 向MyBatis-Plus的过滤器链中添加分页拦截器，需要设置数据库类型（主要用于分页方言）</span><br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/page/list&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;分类-分页列表&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> SaResult <span class="hljs-title function_">getNovelCategoriesByPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;page&quot;)</span> Integer page, <span class="hljs-meta">@RequestParam(&quot;keyword&quot;)</span> String keyword)</span> &#123;<br>    Page&lt;Category&gt; pages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, <span class="hljs-number">5</span>); <span class="hljs-comment">// 每页显示5条记录</span><br>    QueryWrapper&lt;Category&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    <span class="hljs-comment">// 可以根据需要添加其他查询条件，例如关键字搜索</span><br>    queryWrapper.like(<span class="hljs-string">&quot;category_name&quot;</span>, keyword);<br>    IPage&lt;Category&gt; categoryPage = novelCategoryService.page(pages, queryWrapper);<br>    <span class="hljs-keyword">return</span> SaResult.data(categoryPage);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>实用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用技法-1：快速起Springboot项目</title>
    <link href="/blog/posts/13170.html"/>
    <url>/blog/posts/13170.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-创建maven项目，修改pom，继承springboot依赖"><a href="#1-创建maven项目，修改pom，继承springboot依赖" class="headerlink" title="1.创建maven项目，修改pom，继承springboot依赖"></a>1.创建maven项目，修改pom，继承springboot依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-指定远程资源库"><a href="#2-指定远程资源库" class="headerlink" title="2.指定远程资源库"></a>2.指定远程资源库</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun nexus<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun nexus<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-集成打jar插件"><a href="#3-集成打jar插件" class="headerlink" title="3.集成打jar插件"></a>3.集成打jar插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-常用套件"><a href="#4-常用套件" class="headerlink" title="4.常用套件"></a>4.常用套件</h2><h3 id="lombk"><a href="#lombk" class="headerlink" title="lombk"></a>lombk</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@TableName(&quot;category&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Category</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-meta">@TableId(value = &quot;category_id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer categoryId;<br><br>    <span class="hljs-keyword">private</span> String categoryName;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="test测试"><a href="#test测试" class="headerlink" title="test测试"></a>test测试</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(classes = xxxApplication.class)</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>   xxx<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>开启：</p><p><img src="/blog/../images/pasted-0.png" alt="upload successful"></p>]]></content>
    
    
    
    <tags>
      
      <tag>实用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计与实现基于Java+MySQL的考勤发布-签到系统</title>
    <link href="/blog/posts/57370.html"/>
    <url>/blog/posts/57370.html</url>
    
    <content type="html"><![CDATA[<h2 id="课题背景"><a href="#课题背景" class="headerlink" title="课题背景"></a>课题背景</h2><p>随着现代经济的迅速发展，电子考勤签到服务已经渗透到人们生活的方方面面，成为不可或缺的一项服务。在这个背景下，线上签到作为考勤签到的一种创新形式，为用户提供了便捷的操作方式，使得任务签到、个人签到记录查看、签到时效校订等功能变得更加灵活和高效。线上签到的便利性在于用户可以随时随地通过电子设备进行签到，无需纸质记录或传统的考勤方式。这种形式的签到使得员工、学生或其他组织成员可以轻松完成考勤流程，从而提高了工作效率和管理的便捷性。</p><h2 id="课题目标"><a href="#课题目标" class="headerlink" title="课题目标"></a>课题目标</h2><p>本课题旨在设计和实现一个模拟任务发布-签到操作系统，以帮助用户更好地了解和学习Java结合MySQL开发的基本操作流程。通过这个课题，学生将能够加深对Java Swing界面编程、JDBC使用，事件处理和面向对象编程的理解，并具备设计和实现简单交互式应用程序的能力。</p><p>要求：</p><h3 id="管理员端"><a href="#管理员端" class="headerlink" title="管理员端"></a>管理员端</h3><ul><li>任务发布</li><li>学生信息</li><li>任务列表</li><li>任务签到详情</li><li>签到记录管理</li><li>签到数据导出</li></ul><h3 id="学生端"><a href="#学生端" class="headerlink" title="学生端"></a>学生端</h3><ul><li>选择任务签到</li><li>查看签到记录</li><li>签到时效校验</li></ul><h3 id="公共"><a href="#公共" class="headerlink" title="公共"></a>公共</h3><ul><li>密码重置</li></ul><p><img src="http://cdn.qiniu.liyansheng.top/typora/ad.jpg"></p><h2 id="运用技术"><a href="#运用技术" class="headerlink" title="运用技术"></a>运用技术</h2><ul><li>Java语言</li><li>MySQL数据库</li><li>Swing</li><li>JDBC</li></ul><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><strong>登录认证</strong>：输入账号密码，选择身份，校验通过将进入对应的操作端</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240127222845733.png"></p><p><strong>学生端-签到：</strong>选择一个任务进行签到，如果签到时间不在要求的时间区间，将无法进行签到</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240127222904437.png"></p><p><strong>学生端-签到记录：</strong>可查看自己的签到情况</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240127222914135.png"></p><p><strong>学生端-密码重置：</strong>可根据实际需要修改个人的登录密码，确保账户的安全性</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240127222919812.png"></p><p><strong>管理员-学生信息：</strong>可查看在册的学生信息</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240127222941630.png"></p><p><strong>管理员-发布签到：</strong>输入任务签到地址，开始时间，截止时间，以及说明，即可发布一个签到任务</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240127222948379.png"></p><p><strong>管理员-任务列表：</strong>可查看已发布签到任务，选择指定一个任务，点击“点击任务查看签到情况”按钮，即可查看该任务对应的签到记录</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240127222954770.png"></p><p><strong>管理员-签到详情：</strong>支持对某个签到任务的签到记录进行查询，新增，修改，删除等操作。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240127223003750.png"></p><p><strong>管理员-密码重置：</strong>可根据实际需要修改个人的登录密码，确保账户的安全性</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240127230121008.png"></p><p>以上展示了部分效果图，具体可获取源码自行调试查看。</p><h2 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240127230329955.png"></p><h2 id="点我远程协助-项目调试"><a href="#点我远程协助-项目调试" class="headerlink" title="点我远程协助-项目调试"></a><a href="https://bbs.csdn.net/topics/615978314">点我远程协助-项目调试</a></h2>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ATM存取款机模拟（Java+MySQL）</title>
    <link href="/blog/posts/58235.html"/>
    <url>/blog/posts/58235.html</url>
    
    <content type="html"><![CDATA[<h2 id="课题背景"><a href="#课题背景" class="headerlink" title="课题背景"></a>课题背景</h2><p>随着现代经济的发展，电子支付和自动化银行服务已成为人们生活中不可或缺的一部分。自动取款机（ATM）作为一种常见的自助服务设备，使用户能够方便地进行资金的存取、查询余额、转账等操作，而无需到银行柜台。</p><h2 id="课题目标"><a href="#课题目标" class="headerlink" title="课题目标"></a>课题目标</h2><p>本课题旨在设计和实现一个模拟银行ATM存取款机的操作系统，以帮助用户更好地了解和学习ATM的基本操作流程。通过这个课题，学生将能够加深对Java Swing界面编程、事件处理和面向对象编程的理解，并具备设计和实现简单交互式应用程序的能力。</p><p>要求：</p><ol><li>界面设计：使用Java Swing库创建一个用户友好的界面，包括显示屏、数字按键、功能按钮等组件，模拟真实的ATM界面。</li><li>用户认证：实现用户登录功能，包括输入银行卡号、验证用户身份等。</li><li>资金操作：包括存款和取款功能，用户可以输入金额并执行相应的操作。确保正确计算余额并更新到系统中。</li><li>余额查询：实现查询余额功能，显示用户账户的当前余额。</li><li>转账功能：允许用户输入转账金额和目标账户，进行资金的转账操作。</li><li>交易记录：记录每笔交易的相关信息，包括时间、金额、交易类型等，并能够在需要时查询这些记录。</li><li>异常处理：处理可能发生的异常情况，如余额不足、密码错误等，并给出相应的提示信息。</li><li>可扩展性：代码应具备良好的可扩展性，方便将来添加新功能或改进现有功能。</li></ol><p>学生可以根据以上要求，结合自己的创意和设计思路，进行课程设计的实现。通过完成这个课题，学生将能够加强对Java Swing编程和面向对象编程的理解，提升自己的软件开发技能。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/ad.jpg"></p><h2 id="运用技术"><a href="#运用技术" class="headerlink" title="运用技术"></a>运用技术</h2><ul><li>Java语言</li><li>MySQL数据库</li><li>Swing</li><li>JDBC</li></ul><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><p><img src="http://cdn.qiniu.liyansheng.top/typora/GIF%202024-1-10%2017-59-20.gif"></p><h3 id="账户验证"><a href="#账户验证" class="headerlink" title="账户验证"></a>账户验证</h3><p>长数字卡号与密码，验证通过方可进入系统操作</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240110174706480.png" alt="image-20240110174706480"></p><h3 id="新开户"><a href="#新开户" class="headerlink" title="新开户"></a>新开户</h3><p>需要登记姓名，密码，身份证号，开户卡号自动随机生成</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240110174716078.png" alt="image-20240110174716078"></p><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>左右两边是操作按钮，中间是交互显示屏，下方有实时时间</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240110174732028.png" alt="image-20240110174732028"></p><h3 id="存款"><a href="#存款" class="headerlink" title="存款"></a>存款</h3><p>将一定金额的现金存入银行账户中。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240110174829725.png" alt="image-20240110174829725"></p><h3 id="取款"><a href="#取款" class="headerlink" title="取款"></a>取款</h3><p>从银行账户中取出一定金额的现金。可快捷输入 ，点击相应的数字，也可以自定义金额</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240110174837436.png" alt="image-20240110174837436"></p><h3 id="转账"><a href="#转账" class="headerlink" title="转账"></a>转账</h3><p>将一定金额的资金从自己的银行账户转移到他人的银行账户中。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240110174846225.png" alt="image-20240110174846225"></p><h3 id="余额查询"><a href="#余额查询" class="headerlink" title="余额查询"></a>余额查询</h3><p>查询银行账户中的余额情况。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240110174857152.png" alt="image-20240110174857152"></p><h3 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h3><p>用户可以修改银行账户的登录密码。密码修改通常需要进行身份验证，例如输入原始密码或提供其他安全信息。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240110174907645.png" alt="image-20240110174907645"></p><h3 id="个人流水"><a href="#个人流水" class="headerlink" title="个人流水"></a>个人流水</h3><p>用户可以查看银行账户的收支明细，包括每笔交易的时间、金额和类型等信息。个人流水记录可以帮助用户追踪和管理自己的资金流动。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240110174920662.png" alt="image-20240110174920662"></p><p>以上展示部分效果，具体可以将项目工程克隆下来，本地运行看下实际效果。</p><h2 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240110174524811.png" alt="image-20240110174524811"></p><h2 id="点我远程协助-项目调试"><a href="#点我远程协助-项目调试" class="headerlink" title="点我远程协助-项目调试"></a><a href="https://bbs.csdn.net/topics/615978314">点我远程协助-项目调试</a></h2>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微友圈网站（Java web）</title>
    <link href="/blog/posts/47404.html"/>
    <url>/blog/posts/47404.html</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>微友圈是一个基于Java Web开发的社交网络平台，旨在为用户提供一个轻松互动、分享生活和交流观点的在线社区。随着社交网络的普及，人们更加渴望与朋友、家人以及其他志同道合的人保持联系并分享彼此的生活点滴。微友圈的目标是打造一个简洁、高效且用户友好的平台，使用户能够轻松地发布动态、图片、音频和视频等多媒体内容，并与其他用户进行实时互动和评论。微友圈注重用户隐私和数据安全，采用了先进的加密技术和权限管理系统，确保用户信息得到有效保护。和参与度。</p><p>通过微友圈，用户可以随时随地与朋友分享快乐、分享心情，获取信息和交流观点，建立更紧密的社交网络。微友圈致力于成为用户生活中不可或缺的一部分，帮助用户建立深厚的人际关系，并且成为他们表达自我的平台。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>结合本学期《Java Web程序设计课程设计》课程所学的知识和技能，制作一个微博系统（类似于新浪微博）</p><p>功要求如下：</p><ul><li>首页展示帖子列表</li><li>每条帖子可以发布文字，图片或者视频</li><li>注册用户可以登陆系统，登陆后可以点赞、转发和评论。</li><li>非注册用户可以浏览，可以进行注册操作，注册时验证用户名，不能与数据库的已有的用户名重复。</li><li>所有数据存在数据库中，数据库可以选择ACCESS，MySQL，SQL Server等通用数据库中。</li></ul><p>作品要求：前端页面尽量采用Vue和Bootstrap框架，也可以使用其它框架或自已进行美化，效果不低于Bootstrap框架显示的效果。后端技术需用本学期课程的框架来完成，如Spring MVC或Spring Boot</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/ad.jpg"></p><h2 id="运用技术"><a href="#运用技术" class="headerlink" title="运用技术"></a>运用技术</h2><ul><li>Java语言</li><li>MySQL数据库</li><li>BootStrap</li><li>Jquery</li><li>sa-token</li></ul><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><h4 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a><strong>用户登录</strong></h4><p>输入账号密码，验证通过方可进入，否则给出错误提示。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240109163315460.png" alt="image-20240109163315460"></p><h4 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a><strong>用户注册</strong></h4><p>提供用户注册功能，输入用户名（如果已被占用，需要换一个），密码，姓名，操作有相应的提示。</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20240109163332881.png" alt="image-20240109163332881"></p><h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a><strong>首页</strong></h4><p>左侧为菜单，右边测试微友发布的帖子，可以点赞，评论，转发</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240109163545234.png" alt="image-20240109163545234"></p><h4 id="发布帖子动态"><a href="#发布帖子动态" class="headerlink" title="发布帖子动态"></a>发布帖子动态</h4><p>编辑文字内容，可选择图片（最多9张）进行发布动态</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240109163624288.png" alt="image-20240109163624288"></p><h4 id="我的动态"><a href="#我的动态" class="headerlink" title="我的动态"></a>我的动态</h4><p>可看到自己发布的所有帖子</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240109163713273.png" alt="image-20240109163713273"></p><h4 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h4><p>可修改自己的基本信息</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240109163727076.png" alt="image-20240109163727076"></p><h4 id="问题反馈"><a href="#问题反馈" class="headerlink" title="问题反馈"></a>问题反馈</h4><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240109164042279.png" alt="image-20240109164042279"></p><p>以上展示部分效果，具体可以将项目工程克隆下来，本地运行看下实际效果。</p><h2 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h2><p><img src="http://cdn.qiniu.liyansheng.top/img/20240605152339.png"></p><h2 id="点我远程协助-项目调试"><a href="#点我远程协助-项目调试" class="headerlink" title="点我远程协助-项目调试"></a><a href="https://bbs.csdn.net/topics/615978314">点我远程协助-项目调试</a></h2>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>课程设计：停车场管理系统（Java+MySQL）</title>
    <link href="/blog/posts/14719.html"/>
    <url>/blog/posts/14719.html</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>在当今城市交通拥堵日益加剧的背景下，停车难成为了广泛存在的问题。为解决这一难题，我们开发了一款创新的停车场车位管理系统。这个系统旨在通过智能化管理和高效的数据分析，优化停车场资源利用，提高停车效率，降低管理成本。我们的目标是为城市居民和车辆管理者提供一个便捷、高效的停车场管理体验。这不仅体现在智能化的车辆进出管理和实时数据分析上，更包括了持续改进和拓展系统功能，以适应未来技术的发展和用户需求的变化。我们期待通过这个系统为城市交通管理带来积极的影响，使停车不再成为城市生活中的烦恼，提升用户的停车体验。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>停车场车位管理系统，功能有登录，注册，车辆进场登记，车辆出场登记，车位新增，删除车位，车辆进出记录，数据导出等功能。具体如下：</p><ol><li><strong>用户模块</strong></li></ol><ul><li><strong>登录：</strong> 用户能够通过用户名和密码登录系统。</li><li><strong>注册：</strong> 允许新用户注册账号，并且需要对注册信息进行验证和管理。</li></ul><ol start="2"><li><strong>车辆进出管理</strong></li></ol><ul><li><strong>车辆进场登记：</strong> 记录车辆进入停车场的时间、车牌号等相关信息。</li><li><strong>车辆出场登记：</strong> 记录车辆离开停车场的时间，计算停车费用（如果有的话）并生成相应的账单。</li></ul><ol start="3"><li><strong>车位管理</strong></li></ol><ul><li><strong>车位新增：</strong> 管理员能够将新的车位添加到系统中。</li><li><strong>删除车位：</strong> 允许管理员从系统中移除不再使用的车位。</li></ul><ol start="4"><li><strong>数据记录和导出</strong></li></ol><ul><li><strong>车辆进出记录：</strong> 系统需要记录车辆的进出时间、停留时间等信息。</li><li><strong>数据导出：</strong> 提供数据导出功能，允许用户或管理员将记录的数据以某种格式（如CSV、Excel等）导出。</li></ul><ol start="5"><li><strong>权限和安全性</strong></li></ol><ul><li><strong>权限控制：</strong> 区分用户和管理员角色，不同角色有不同的操作权限。</li><li><strong>数据安全：</strong> 对敏感信息进行加密存储，确保数据的安全性。</li></ul><ol start="6"><li><strong>界面设计</strong></li></ol><ul><li><strong>用户友好的界面：</strong> 使用Swing等工具创建一个直观、易于使用的用户界面。</li><li><strong>交互设计：</strong> 界面设计应该方便用户快速完成操作，提供必要的反馈信息。</li></ul><ol start="7"><li><strong>错误处理与日志记录</strong></li></ol><ul><li><strong>错误处理：</strong> 提供合适的错误信息，指导用户在操作错误时如何处理。</li><li><strong>日志记录：</strong> 记录系统运行时的事件和异常，便于系统管理员进行故障排查和分析。</li></ul><ol start="8"><li><strong>数据库设计</strong></li></ol><ul><li><strong>合适的数据库结构：</strong> 设计和管理数据库以支持系统的各种功能和记录数据。</li></ul><p><img src="http://cdn.qiniu.liyansheng.top/typora/ad.jpg"></p><h2 id="运用技术"><a href="#运用技术" class="headerlink" title="运用技术"></a>运用技术</h2><ul><li>Java语言</li><li>MySQL数据库</li><li>JDBC</li><li>Swing窗口交互</li></ul><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><h4 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a><strong>用户登录</strong></h4><p>输入账号密码，验证通过方可进入，否则给出错误提示，拒绝访问</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/wps1.jpg" alt="img"> </p><h4 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a><strong>用户注册</strong></h4><p>提供用户注册功能，输入用户名（如果已被占用，需要换一个），密码，姓名，操作有相应的提示。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/wps2.jpg" alt="img"> </p><h4 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a><strong>主界面</strong></h4><p>左上角有LOGO图片，以及欢迎语，左边按钮可以操作车辆的进出操作。可看到剩余车位数，可查询某个车位，表格一览展示了车位的占用情况，绿色表示空闲的座位，黄色表示使用中的座位。下方可删除和新增车位</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/wps3.jpg" alt="img"> </p><h4 id="车辆进场登记"><a href="#车辆进场登记" class="headerlink" title="车辆进场登记"></a><strong>车辆进场登记</strong></h4><p>选择一个车位，输入进场车辆的车牌号即可</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/wps4.jpg" alt="img"> </p><h4 id="车辆信息更正"><a href="#车辆信息更正" class="headerlink" title="车辆信息更正"></a><strong>车辆信息更正</strong></h4><p>对于已经进场的车辆，如果信息有误，可以进行修改的操作</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/wps5.jpg" alt="img"> </p><h4 id="车位使用操作记录"><a href="#车位使用操作记录" class="headerlink" title="车位使用操作记录"></a><strong>车位使用操作记录</strong></h4><p>在这个面板可以看到使用记录，车辆出场后会根据进出的时间差计算相应的停车费用，方便后期需要可溯源。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/wps6.jpg" alt="img"> </p><p>以上展示部分效果，具体可以将项目工程克隆下来，本地运行看下实际效果。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过本次课设的开发过程，我深刻体会到了软件开发的整个流程。从项目背景概述到需求分析，再到选用技术栈，最后实现效果图的展示，每个环节都需要认真思考和合理规划。在具体开发过程中，通过运用Java语言、MySQL数据库和Swing构建窗体，我成功地实现了商品信息管理系统的各项功能。同时，我也锻炼了自己的团队协作能力和解决问题的能力。通过本次课设，我对软件开发有了更深入的认识，并为将来的软件开发之路打下了坚实的基础。</p><h2 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20240108192430453.png" alt="image-20240108192430453"></p>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>课程设计：Springboot+Bootstrap实现图书馆选座管理系统</title>
    <link href="/blog/posts/41479.html"/>
    <url>/blog/posts/41479.html</url>
    
    <content type="html"><![CDATA[<h2 id="大体要求"><a href="#大体要求" class="headerlink" title="大体要求"></a>大体要求</h2><p>设计和实现一个B&#x2F;S结构的图书馆座位管理系统，其功能主要包括用户登录、座位预约、我的预约、我的违规记录等；此外，管理员还具有管理用户的功能。<br>具体要求如下。<br>（1）用户登录：只有合法的用户才能登录此系统，进行相关的操作。<br>（2）座位预约：用户可以选择自习室进行选座。预约时间段分为当天和明天两个时间段。可以参考上面清华大学图书馆的预约规则。<br>（3）我的预约：用户预约后，若没有在规定的时间内进行签到，将计违规操作一次。若用户需要中途离开一小段时间，需进行暂时离开操作，座位继续为该用户保留半小时，半小时内回到座位，需进行重新签到，若没有在规定的时间内回来，计违规操作一次。离开图书馆需进行签退操作，否则计违规操作一次。<br>（4）我的违规记录：用户可查看自己是否有违规记录，以及违规操作的原因。</p><p>（5）用户管理：管理员比普通用户多一个用户管理的模块，模块功能为可以查询、增加、修改、删除用户以及导出用户列表。<br>设计报告中设计和实现部分要求有：（1）程序的功能模块分类、（2）项目结构的设计、（3）数据库的设计、（4）源程序中应体现一定的程序注释说明。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在现代快节奏的图书馆环境中，高效的座位管理系统已成为优化学习空间的必备工具。本文探讨了如何利用强大的技术栈（Spring Boot、Thymeleaf、Bootstrap 和 MySQL）开发出一个稳健的图书馆座位管理系统。让我们深入了解这个系统的核心功能和技术特点。</p><h2 id="功能概览"><a href="#功能概览" class="headerlink" title="功能概览"></a>功能概览</h2><p>座位管理系统提供了一系列功能来简化图书馆座位的管理：</p><ul><li><strong>用户认证：</strong> 只有授权用户可以访问系统。</li><li><strong>座位预约：</strong> 用户可以灵活地预约今天或明天的座位，系统的预约机制参考了清华大学图书馆的灵活预约规则。</li><li><strong>我的预约：</strong> 用户可以查看自己的预约，进行签到、临时离开操作，并且系统会自动记录违规操作以提高用户的管理意识。</li><li><strong>我的违规记录：</strong> 用户可以查看自己是否有违规记录，了解违规原因。</li><li><strong>用户管理：</strong> 管理员可以管理用户，包括查询、添加、修改、删除用户以及导出用户列表。</li></ul><h2 id="数据库表设计："><a href="#数据库表设计：" class="headerlink" title="数据库表设计："></a>数据库表设计：</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223224819636.png" alt="image-20231223224819636"></p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>座位管理系统采用以下技术：</p><ul><li><strong>Spring Boot：</strong> 提供了强大而灵活的 Java 企业应用程序开发框架。</li><li><strong>Thymeleaf：</strong> 用于在服务器端和独立环境中渲染动态内容的现代化 Java 模板引擎。</li><li><strong>Bootstrap：</strong> 流行的前端框架，用于构建响应式和视觉吸引力强的网页。</li><li><strong>MySQL：</strong> 可靠且广泛使用的关系型数据库管理系统。</li><li><strong>MyBatis-Plus：</strong> MyBatis 的增强工具，简化数据库操作。</li><li><strong>SA-Token：</strong> Spring Boot 项目的轻量级权限认证系统。</li></ul><p><img src="http://cdn.qiniu.liyansheng.top/typora/b50eb7f070464a28b6b6bf3dcc7136bf.jpeg"></p><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p>座位管理系统采用模块化架构，前端页面使用Thymeleaf模板渲染动态内容，后端逻辑则由Spring Boot处理，并与MySQL数据库无缝集成。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223225920870.png" alt="image-20231223225920870"></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223233125145.png" alt="image-20231223233125145"></p><h2 id="核心功能展示"><a href="#核心功能展示" class="headerlink" title="核心功能展示"></a>核心功能展示</h2><h3 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h3><p>基于用户表的role字段来判断身份，admin表示管理员，user表示普通用户，登录后，根据role自动验证授权。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230159535.png" alt="image-20231223230159535"></p><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>简单分三个板块：</p><ul><li><strong>轮播图</strong>：在这个板块，您可以欣赏到校园内壮丽的景色和丰富多彩的校园活动，让您更深入地了解我们学校的多元魅力。这里将呈现校园一瞥，带您领略我们学校丰富多彩的校园生活。</li><li><strong>系统公告</strong>：系统公告板块为您提供最新的系统消息和重要通知。无论是座位预约调整、系统更新还是重要通知事项，您都可以在这里第一时间获取到相关信息。我们承诺提供及时、清晰的系统动态，让您对系统运行状况了如指掌。</li><li><strong>学校通知</strong>：学校通知板块为您带来学校内部的最新动态和重要消息。无论是学校活动、教学安排还是重要通知，这里将为您及时呈现。让您与学校保持紧密联系，随时了解学校的各项消息和活动，共同感受学校蓬勃发展的活力与魅力。</li></ul><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230303279.png" alt="image-20231223230303279"></p><h3 id="座位预约"><a href="#座位预约" class="headerlink" title="座位预约"></a>座位预约</h3><p>选座阅览室：</p><p>选择开放的阅览室，如果是管理员，还能操作新增阅览室。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230344950.png" alt="image-20231223230344950"></p><p>选座预约：</p><p>进入一个阅览室，即可看到改室内的座位的状态（可选，使用中，暂离等）</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230416281.png" alt="image-20231223230416281"></p><p>成功预约如下：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230445919.png" alt="image-20231223230445919"></p><p>不可重复预约，一次一人只能预约一个，如下：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230630634.png" alt="image-20231223230630634"></p><h3 id="我的预约"><a href="#我的预约" class="headerlink" title="我的预约"></a>我的预约</h3><p>进入我的预约界面，如果我有新的预约，将出现签到按钮，点击按钮，可签到！</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230505210.png" alt="image-20231223230505210"></p><p>签到成功如下：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230700612.png" alt="image-20231223230700612"></p><p>中途可暂离或者签退：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230730970.png" alt="image-20231223230730970"></p><p>指定时间内不签到或者长时间不签退，记违规一次：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230838768.png" alt="image-20231223230838768"></p><h3 id="违规查看"><a href="#违规查看" class="headerlink" title="违规查看"></a>违规查看</h3><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230539000.png" alt="image-20231223230539000"></p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>管理员可操作</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230601055.png" alt="image-20231223230601055"></p><p>个人信息更新：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230934389.png" alt="image-20231223230934389"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231223230950088.png" alt="image-20231223230950088"></p><p>以上展示部分，更多页面效果可以拿到源码后自己尝试！</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231224231224390.png" alt="image-20231224231224390" style="zoom:67%;" /><h2 id="开发过程和挑战"><a href="#开发过程和挑战" class="headerlink" title="开发过程和挑战"></a>开发过程和挑战</h2><p>在系统开发过程中，我们遇到了一些挑战，比如实现灵活的预约系统和有效管理用户违规情况。然而，通过合理的决策和充分利用Spring Boot的特性，我们成功解决了这些挑战。此外，权限系统没有使用spring scurity 和shiro，而是选择轻量级权限认证系统SA-token，经过这次实践，用起来很是很丝滑的。页面搭建使用的是bootstrap5，相比与其他的layui，elementUI  感觉更容易上手。</p><h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><p>展望未来，座位管理系统可以进一步完善，比如<strong>实时座位可用性更新、用户通知功能以及增加分析功能</strong>以提升用户体验。</p>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
      <tag>毕设</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python：字符串转列表</title>
    <link href="/blog/posts/287.html"/>
    <url>/blog/posts/287.html</url>
    
    <content type="html"><![CDATA[<p>要将一个字符串转换为列表，可以使用字符串的 <code>split()</code> 方法。<code>split()</code> 方法根据指定的分隔符将字符串分割成子串，并将这些子串组成列表。</p><p>假设有一个用空格分隔的字符串，我们想要将其转换为一个单词列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">my_string = <span class="hljs-string">&quot;Hello world this is a string&quot;</span><br><br><span class="hljs-comment"># 使用空格分割字符串，并转换为列表</span><br>my_list = my_string.split()<br><span class="hljs-built_in">print</span>(my_list)<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>split()</code> 方法默认使用空格作为分隔符，将字符串分割成单词，并将单词组成一个列表。结果会是：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;Hello</span>&#x27;, <span class="hljs-symbol">&#x27;world</span>&#x27;, <span class="hljs-symbol">&#x27;this</span>&#x27;, <span class="hljs-symbol">&#x27;is</span>&#x27;, <span class="hljs-symbol">&#x27;a</span>&#x27;, <span class="hljs-symbol">&#x27;string</span>&#x27;]<br></code></pre></td></tr></table></figure><p>你也可以使用其他分隔符来将字符串分割为列表，只需在 <code>split()</code> 方法中传入相应的分隔符作为参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">my_string = <span class="hljs-string">&quot;apple,orange,banana,grape&quot;</span><br><br><span class="hljs-comment"># 使用逗号分隔字符串，并转换为列表</span><br>my_list = my_string.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br><span class="hljs-built_in">print</span>(my_list)<br></code></pre></td></tr></table></figure><p>这段代码将会输出一个以逗号分隔的字符串转换为列表：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;apple</span>&#x27;, <span class="hljs-symbol">&#x27;orange</span>&#x27;, <span class="hljs-symbol">&#x27;banana</span>&#x27;, <span class="hljs-symbol">&#x27;grape</span>&#x27;]<br></code></pre></td></tr></table></figure><p>通过 <code>split()</code> 方法，你可以根据需要使用不同的分隔符将字符串分割成列表。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轻松整合Knife4j：快速搭建Swagger文档界面与接口调试</title>
    <link href="/blog/posts/30821.html"/>
    <url>/blog/posts/30821.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>Knife4j 是一个为 Java 开发者提供的 Swagger 文档聚合工具，它是 Swagger-Bootstrap-UI 的升级版。它的主要功能是生成和展示 API 文档，让开发者能够更轻松地查看和测试接口。</p></blockquote><p>整合 Knife4j（Swagger-Bootstrap-UI 的升级版）到 Spring Boot 项目中是相对简单的，主要通过引入相关的依赖和配置来实现。</p><h3 id="步骤-1-添加-Maven-依赖"><a href="#步骤-1-添加-Maven-依赖" class="headerlink" title="步骤 1: 添加 Maven 依赖"></a>步骤 1: 添加 Maven 依赖</h3><p>在你的 Spring Boot 项目的 <code>pom.xml</code> 文件中添加 Knife4j 的依赖（<font color='red'>此时不用再次引入swagger的相关依赖，knife4j已经包含了他们</font>)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 替换为最新版本 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="步骤-2-配置-Swagger-相关信息"><a href="#步骤-2-配置-Swagger-相关信息" class="headerlink" title="步骤 2: 配置 Swagger 相关信息"></a>步骤 2: 配置 Swagger 相关信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sims.config;<br><br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig2</span> &#123;<br>    <span class="hljs-comment">// 创建Docket存入容器，Docket代表一个接口文档</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">webApiConfig</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                <span class="hljs-comment">// 创建接口文档的具体信息</span><br>                .apiInfo(webApiInfo())<br>                <span class="hljs-comment">// 创建选择器，控制哪些接口被加入文档</span><br>                .select()<br>                <span class="hljs-comment">// 指定@ApiOperation标注的接口被加入文档</span><br>                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))<br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">// 创建接口文档的具体信息，会显示在接口文档页面中</span><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">webApiInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                <span class="hljs-comment">// 文档标题</span><br>                .title(<span class="hljs-string">&quot;xxxx系统接口文档&quot;</span>)<br>                <span class="hljs-comment">// 文档描述</span><br>                .description(<span class="hljs-string">&quot;本文档描述了xxxx信息管理系统的接口定义&quot;</span>)<br>                <span class="hljs-comment">// 版本</span><br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                <span class="hljs-comment">// 联系人信息</span><br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;程序员小李&quot;</span>, <span class="hljs-string">&quot;http://xxxxx.gitee.io&quot;</span>, <span class="hljs-string">&quot;xxxx@163.com&quot;</span>))<br>                <span class="hljs-comment">// 版权</span><br>                .license(<span class="hljs-string">&quot;&quot;</span>)<br>                <span class="hljs-comment">// 版权地址</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-3-启动-Spring-Boot-应用程序"><a href="#步骤-3-启动-Spring-Boot-应用程序" class="headerlink" title="步骤 3: 启动 Spring Boot 应用程序"></a>步骤 3: 启动 Spring Boot 应用程序</h3><p>一旦你添加了依赖并配置了相关的信息，启动 Spring Boot 应用程序。然后，访问 Knife4j 的 UI 界面，你应该能够看到自动生成的 API 文档。</p><p>Swagger Knife4j 默认的访问路径为 <code>/doc.html</code>，在你的本地服务器地址后面添加这个路径即可访问生成的 API 文档页面。例如：<code>http://localhost:8080/doc.html</code></p><h3 id="步骤3：测试"><a href="#步骤3：测试" class="headerlink" title="步骤3：测试"></a>步骤3：测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/sims&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span> <span class="hljs-comment">//跨域</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;测试接口&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动程序，访问：<a href="http://localhost:{your-port}/doc.htm">http://localhost:{your-port}/doc.htm</a></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231128194303906.png" alt="image-20231128194303906"></p><p>接口信息：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231128194410697.png" alt="image-20231128194410697"></p><p>可以直接向接口发起请求：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231128194452290.png" alt="image-20231128194452290"></p><p>其他类型的接口同理操作。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>确保你的控制器类和方法已经按照 Swagger 的注解规范进行了注解，以便 Knife4j 能够扫描并生成 API 文档。</p><p>一般来说，只需以上几步即可在 Spring Boot 项目中整合 Knife4j 来生成 API 文档，方便查看和测试接口。如果有额外的配置需求或者特定的定制需求，你可以查阅 Knife4j 官方文档或者 GitHub 仓库，了解更多详细的配置方法和定制选项。</p><p><font color='red'>注意</font></p><p><strong>Swagger各版本访问地址:</strong></p><p>2.9.x 访问地址:<br><a href="http://ip:port/{context-path}/swagger-ui.html">http://ip:port/{context-path}/swagger-ui.html</a></p><p>3.0.x 访问地址:<br><a href="http://ip:port/{context-path}/swagger-ui/index.html">http://ip:port/{context-path}/swagger-ui/index.html</a></p><p>3.0集成knife4j 访问地址:<br><a href="http://ip:port/{context-path}/doc.html">http://ip:port/{context-path}/doc.html</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python：正则的贪婪匹配</title>
    <link href="/blog/posts/42245.html"/>
    <url>/blog/posts/42245.html</url>
    
    <content type="html"><![CDATA[<p>贪婪匹配是正则表达式中的一种匹配模式，它尽可能多地匹配输入文本。在贪婪模式下，匹配的字符会尽量多地匹配满足模式要求的部分。</p><p>举个例子来说明：</p><p>假设有一个字符串 <code>text = &quot;abcdefg&quot;</code>，我们想要用正则表达式匹配出 <code>&quot;abc&quot;</code> 和 <code>&quot;def&quot;</code> 之间的内容。</p><p>使用贪婪匹配的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>text = <span class="hljs-string">&quot;abcdefg&quot;</span><br>pattern = <span class="hljs-string">&quot;abc.*def&quot;</span><br><br>result = re.search(pattern, text)<br><span class="hljs-built_in">print</span>(result.group(<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p>这个正则表达式 <code>abc.*def</code> 中的 <code>.*</code> 表示匹配任意字符任意次数（包括零次），直到碰到字符 <code>def</code>。在贪婪模式下，它会尽可能多地匹配字符。因此，整个字符串 <code>&quot;abcdefg&quot;</code> 都满足这个模式，最终的匹配结果是整个字符串 <code>&quot;abcdefg&quot;</code>。</p><p>现在，如果我们想要非贪婪地匹配尽可能少的字符，只匹配到第一个 <code>&quot;def&quot;</code> 前的内容，可以这样改写正则表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pattern = <span class="hljs-string">&quot;abc.*?def&quot;</span><br></code></pre></td></tr></table></figure><p>这个正则表达式 <code>abc.*?def</code> 中的 <code>.*?</code> 表示非贪婪模式下的任意字符匹配。它会在尽可能少地匹配字符的情况下满足模式要求。在这个例子中，结果会是 <code>&quot;abcdef&quot;</code>，因为它匹配了尽可能少的字符来满足模式要求，直到第一个 <code>&quot;def&quot;</code>。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>总结Python中with方法有哪些作用</title>
    <link href="/blog/posts/15300.html"/>
    <url>/blog/posts/15300.html</url>
    
    <content type="html"><![CDATA[<blockquote><p><code>with</code> 语句在 Python 中有多种用途，主要用于创建上下文环境，在进入和离开代码块时执行特定的操作。最常见的用途之一是在文件处理中自动关闭文件，但它还可以用于其他需要资源管理的情况。</p></blockquote><h3 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1. 文件操作"></a>1. 文件操作</h3><p>在文件操作中，使用 <code>with</code> 语句可以确保文件在使用完毕后被正确关闭，无需手动调用 <code>file.close()</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    data = file.read()<br>    <span class="hljs-comment"># 在这里进行文件操作</span><br><br><span class="hljs-comment"># 文件在代码块结束后自动关闭，释放文件资源</span><br></code></pre></td></tr></table></figure><h3 id="2-资源管理"><a href="#2-资源管理" class="headerlink" title="2. 资源管理"></a>2. 资源管理</h3><p><code>with</code> 语句还可以用于管理其他资源，比如<strong>网络连接、数据库连接或者其他需要手动打开和关闭的资源</strong>。这确保了资源在使用完毕后能够被及时释放，避免资源泄漏。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自定义资源</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;初始化&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_val, exc_tb</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;资源清理&#x27;</span>)<br><br><span class="hljs-keyword">with</span> Demo() <span class="hljs-keyword">as</span> demo:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;资源正在使用中&#x27;</span>)<br>    <br><span class="hljs-comment"># 代码结束后，资源会自动被清理</span><br></code></pre></td></tr></table></figure><p><font color='red'>注意</font>：无论代码块是否发生异常，<code>__exit__</code> 方法都会被调用，确保资源得到释放。</p><h3 id="3-上下文管理器"><a href="#3-上下文管理器" class="headerlink" title="3. 上下文管理器"></a>3. 上下文管理器</h3><p><code>with</code> 语句可以与实现了上下文管理器协议（Context Manager Protocol）的对象一起使用。这些对象包含 <code>__enter__</code> 和 <code>__exit__</code> 方法，它们定义了进入和退出上下文环境时的行为。</p><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Timer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        self.start_time = time.time()<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_value, traceback</span>):<br>        self.end_time = time.time()<br>        elapsed_time = self.end_time - self.start_time<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;代码块运行时间: <span class="hljs-subst">&#123;elapsed_time&#125;</span> 秒&quot;</span>)<br><br><span class="hljs-comment"># 使用上下文管理器计算代码块的运行时间</span><br><span class="hljs-keyword">with</span> Timer():<br>    <span class="hljs-comment"># 在这里进行一些耗时的操作</span><br>    time.sleep(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>你也可以自定义一个上下文管理器，使用 <code>with</code> 语句来管理对象的生命周期，确保在进入和离开代码块时执行特定操作。</p><h3 id="4-锁和线程同步"><a href="#4-锁和线程同步" class="headerlink" title="4. 锁和线程同步"></a>4. 锁和线程同步</h3><p>在多线程编程中，<code>with</code> 语句可以用于管理锁或其他线程同步机制。例如，Python 中的 <code>threading.Lock</code> 对象可以通过 <code>with</code> 语句来管理线程间的互斥访问。</p><p>举例如下：</p><p>使用 Python 的 <code>threading</code> 模块创建了两个线程，它们共享一个公共的变量，并使用锁确保对该变量的安全访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-comment"># 公共变量</span><br>shared_variable = <span class="hljs-number">0</span><br>lock = threading.Lock()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">increment</span>():<br>    <span class="hljs-keyword">global</span> shared_variable<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>):<br>        <span class="hljs-keyword">with</span> lock:<br>            shared_variable += <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrement</span>():<br>    <span class="hljs-keyword">global</span> shared_variable<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>):<br>        <span class="hljs-keyword">with</span> lock:<br>            shared_variable -= <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 创建两个线程</span><br>thread1 = threading.Thread(target=increment)<br>thread2 = threading.Thread(target=decrement)<br><br><span class="hljs-comment"># 启动线程</span><br>thread1.start()<br>thread2.start()<br><br><span class="hljs-comment"># 等待线程执行结束</span><br>thread1.join()<br>thread2.join()<br><br><span class="hljs-comment"># 输出最终的共享变量值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;共享变量的值:&quot;</span>, shared_variable)<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>increment()</code> 和 <code>decrement()</code> 函数分别对共享变量进行增加和减少操作。<code>threading.Lock()</code> 创建了一个锁对象，用于确保在修改共享变量时线程间的安全访问。</p><p><code>with lock:</code> 语句块确保每个线程在进入临界区（修改共享变量）之前会先获得锁，在离开临界区之后会自动释放锁。这样就能够确保同一时刻只有一个线程可以修改共享变量，避免了竞态条件（Race Condition）的发生。</p><blockquote><p>总的来说，<code>with</code> 语句提供了一种简洁、可读性强且安全的方式来管理资源，确保资源在合适的时候被正确释放，是 Python 中良好的资源管理工具。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简析range和xrange的区别</title>
    <link href="/blog/posts/25288.html"/>
    <url>/blog/posts/25288.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>在 Python 2 中，存在 <code>range()</code> 和 <code>xrange()</code> 两个函数，但在 Python 3 中，<code>xrange()</code> 已经被移除，只剩下了 <code>range()</code> 函数。</p></blockquote><p>主要区别在于它们返回的对象类型不同：</p><p><code>range()</code> 返回的是一个<font color='red'>列表对象</font>，<font color='red'>它直接生成一个包含指定范围内所有元素的列表</font>。在 Python 2 中，<code>range()</code> 会一次性生成整个列表，并将其存储在内存中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_range = <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(my_range))  <span class="hljs-comment"># 在 Python 2 中直接打印 my_range 也会显示列表,[0, 1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><p><code>xrange()</code> 返回的是一个<font color='red'>生成器对象</font>，<font color='red'>它以一种惰性的方式逐个生成范围内的元素</font>。在 Python 2 中，<code>xrange()</code> 是一个在迭代中逐步产生值的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">my_xrange = xrange(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 在 Python 2 中使用 xrange</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> my_xrange:<br>    <span class="hljs-built_in">print</span>(i)  <br><span class="hljs-comment">#0</span><br><span class="hljs-comment">#1</span><br><span class="hljs-comment">#2</span><br><span class="hljs-comment">#3</span><br><span class="hljs-comment">#4</span><br><span class="hljs-comment">#5</span><br></code></pre></td></tr></table></figure><p>在 Python 3 中，<code>range()</code> 函数类似于 Python 2 中的 <code>xrange()</code>，它返回的也是一个惰性对象。这种改变的目的在于节省内存，特别是当范围非常大的时候，直接生成一个列表可能会占用大量内存，而<font color='limegreen'>惰性对象只在需要时逐个生成值，节省了内存空间</font>。</p><p>因此，<strong>在 Python 3 中，你只需要使用 <code>range()</code></strong> 即可，它返回的是一个惰性对象，可以在循环中逐步生成值，而不需要担心内存占用过大的问题。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中数组中移除元素操作</title>
    <link href="/blog/posts/32018.html"/>
    <url>/blog/posts/32018.html</url>
    
    <content type="html"><![CDATA[<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p><code>zip()</code> 函数是 Python 中一个非常有用的函数，它用于将多个可迭代对象组合成一个元组序列，依次将来自每个可迭代对象的元素打包在一起。</p><p>基本的语法是 <code>zip(iterable1, iterable2, ...)</code>，其中 <code>iterable1, iterable2, ...</code> 是要合并的可迭代对象。</p><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>list2 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br><br><span class="hljs-comment"># 使用zip函数将两个列表合并</span><br>zipped = <span class="hljs-built_in">zip</span>(list1, list2)<br><br><span class="hljs-comment"># 查看合并后的结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(zipped))<br></code></pre></td></tr></table></figure><p>这段代码将会输出：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231125154212811.png" alt="image-20231125154212811"></p><p><code>zip()</code> 函数将两个列表中对应位置的元素依次打包成元组，并将这些元组组合成一个迭代器。需要注意的是，<code>zip()</code> 会以最短的可迭代对象为准，如果有一个可迭代对象比其他的要短，那么 <code>zip()</code> 函数会在最短的可迭代对象耗尽时停止。</p><p><font color='red'><strong>注意</strong></font>：如果你需要以较长的对象为基准进行配对，可以使用<code>itertools.zip_longest()</code>函数。</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>你还可以用 <code>zip()</code> 函数进行解压，将打包的元组序列重新拆分成原始的多个序列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">pairs = [(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;c&#x27;</span>), (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;d&#x27;</span>), (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;e&#x27;</span>)]<br><br><span class="hljs-comment"># 使用zip函数进行解压</span><br>unzipped = <span class="hljs-built_in">zip</span>(*pairs)<br><br><span class="hljs-comment"># 获取解压后的序列</span><br>unzipped_list1, unzipped_list2 = <span class="hljs-built_in">list</span>(unzipped)<br><br><span class="hljs-built_in">print</span>(unzipped_list1) <br><span class="hljs-built_in">print</span>(unzipped_list2)  <br></code></pre></td></tr></table></figure><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231125154323071.png" alt="image-20231125154323071"></p><p>这样就能够将原先合并的元组序列重新分解为原始的列表。</p><h3 id="转置矩阵"><a href="#转置矩阵" class="headerlink" title="转置矩阵"></a>转置矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">matrix = [<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>    [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>]<br><br><span class="hljs-comment"># 使用zip函数转置矩阵</span><br>transposed = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(*matrix))<br><span class="hljs-built_in">print</span>(transposed)<br></code></pre></td></tr></table></figure><p>这个例子中，<code>zip(*matrix)</code>会将原始矩阵转置，将原本行向量的列表转换为列向量的列表。如下：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231125154918330.png" alt="image-20231125154918330"></p><h3 id="字典合并"><a href="#字典合并" class="headerlink" title="字典合并"></a>字典合并</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">keys = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br>values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br><span class="hljs-comment"># 合并字典</span><br>my_dict = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(keys, values))<br><span class="hljs-built_in">print</span>(my_dict)<br></code></pre></td></tr></table></figure><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231125155114172.png" alt="image-20231125155114172"></p><blockquote><p>以上是一些关于zip函数的常用技巧，熟练掌握，有助于我们更巧妙解决开发中的问题和提高效率。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-csv库进行数据保存和读写</title>
    <link href="/blog/posts/20789.html"/>
    <url>/blog/posts/20789.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>在 Python 中使用 CSV 文件非常简单，Python 提供了内置的 <code>csv</code> 模块来处理 CSV 文件。你可以使用 <code>csv</code> 模块来读取、写入和操作 CSV 文件中的数据。</p></blockquote><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">python<br>import csv<br><br><span class="hljs-comment"># 打开 CSV 文件进行读取</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file.csv&#x27;</span>, mode=<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    reader = csv.reader(<span class="hljs-built_in">file</span>)  <span class="hljs-comment"># 创建 CSV 读取器对象</span><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>        print(row)  <span class="hljs-comment"># 逐行打印 CSV 文件中的数据</span><br></code></pre></td></tr></table></figure><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">python<br>import csv<br><br><span class="hljs-comment"># 写入数据到 CSV 文件</span><br>data = [<br>    [<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>, <span class="hljs-string">&#x27;Gender&#x27;</span>],<br>    [<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;Female&#x27;</span>],<br>    [<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Male&#x27;</span>],<br>    [<span class="hljs-string">&#x27;Cathy&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;Female&#x27;</span>]<br>]<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.csv&#x27;</span>, mode=<span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    writer = csv.writer(<span class="hljs-built_in">file</span>)  <span class="hljs-comment"># 创建 CSV 写入器对象</span><br>    writer.writerows(data)  <span class="hljs-comment"># 将数据写入到 CSV 文件</span><br></code></pre></td></tr></table></figure><p>在这两个示例中，首先需要导入 <code>csv</code> 模块。使用 <code>with open()</code> 打开 CSV 文件并指定文件模式（<code>&#39;r&#39;</code> 表示读取，<code>&#39;w&#39;</code> 表示写入）。然后使用 <code>csv.reader()</code> 或 <code>csv.writer()</code> 创建读取器或写入器对象。读取器可以逐行读取 CSV 文件的内容，写入器可以将数据写入到 CSV 文件中。</p><h3 id="其他使用技巧"><a href="#其他使用技巧" class="headerlink" title="其他使用技巧"></a>其他使用技巧</h3><h3 id="1-处理不同格式的分隔符"><a href="#1-处理不同格式的分隔符" class="headerlink" title="1. 处理不同格式的分隔符"></a>1. 处理不同格式的分隔符</h3><p>有时 CSV 文件中的字段可能不是用逗号分隔的，可能会使用其他字符作为分隔符，比如制表符 <code>\t</code>。你可以在读取和写入时指定不同的分隔符。</p><p>读取不同分隔符的 CSV 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用制表符作为分隔符读取 CSV 文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file.tsv&#x27;</span>, mode=<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    reader = csv.reader(file, delimiter=<span class="hljs-string">&#x27;\t&#x27;</span>)  <span class="hljs-comment"># 指定分隔符为制表符</span><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>        <span class="hljs-built_in">print</span>(row)<br></code></pre></td></tr></table></figure><p>写入不同分隔符的 CSV 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用分号作为分隔符写入 CSV 文件</span><br>data = [<br>    [<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>, <span class="hljs-string">&#x27;Gender&#x27;</span>],<br>    [<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;Female&#x27;</span>],<br>    [<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Male&#x27;</span>],<br>    [<span class="hljs-string">&#x27;Cathy&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;Female&#x27;</span>]<br>]<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.csv&#x27;</span>, mode=<span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    writer = csv.writer(file, delimiter=<span class="hljs-string">&#x27;;&#x27;</span>)  <span class="hljs-comment"># 指定分隔符为分号</span><br>    writer.writerows(data)<br></code></pre></td></tr></table></figure><h3 id="2-处理包含引号的数据"><a href="#2-处理包含引号的数据" class="headerlink" title="2. 处理包含引号的数据"></a>2. 处理包含引号的数据</h3><p>有些 CSV 文件中的字段可能包含引号，这时在处理时可能会出现问题。你可以指定引号的处理方式，以便正确读取包含引号的字段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 处理包含引号的数据</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file.csv&#x27;</span>, mode=<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    reader = csv.reader(file, quoting=csv.QUOTE_MINIMAL)  <span class="hljs-comment"># 指定引号处理方式</span><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>        <span class="hljs-built_in">print</span>(row)<br></code></pre></td></tr></table></figure><h3 id="3-处理文件编码"><a href="#3-处理文件编码" class="headerlink" title="3. 处理文件编码"></a>3. 处理文件编码</h3><p>在处理 CSV 文件时，特别是处理非英文字符时，确保指定文件的正确编码方式，以免出现乱码问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 指定文件编码方式</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file.csv&#x27;</span>, mode=<span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    reader = csv.reader(file)<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>        <span class="hljs-built_in">print</span>(row)<br></code></pre></td></tr></table></figure><h3 id="4-考虑使用-DictReader-和-DictWriter"><a href="#4-考虑使用-DictReader-和-DictWriter" class="headerlink" title="4. 考虑使用 DictReader 和 DictWriter"></a>4. 考虑使用 <code>DictReader</code> 和 <code>DictWriter</code></h3><p>除了 <code>csv.reader()</code> 和 <code>csv.writer()</code> 外，<code>csv</code> 模块还提供了 <code>csv.DictReader()</code> 和 <code>csv.DictWriter()</code>，它们可以将每一行数据作为字典进行处理，使用列标题作为字典的键。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用 DictReader 读取 CSV 文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file.csv&#x27;</span>, mode=<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    reader = csv.DictReader(file)<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>        <span class="hljs-built_in">print</span>(row[<span class="hljs-string">&#x27;Name&#x27;</span>], row[<span class="hljs-string">&#x27;Age&#x27;</span>], row[<span class="hljs-string">&#x27;Gender&#x27;</span>])<br>python<br><span class="hljs-comment"># 使用 DictWriter 写入 CSV 文件</span><br>fieldnames = [<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>, <span class="hljs-string">&#x27;Gender&#x27;</span>]<br>data = [<br>    &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;Gender&#x27;</span>: <span class="hljs-string">&#x27;Female&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Gender&#x27;</span>: <span class="hljs-string">&#x27;Male&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Cathy&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;Gender&#x27;</span>: <span class="hljs-string">&#x27;Female&#x27;</span>&#125;<br>]<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.csv&#x27;</span>, mode=<span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    writer = csv.DictWriter(file, fieldnames=fieldnames)<br>    writer.writeheader()<br>    writer.writerows(data)<br></code></pre></td></tr></table></figure><p>这些技巧可以帮助你更好地使用 <code>csv</code> 模块处理不同格式的 CSV 文件，同时避免一些常见的问题，如分隔符问题、引号处理和文件编码等。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>window文件夹下python脚本实现批量删除无法预览的图片</title>
    <link href="/blog/posts/24684.html"/>
    <url>/blog/posts/24684.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>有几种原因可能导致一些图片在预览时无法正常显示：</p></blockquote><ol><li><strong>损坏的图片文件：</strong> 图片文件可能损坏或者部分损坏，导致无法被正常解析和预览。这种情况可能是因为文件在传输过程中损坏、存储介质出现问题或者文件本身存在错误。</li><li><strong>不受支持的图片格式：</strong> 部分图片格式可能不受预览软件或系统所支持，因此无法在普通的图片预览软件中打开或显示。有些特殊的或者较为罕见的图片格式可能会遇到这个问题。</li><li><strong>文件扩展名与实际格式不符：</strong> 有时文件扩展名可能与实际的文件格式不匹配，这可能导致操作系统或预览软件错误地尝试解析该文件。</li><li><strong>图片文件损坏或缺失元数据：</strong> 图片文件损坏或缺少必要的元数据信息，可能导致预览软件无法正确识别或解析图片。</li></ol><blockquote><p>如何实现批量删除无法预览的图片呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_image_valid</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 尝试打开给定路径的图像文件</span><br>        Image.<span class="hljs-built_in">open</span>(file_path)<br>        <span class="hljs-comment"># 如果能够正常打开，表示文件是有效的图片文件，返回 True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> (IOError, SyntaxError):<br>        <span class="hljs-comment"># 如果打开文件时出现 IOError 或 SyntaxError，表示文件不是有效的图片文件，返回 False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_invalid_images</span>(<span class="hljs-params">folder_path</span>):<br>    <span class="hljs-comment"># 遍历指定文件夹中的文件</span><br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(folder_path):<br>        <span class="hljs-comment"># 拼接文件路径</span><br>        file_path = os.path.join(folder_path, filename)<br>        <span class="hljs-comment"># 检查路径是否是文件并且不是有效的图片文件</span><br>        <span class="hljs-keyword">if</span> os.path.isfile(file_path) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> is_image_valid(file_path):<br>            <span class="hljs-comment"># 删除无效的图片文件</span><br>            os.remove(file_path)<br>            <span class="hljs-comment"># 输出被删除的文件路径</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Deleted: <span class="hljs-subst">&#123;file_path&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    folder_path = <span class="hljs-string">r&#x27;G:\pythonProject\图\img&#x27;</span>  <span class="hljs-comment"># 替换成你的图片文件夹路径</span><br>    delete_invalid_images(folder_path)<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231122150654175.png" alt="image-20231122150654175"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中控制台如何展示进度条——tqdm库使用</title>
    <link href="/blog/posts/42398.html"/>
    <url>/blog/posts/42398.html</url>
    
    <content type="html"><![CDATA[<blockquote><p> 在 Python 中可以使用特定的库来创建控制台进度条，其中 <code>tqdm</code> 是一个常用的选择，它能够方便地显示进度条并跟踪迭代的进度。你可以通过 <code>pip</code> 安装 <code>tqdm</code> 库：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install tqdm<br></code></pre></td></tr></table></figure><h3 id="包装迭代器："><a href="#包装迭代器：" class="headerlink" title="包装迭代器："></a><strong>包装迭代器：</strong></h3><p>使用 <code>tqdm</code> 来包装你的迭代器，比如 <code>range()</code> 函数或者列表。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 假设有一个很长的迭代过程</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)):<br>    <span class="hljs-comment"># 在这里执行迭代的任务</span><br>    <span class="hljs-comment"># 这里使用 time.sleep 模拟任务执行的时间</span><br>    time.sleep(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231122152908666.png" alt="image-20231122152908666"></p><h3 id="手动更新进度条："><a href="#手动更新进度条：" class="headerlink" title="手动更新进度条："></a><strong>手动更新进度条：</strong></h3><p>在某些情况下，你可能想手动更新进度条而不是使用迭代器。你可以使用 <code>tqdm.update()</code> 方法来手动更新进度。示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> time<br><br>progress_bar = tqdm(total=<span class="hljs-number">1000</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-comment"># 执行任务</span><br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    progress_bar.update(<span class="hljs-number">10</span>)  <span class="hljs-comment"># 手动更新进度条</span><br>progress_bar.close()<br></code></pre></td></tr></table></figure><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231122152732503.png" alt="image-20231122152732503"></p><h3 id="自定义外观和信息："><a href="#自定义外观和信息：" class="headerlink" title="自定义外观和信息："></a><strong>自定义外观和信息：</strong></h3><p><code>tqdm</code> 允许你自定义进度条的外观和显示信息，比如设置进度条的描述、单位、动画样式等。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>), desc=<span class="hljs-string">&#x27;Processing&#x27;</span>, unit=<span class="hljs-string">&#x27;iterations&#x27;</span>, ncols=<span class="hljs-number">100</span>):<br>    <span class="hljs-comment"># 执行任务</span><br>    time.sleep(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231122152650701.png" alt="image-20231122152650701"></p><h3 id="嵌套进度条："><a href="#嵌套进度条：" class="headerlink" title="嵌套进度条："></a><strong>嵌套进度条：</strong></h3><p>如果你有嵌套的循环或任务，你可以使用 <code>tqdm</code> 的嵌套方式来显示多个进度条。示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> time<br><br>outer = tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>), desc=<span class="hljs-string">&#x27;Outer&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> outer:<br>    inner = tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>), desc=<span class="hljs-string">&#x27;Inner&#x27;</span>, leave=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 内部循环不会覆盖外部进度条</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> inner:<br>        <span class="hljs-comment"># 执行任务</span><br>        time.sleep(<span class="hljs-number">0.1</span>)<br>        inner.set_description(<span class="hljs-string">f&#x27;Inner: <span class="hljs-subst">&#123;j&#125;</span>&#x27;</span>, refresh=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 更新内部进度条的描述信息</span><br>    inner.close()<br>    outer.update(<span class="hljs-number">1</span>)<br>outer.close()<br></code></pre></td></tr></table></figure><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231122152607736.png" alt="image-20231122152607736"></p><h3 id="暂停和恢复："><a href="#暂停和恢复：" class="headerlink" title="暂停和恢复："></a><strong>暂停和恢复：</strong></h3><p><code>tqdm</code> 也允许你暂停和恢复进度条的更新。你可以使用 <code>tqdm.pause()</code> 和 <code>tqdm.resume()</code> 方法来暂停和恢复更新。示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> time<br><br>progress_bar = tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">25</span>:<br>        progress_bar.pause()  <span class="hljs-comment"># 暂停更新</span><br>        time.sleep(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 模拟一些耗时操作</span><br>        progress_bar.resume()  <span class="hljs-comment"># 恢复更新</span><br>    progress_bar.update(<span class="hljs-number">1</span>)<br>progress_bar.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中数组中移除元素操作</title>
    <link href="/blog/posts/32017.html"/>
    <url>/blog/posts/32017.html</url>
    
    <content type="html"><![CDATA[<h2 id="在-Python-中，有多种方式可以去除数组（列表）中的第一个元素。以下是其中几种方法："><a href="#在-Python-中，有多种方式可以去除数组（列表）中的第一个元素。以下是其中几种方法：" class="headerlink" title="在 Python 中，有多种方式可以去除数组（列表）中的第一个元素。以下是其中几种方法："></a>在 Python 中，有多种方式可以去除数组（列表）中的第一个元素。以下是其中几种方法：</h2><blockquote><p> 使用切片。你可以使用切片来获取从第二个元素开始到末尾的所有元素。例如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>my_list = my_list[<span class="hljs-number">1</span>:]  <span class="hljs-comment"># 去除第一个元素</span><br><span class="hljs-built_in">print</span>(my_list)        <span class="hljs-comment"># 输出 [2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><blockquote><p> 使用 <code>del</code> 语句。你可以使用 <code>del</code> 语句来删除指定索引位置上的元素。例如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">del</span> my_list[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 删除第一个元素</span><br><span class="hljs-built_in">print</span>(my_list)  <span class="hljs-comment"># 输出 [2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><blockquote><p>使用 <code>pop()</code> 方法。你可以使用 <code>pop()</code> 方法来删除指定索引位置上的元素，并返回被删除的元素。例如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>my_list.pop(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 删除第一个元素</span><br><span class="hljs-built_in">print</span>(my_list)  <span class="hljs-comment"># 输出 [2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><blockquote><p>需要注意的是，以上方法都会改变原始数组（列表），如果你需要保留原始数组，可以先将其复制一份再进行操作。例如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>new_list = my_list[<span class="hljs-number">1</span>:]  <span class="hljs-comment"># 复制一份并去除第一个元素</span><br><span class="hljs-built_in">print</span>(new_list)         <span class="hljs-comment"># 输出 [2, 3, 4, 5]</span><br><span class="hljs-built_in">print</span>(my_list)          <span class="hljs-comment"># 原始数组 [1, 2, 3, 4, 5] 未改变</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习录</title>
    <link href="/blog/posts/8084.html"/>
    <url>/blog/posts/8084.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>Git常用指令汇总：</p></blockquote><h4 id="Git是什么？"><a href="#Git是什么？" class="headerlink" title="Git是什么？"></a>Git是什么？</h4><p><font color='orange'>分布式版本控制系统</font></p><p>原理图：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20231115144225416.png" alt="image-20231115144225416"></p><h4 id="SVN与Git区别？"><a href="#SVN与Git区别？" class="headerlink" title="SVN与Git区别？"></a>SVN与Git区别？</h4><ul><li><p>SVN：<font color='cornflowerblue'>集中式</font>版本控制系统，版本库集中在服务器，需要<font color='cornflowerblue'>联网</font>，在工作需要的时候先从中央服务器获取最新版本，做完操作在推送到中央服务器。</p><p>  示意图：</p><p>  <img src="http://cdn.qiniu.liyansheng.top/typora/image-20231115144243440.png" alt="image-20231115144243440"></p></li><li><p>Git：<font color='cornflowerblue'>分布式</font>版本控制系统，没有中央服务器，<font color='cornflowerblue'>每个人电脑都是完整的版本库</font>。在工作时将各自的修改<font color='cornflowerblue'>推送</font>给对方，就能互相看到对方的修改。</p></li></ul><h4 id="版本库创建？"><a href="#版本库创建？" class="headerlink" title="版本库创建？"></a>版本库创建？</h4><p>将当前目录变成版本库，使用指令<font color='orange'> git init </font>后，可以看到当前目录生成一个.git文件夹，这说明当前目录的所有文件将被git管理起来</p><h4 id="常用指令？"><a href="#常用指令？" class="headerlink" title="常用指令？"></a>常用指令？</h4><ul><li><p><font color='orange'>git config –list</font> 查看全部配置信息</p></li><li><p><font color='orange'>git config  [配置信息名]</font>：显示具体配置信息，如我要查看是user.name，直接输入命令git config user.name即可</p></li><li><p><font color='orange'>git help [指令名]：</font>获取该命令的用法相关帮助</p></li><li><p><font color='orange'>git status</font>：查看当天版本库的状态，可以看到当前版本库变化情况，即版本库内的每个文件的修改，删除都能跟踪到</p></li><li><p><font color='orange'>git add [文件]</font>：将指定文件添加暂存区</p></li><li><p><font color='orange'>git commit -m [提交说明]</font>：将暂存区的文件提交到本地仓库</p></li><li><p><font color='orange'>git diff [文件]</font>：查看文件哪些地方修改了</p></li><li><p><font color='orange'>git log</font>：查看提交的历史记录日志</p></li><li><p><font color='orange'>git reset –hard HEAD^：</font>版本回退，符号”^”表示回到上一个版本，回到上上个版本，用命令HEAD^^,依次类推，回退几个版本就看“^”符号的数量，如果数量多，可以用简写HEAD<del>n代替，例如回退前50版本，则git reset –hard HEAD</del>50。<font color='cornflowerblue'>注意:</font>版本回退后，原先的修改就没有了</p></li><li><p><font color='orange'>git reflog</font>：查看版本号</p></li><li><p><font color='orange'>git reset –hard [版本号]：</font>回退到指定【版本号】的版本</p></li><li><p><font color='orange'>git chackout – [文件名]</font>：丢弃文件工作区的修改</p></li><li><p><font color='orange'>git restore [文件]</font>：丢弃文件在工作区的修改</p></li><li><p><font color='orange'>git remote add origin [远程仓库地址]</font>：添加一个远程仓库地址</p></li><li><p><font color='orange'>git push -u origin  master</font>：将本地仓库分支master推送到源仓库去</p></li><li><p><font color='orange'>git clone  [远程仓库地址]：</font>克隆一个本地库</p></li><li><p><font color='orange'>git branch</font>：查看当前的分支</p></li><li><p><font color='orange'>git checkout -b [分支名]</font>：创建一个分支并切换到该分支</p></li><li><p><font color='orange'>git checkout [分支名]：</font>切换分支</p></li><li><p><font color='orange'>git branch [分支名]：</font>创建分支</p></li><li><p><font color='orange'>git merge [分支名]：</font>将分支和并到当前分支上</p></li><li><p><font color='orange'>git branch -d [分支名]</font>：删除分支</p></li><li><p><font color='orange'>git remote -v：</font>查看远程库的信息</p></li><li><p><font color='orange'>git checkout -b [分支] origin&#x2F;[分支]：</font>创建远程origin的dev分支到本地来</p></li><li><p><font color='orange'>git pull：</font>把最新的提交抓取下来</p></li><li><p><font color='orange'>git fetch [远程仓库名]</font>：抓取最新的数据</p></li></ul><hr><p>未完待续，详细可以参考官方文档呢</p>]]></content>
    
    
    <categories>
      
      <category>工具神器集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大学期间工具利器</title>
    <link href="/blog/posts/55643.html"/>
    <url>/blog/posts/55643.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>已经拿到毕业证几天了，这几天在整理大学的资源。下面汇总一些我收藏的宝贝利器在线工具，个个都杠杠的，用起来真是有如神助也。感兴趣的伙伴快来围观一下吧，收藏以备用哦！！！</p></blockquote><h2 id="Intellij-IDEA正版专属激活码领取"><a href="#Intellij-IDEA正版专属激活码领取" class="headerlink" title="Intellij IDEA正版专属激活码领取"></a>Intellij IDEA正版专属激活码领取</h2><p>❤IDEA兼职开发神器，但是要收费，可以参考以下方案免费破姐，地址如下👇</p><p><a href="https://idea.medeming.com/idea">https://idea.medeming.com/idea</a></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702115221970.png"></p><h2 id="maven仓库"><a href="#maven仓库" class="headerlink" title="maven仓库"></a>maven仓库</h2><p>❤所有的jar包，各种版本，依赖包坐标你都可以在这里找到呢！  地址如下👇</p><p><strong><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702121904520.png"></p><h2 id="牛人乐谱"><a href="#牛人乐谱" class="headerlink" title="牛人乐谱"></a>牛人乐谱</h2><p>❤如果你喜欢乐器演奏，那么下面这个网站是你的绝佳之选，它有海量曲谱，再也不用到处到曲谱了。地址如下👇</p><p><strong><a href="https://www.yoga-8.com/">https://www.yoga-8.com/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702191938920.png"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702191957642.png"></p><h2 id="自由钢琴"><a href="#自由钢琴" class="headerlink" title="自由钢琴"></a>自由钢琴</h2><p>❤这是一个在线的钢琴模拟演奏，有多重音色，还能搜出相应的曲谱，边看边演奏。地址如下👇</p><p><strong><a href="https://www.autopiano.cn/">https://www.autopiano.cn/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702192034976.png"></p><h2 id="阿里图标库"><a href="#阿里图标库" class="headerlink" title="阿里图标库"></a>阿里图标库</h2><p>❤iconfont-国内功能很强大且<em>图标</em>内容很丰富的矢量<em>图标</em>库,提供矢量<em>图标</em>下载、在线存储、格式转换等功能。</p><p>地址如下👇</p><p><strong><a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702193243725.png"></p><h2 id="表情包制作工具"><a href="#表情包制作工具" class="headerlink" title="表情包制作工具"></a>表情包制作工具</h2><p>❤地址如下👇</p><p><strong><a href="https://www.wakatool.com/maker">https://www.wakatool.com/maker</a></strong></p><p><img src="C:\Users\胜胜\AppData\Roaming\Typora\typora-user-images\image-20220702194409376.png"></p><h2 id="在线抠图去背景（免费）"><a href="#在线抠图去背景（免费）" class="headerlink" title="在线抠图去背景（免费）"></a>在线抠图去背景（免费）</h2><p>❤在线快速抠图去除背景。地址如下👇</p><p><strong><a href="https://www.remove.bg/zh">https://www.remove.bg/zh</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702195345618.png"></p><h2 id="在线流程图制作"><a href="#在线流程图制作" class="headerlink" title="在线流程图制作"></a>在线流程图制作</h2><p>❤专业强大的作图工具，支持多人实时在线协作，可用于原型图、UML、BPMN、网络拓扑图等多种图形绘制。</p><p>地址如下👇</p><p><strong><a href="https://www.processon.com/">https://www.processon.com</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702195932294.png"></p><h2 id="工具聚合网站1"><a href="#工具聚合网站1" class="headerlink" title="工具聚合网站1"></a>工具聚合网站1</h2><p>❤各种工具整理收藏，很齐全。地址如下👇</p><p><strong><a href="http://www.bewindoweb.com/dwg.php">http://www.bewindoweb.com/dwg.php</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702200851538.png"></p><h2 id="在线改图宝"><a href="#在线改图宝" class="headerlink" title="在线改图宝"></a>在线改图宝</h2><p>❤支持在线修改图片，添加水印，分辨率修改等等。</p><p>地址如下👇</p><p><strong><a href="https://www.gaitubao.com/">https://www.gaitubao.com/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702201509121.png"></p><h2 id="代码转图片"><a href="#代码转图片" class="headerlink" title="代码转图片"></a>代码转图片</h2><p>❤创建和分享源代码的美丽图像。</p><p>地址如下👇</p><p><strong><a href="https://carbon.now.sh/">https://carbon.now.sh/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702201923402.png"></p><h2 id="在线工具聚合2"><a href="#在线工具聚合2" class="headerlink" title="在线工具聚合2"></a>在线工具聚合2</h2><p>❤分类整理清晰，工具多多。地址如下👇</p><p><strong><a href="https://tool.lu/">https://tool.lu/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702202111623.png"></p><h2 id="精品网站模板库"><a href="#精品网站模板库" class="headerlink" title="精品网站模板库"></a>精品网站模板库</h2><p>❤各种样式与用途的网站模板，可以直接二次开发。地址如下👇</p><p><strong><a href="http://www.baisheng999.com/">http://www.baisheng999.com/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220702205247802.png"></p><h2 id="在线工具聚合3"><a href="#在线工具聚合3" class="headerlink" title="在线工具聚合3"></a>在线工具聚合3</h2><p>❤收录全网在线工具的导航站，值得收藏，用到的时候太方便了。</p><p>地址如下👇</p><p><strong><a href="https://jingzhunyun.com/">https://jingzhunyun.com/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220703205140920.png"></p><h2 id="在线工具聚合4"><a href="#在线工具聚合4" class="headerlink" title="在线工具聚合4"></a>在线工具聚合4</h2><p>❤一个很有范的工具合集。</p><p>地址如下👇</p><p><strong><a href="https://www.amp360.net/">https://www.amp360.net/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220703205419467.png"></p><h2 id="PDF在线处理"><a href="#PDF在线处理" class="headerlink" title="PDF在线处理"></a>PDF在线处理</h2><p>❤iLovePDF | 为PDF爱好者提供的PDF文件在线处理工具。地址如下👇</p><p><strong><a href="https://www.ilovepdf.com/zh-cn">https://www.ilovepdf.com/zh-cn</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220703211553644.png"></p><h2 id="程序员大礼包"><a href="#程序员大礼包" class="headerlink" title="程序员大礼包"></a>程序员大礼包</h2><p>❤精心为程序员精选了68款常用软件，覆盖整个生产周期帮你节约寻找软件的时间，让你有更多的时间陪伴家人、朋友。</p><p>地址如下👇</p><p><strong><a href="https://www.programmer-box.com/">https://www.programmer-box.com/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220703213623512.png"></p><h2 id="百度网盘在线解析"><a href="#百度网盘在线解析" class="headerlink" title="百度网盘在线解析"></a>百度网盘在线解析</h2><p>❤网盘文件加速下载，再也不怕限速了。地址如下👇</p><p><strong><a href="https://baidu.kinh.cc/?Type=LinkParse">https://baidu.kinh.cc/?Type=LinkParse</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220703215330674.png"></p><h2 id="程序员导航"><a href="#程序员导航" class="headerlink" title="程序员导航"></a>程序员导航</h2><p>❤程序员一站式导航。         地址如下👇</p><p><strong><a href="http://cxy521.com/">http://cxy521.com/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220703215722183.png"></p><h2 id="Java全栈知识体系"><a href="#Java全栈知识体系" class="headerlink" title="Java全栈知识体系"></a>Java全栈知识体系</h2><p>❤地址如下👇</p><p><strong><a href="https://pdai.tech/">https://pdai.tech/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220703220627468.png"></p><h2 id="墨滴文档编辑"><a href="#墨滴文档编辑" class="headerlink" title="墨滴文档编辑"></a>墨滴文档编辑</h2><p>❤支持自定义样式的 Markdown 编辑器；支持微信公众号、知乎和稀土掘金；</p><p>地址如下👇</p><p><strong><a href="https://editor.mdnice.com/">https://editor.mdnice.com/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220703220828465.png"></p><h2 id="免费正版高清图片素材库"><a href="#免费正版高清图片素材库" class="headerlink" title="免费正版高清图片素材库"></a>免费正版高清图片素材库</h2><p>❤Pixabay拥有超过2.6百万张优质图片和视频素材，让你轻松应对各种设计场景。</p><p>地址如下👇</p><p><strong><a href="https://pixabay.com/zh/">https://pixabay.com/zh/</a></strong></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220703221917423.png"></p><blockquote><p>本期分享到这，咱下期见！！！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工具神器集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot获取配置变量</title>
    <link href="/blog/posts/6631.html"/>
    <url>/blog/posts/6631.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>当在Spring Boot中需要绑定配置文件中的变量时，可以使用以下注解：</p></blockquote><ul><li>@PropertySource：用于指定要加载的属性文件。可以将该注解放置在@Configuration类上。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:application.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>@Value：用于将属性值注入到Spring Bean中的字段或方法参数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;my.property&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String myProperty;<br><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，通过@Value注解将名为”my.property”的属性值注入到myProperty字段中。</p><ul><li>@Environment：与@Value注解类似，也用于获取配置属性的值。不同的是，@Environment注解提供了更多的灵活性和功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Environment environment;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">myProperty</span> <span class="hljs-operator">=</span> environment.getProperty(<span class="hljs-string">&quot;my.property&quot;</span>);<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，通过@Autowired注解将Environment对象自动注入到MyComponent类中，并可以使用getProperty方法获取配置属性的值。</p><ul><li>@ConfigurationProperties：用于将一组相关的配置属性绑定到一个Java类上。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;my&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProperties</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String property1;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> property2;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// getters and setters</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，通过@ConfigurationProperties注解将以”my”开头的配置属性绑定到MyProperties类中的对应字段。例如，”my.property1”将被绑定到property1字段，”my.property2”将被绑定到property2字段。</p><p>需要确保在使用@ConfigurationProperties注解的类上添加@Component或@Configuration注解，以确保它们被正确加载和注入。</p><p>这些注解可以灵活地帮助我们在Spring Boot应用程序中绑定配置属性，使得我们能够轻松地获取和使用配置值。</p><p>@comp</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂模式</title>
    <link href="/blog/factory/"/>
    <url>/blog/factory/</url>
    
    <content type="html"><![CDATA[<p>设计模式之工厂模式讲解与案例<br><img src="http://cdn.qiniu.liyansheng.top/img/factory.jpg"></p><blockquote><p>工厂模式是一种创建对象的设计模式，它通过提供一个统一的接口来创建对象，隐藏了具体对象的实例化过程。Java中的工厂模式有多种实现方式，下面我将举两个常见的例子。</p></blockquote><ol><li>简单工厂模式（Simple Factory Pattern）： 简单工厂模式<strong>通过一个工厂类来创建对象，根据不同的参数类型返回相应的实例</strong>。这种方式适用于创建的对象较少且不会频繁修改的情况。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象产品接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">use</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体产品类A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProductA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">use</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;使用产品A&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体产品类B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProductB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">use</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;使用产品B&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 简单工厂类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Product <span class="hljs-title function_">createProduct</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;A&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProductA</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;B&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProductB</span>();<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unsupported product type.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用工厂创建产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">productA</span> <span class="hljs-operator">=</span> SimpleFactory.createProduct(<span class="hljs-string">&quot;A&quot;</span>);<br>        productA.use();  <span class="hljs-comment">// 输出：使用产品A</span><br><br>        <span class="hljs-type">Product</span> <span class="hljs-variable">productB</span> <span class="hljs-operator">=</span> SimpleFactory.createProduct(<span class="hljs-string">&quot;B&quot;</span>);<br>        productB.use();  <span class="hljs-comment">// 输出：使用产品B</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>工厂方法模式（Factory Method Pattern）： 工厂方法模式<strong>将对象的创建交给子类来实现</strong>，每个子类负责创建一种具体的产品。这种方式适用于需要创建多种具体产品的情况。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 抽象产品接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">use</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体产品类A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProductA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">use</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;使用产品A&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体产品类B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProductB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">use</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;使用产品B&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象工厂类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Product <span class="hljs-title function_">createProduct</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂类A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactoryA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">createProduct</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProductA</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂类B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactoryB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">createProduct</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProductB</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用工厂创建产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Factory</span> <span class="hljs-variable">factoryA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteFactoryA</span>();<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">productA</span> <span class="hljs-operator">=</span> factoryA.createProduct();<br>        productA.use();  <span class="hljs-comment">// 输出：使用产品A</span><br><br>        <span class="hljs-type">Factory</span> <span class="hljs-variable">factoryB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteFactoryB</span>();<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">productB</span> <span class="hljs-operator">=</span> factoryB.createProduct();<br>        productB.use();  <span class="hljs-comment">// 输出：使用产品B</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>上面两种方式有什么不同</p></blockquote><p>简单工厂模式和工厂方法模式的主要区别在于<strong>创建对象的方式</strong>不同。</p><p>简单工厂模式通过一个工厂类来创建对象，客户端<strong>只需要知道所需产品的类型</strong>即可获得该产品的实例，具有较高的简洁性。但是它的缺点是工厂类中包含了所有产品的实现逻辑，当新增加产品时需要修改工厂类的代码，违背了<strong>开闭原则</strong>。</p><p>工厂方法模式将创建对象的行为交给了子类来实现，<strong>每个具体工厂类只负责创建一种具体产品</strong>，更符合开闭原则。但是它的缺点是需要为每个产品都创建一个对应的具体工厂类，增加了类的数量，复杂度较高。</p><p>因此，在使用工厂模式时，需要根据实际情况选择相应的实现方式。如果产品的种类较少且不会频繁变化，可以考虑使用简单工厂模式；如果产品的种类较多且会经常变化，可以选择工厂方法模式。</p><!-- flag of hidden posts -->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA社区版搭建jsp项目</title>
    <link href="/blog/idea_build_jsp/"/>
    <url>/blog/idea_build_jsp/</url>
    
    <content type="html"><![CDATA[<blockquote><p>近期调试jsp类的web项目较多，本期带大家回顾一下该类项目的搭建与启动，完成一个简单的demo案例！</p></blockquote><h2 id="1、搭建步骤"><a href="#1、搭建步骤" class="headerlink" title="1、搭建步骤"></a>1、搭建步骤</h2><p>注：本次的工具是IDEA的社区版</p><h3 id="1-1、模板选择"><a href="#1-1、模板选择" class="headerlink" title="1.1、模板选择"></a>1.1、模板选择</h3><p>创建maven项目，选择webapp模板</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230611232658492.png"></p><p>以下是一个简单的示例，用于在 JSP 页面上实现增删改查操作。</p><h3 id="1-2、数据库创建"><a href="#1-2、数据库创建" class="headerlink" title="1.2、数据库创建"></a>1.2、数据库创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> person (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    age <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><h3 id="1-3、创建-Java-类"><a href="#1-3、创建-Java-类" class="headerlink" title="1.3、创建 Java 类"></a>1.3、创建 Java 类</h3><p>创建一个 Java 类，用于处理与数据库的交互</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lys.dao;<br><br><span class="hljs-keyword">import</span> com.lys.model.Person;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonDao</span> &#123;<br>    <span class="hljs-keyword">private</span> Connection connection;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PersonDao</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            connection = DriverManager.getConnection(<br>              <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/demo&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> List&lt;Person&gt; <span class="hljs-title function_">getAllPersons</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        List&lt;Person&gt; persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(<span class="hljs-string">&quot;SELECT * FROM person&quot;</span>);<br>        <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>            person.setId(resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>            person.setName(resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>));<br>            person.setAge(resultSet.getInt(<span class="hljs-string">&quot;age&quot;</span>));<br>            persons.add(person);<br>        &#125;<br>        <span class="hljs-keyword">return</span> persons;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">getPersonById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span><br>                connection.prepareStatement(<span class="hljs-string">&quot;SELECT * FROM person WHERE id = ?&quot;</span>);<br>        statement.setInt(<span class="hljs-number">1</span>, id);<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery();<br>        <span class="hljs-keyword">if</span> (resultSet.next()) &#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>            person.setId(resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>            person.setName(resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>));<br>            person.setAge(resultSet.getInt(<span class="hljs-string">&quot;age&quot;</span>));<br>            <span class="hljs-keyword">return</span> person;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPerson</span><span class="hljs-params">(Person person)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span><br>                connection.prepareStatement(<span class="hljs-string">&quot;INSERT INTO person (name, age) VALUES (?, ?)&quot;</span>);<br>        statement.setString(<span class="hljs-number">1</span>, person.getName());<br>        statement.setInt(<span class="hljs-number">2</span>, person.getAge());<br>        statement.executeUpdate();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePerson</span><span class="hljs-params">(Person person)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span><br>                connection.prepareStatement(<span class="hljs-string">&quot;UPDATE person SET name = ?, age = ? WHERE id = ?&quot;</span>);<br>        statement.setString(<span class="hljs-number">1</span>, person.getName());<br>        statement.setInt(<span class="hljs-number">2</span>, person.getAge());<br>        statement.setInt(<span class="hljs-number">3</span>, person.getId());<br>        statement.executeUpdate();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deletePersonById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span><br>                connection.prepareStatement(<span class="hljs-string">&quot;DELETE FROM person WHERE id = ?&quot;</span>);<br>        statement.setInt(<span class="hljs-number">1</span>, id);<br>        statement.executeUpdate();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>person类，表示一个人的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">// 构造方法和 get/set 方法省略</span><br>    <br>    <span class="hljs-comment">// 获取人的信息</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span> + name + <span class="hljs-string">&quot;，年龄：&quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4、编写-JSP-页面"><a href="#1-4、编写-JSP-页面" class="headerlink" title="1.4、编写 JSP 页面"></a>1.4、编写 JSP 页面</h3><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.lys.dao.PersonDao&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.lys.model.Person&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Person Management&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Person Management&lt;/h1&gt;<br><br>    &lt;%-- 显示所有人的信息 --%&gt;<br>    &lt;h2&gt;All Persons:&lt;/h2&gt;<br>    &lt;table border=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>        &lt;tr&gt;<br>            &lt;th&gt;ID&lt;/th&gt;<br>            &lt;th&gt;Name&lt;/th&gt;<br>            &lt;th&gt;Age&lt;/th&gt;<br>            &lt;th&gt;Action&lt;/th&gt;<br>        &lt;/tr&gt;<br>        &lt;%<br>            <span class="hljs-type">PersonDao</span> <span class="hljs-variable">dao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonDao</span>();<br>            <span class="hljs-keyword">for</span> (Person person : dao.getAllPersons()) &#123;<br>        %&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;&lt;%=person.getId()%&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;%=person.getName()%&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;%=person.getAge()%&gt;&lt;/td&gt;<br>            &lt;td&gt;<br>                &lt;a href=<span class="hljs-string">&quot;edit.jsp?id=&lt;%=person.getId()%&gt;&quot;</span>&gt;Edit&lt;/a&gt;<br>                &lt;a href=<span class="hljs-string">&quot;delete.jsp?id=&lt;%=person.getId()%&gt;&quot;</span>&gt;Delete&lt;/a&gt;<br>            &lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;% &#125; %&gt;<br>    &lt;/table&gt;<br><br>    &lt;%-- 添加新的人员信息 --%&gt;<br>    &lt;h2&gt;Add New Person:&lt;/h2&gt;<br>    &lt;form method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;add.jsp&quot;</span>&gt;<br>        Name: &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;br&gt;<br>        Age: &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;age&quot;</span>&gt;&lt;br&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Add&quot;</span>&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.lys.dao.PersonDao&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.lys.model.Person&quot;</span> %&gt;<br>&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Add Person&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Add Person&lt;/h1&gt;<br><br>    &lt;%-- 从表单中获取新的人员信息，并写入数据库 --%&gt;<br>    &lt;%<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> Integer.parseInt(request.getParameter(<span class="hljs-string">&quot;age&quot;</span>));<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setName(name);<br>        person.setAge(age);<br>        <span class="hljs-type">PersonDao</span> <span class="hljs-variable">dao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonDao</span>();<br>        dao.addPerson(person);<br>    %&gt;<br><br>    &lt;%-- 显示添加成功消息，并返回所有人员信息页面 --%&gt;<br>    &lt;hr&gt;<br>    &lt;p&gt;添加成功！&lt;/p&gt;<br>    &lt;a href=<span class="hljs-string">&quot;index.jsp&quot;</span>&gt;Back&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.lys.dao.PersonDao&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.lys.model.Person&quot;</span> %&gt;<br>&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Delete Person&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Delete Person&lt;/h1&gt;<br><br>    &lt;%-- 从请求参数中获取要删除的人员 ID，并从数据库中删除该人员信息 --%&gt;<br>    &lt;%<br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> Integer.parseInt(request.getParameter(<span class="hljs-string">&quot;id&quot;</span>));<br>        <span class="hljs-type">PersonDao</span> <span class="hljs-variable">dao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonDao</span>();<br>        dao.deletePersonById(id);<br>    %&gt;<br><br>    &lt;%-- 显示删除成功消息，并返回所有人员信息页面 --%&gt;<br>    &lt;hr&gt;<br>    &lt;p&gt;删除成功！&lt;/p&gt;<br>    &lt;a href=<span class="hljs-string">&quot;index.jsp&quot;</span>&gt;Back&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.lys.dao.PersonDao&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.lys.model.Person&quot;</span> %&gt;<br>&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Update Person&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Update Person&lt;/h1&gt;<br><br>    &lt;%-- 从表单中获取要更新的人员信息，并写入数据库 --%&gt;<br>    &lt;%<br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> Integer.parseInt(request.getParameter(<span class="hljs-string">&quot;id&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> Integer.parseInt(request.getParameter(<span class="hljs-string">&quot;age&quot;</span>));<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setId(id);<br>        person.setName(name);<br>        person.setAge(age);<br>        <span class="hljs-type">PersonDao</span> <span class="hljs-variable">dao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonDao</span>();<br>        dao.updatePerson(person);<br>    %&gt;<br><br>    &lt;%-- 显示更新成功消息，并返回所有人员信息页面 --%&gt;<br>    &lt;hr&gt;<br>    &lt;p&gt;更新成功！&lt;/p&gt;<br>    &lt;a href=<span class="hljs-string">&quot;index.jsp&quot;</span>&gt;Back&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="2、部署启动"><a href="#2、部署启动" class="headerlink" title="2、部署启动"></a>2、部署启动</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230611234016428.png"></p><p>成功启动后，访问该路径即可看到页面</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230611234115413.png"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230611233519139.png"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230611233548736.png"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230611233457095.png"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230611233438814.png"></p><h2 id="3、存在问题"><a href="#3、存在问题" class="headerlink" title="3、存在问题"></a>3、存在问题</h2><p>页面乱码</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230611231657661.png"></p><blockquote><p>在 JSP 页面中设置字符集编码为 UTF-8，这样浏览器就能正确识别和显示该编码下的汉字了。在 JSP 的头部添加以下代码即可：</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>校园帮一手服务系统</title>
    <link href="/blog/campus_help/"/>
    <url>/blog/campus_help/</url>
    
    <content type="html"><![CDATA[<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>帮你一手 - 大学生互相帮助平台</p><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><blockquote><p>校园帮即时服务网站是一个面向大学生的任务发布与接受平台，学生们可以在该平台上发布各种任务，并设置相应的佣金。其他学生可以通过浏览该平台上的任务列表来选择感兴趣的任务，并提交自己的任务完成方案。当任务完成后，发布者会进行审核并确认任务是否完成，如确认无误则支付佣金给完成者。该平台的服务范围包括但不限于课程辅导、文档制作、软件开发等，旨在为学生之间互相提供便捷的协助机会，同时也促进了学生之间的交流与分享。</p></blockquote><h2 id="环境推荐"><a href="#环境推荐" class="headerlink" title="环境推荐"></a>环境推荐</h2><ul><li>IDEA社区版</li><li>Tomcat9</li><li>JDK8</li><li>MySQL8</li></ul><h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607204809538.png" alt="image-20230607204809538"></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>首页</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608135624580.png" alt="image-20230608135624580"></p><p>注册中心</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608135659620.png" alt="image-20230608135659620"></p><p>登录验证</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608135718288.png" alt="image-20230608135718288"></p><p>发布任务</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608135758340.png" alt="image-20230608135758340"></p><p>发布任务</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608135814390.png" alt="image-20230608135814390"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608140004108.png" alt="image-20230608140004108"></p><p>个人信息</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608135940999.png" alt="image-20230608135940999"></p><p>密码修改</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608135846155.png" alt="image-20230608135846155"></p><p>任务一览</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608135829153.png"></p><p>接受任务去执行</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608140122217.png" alt="image-20230608140122217"></p><h3 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h3><p>院校管理</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608140257442.png" alt="image-20230608140257442"></p><p>任务管理</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608141320299.png" alt="image-20230608141320299"></p><p>用户管理</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608141333981.png" alt="image-20230608141333981"></p><p>新增管理员</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608141357064.png" alt="image-20230608141357064"></p><h2 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230608142613016.png" alt="image-20230608142613016"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>代码仓库地址：<a href="https://gitee.com/yan-sheng-li/campus-gang">https://gitee.com/yan-sheng-li/campus-gang</a></p><h2 id="点我请求-远程协助调试"><a href="#点我请求-远程协助调试" class="headerlink" title="点我请求-远程协助调试"></a><a href="http://liyansheng.top/remote_help/">点我请求-远程协助调试</a></h2>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大数据模拟场景-大作业</title>
    <link href="/blog/posts/59967.html"/>
    <url>/blog/posts/59967.html</url>
    
    <content type="html"><![CDATA[<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>大数据模拟场景</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>3秒产生一个区块，一个区块奖金为 10</p><h2 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h2><p>有2个公司a公司100个部门A公司份额为 0.5，100个部门平分这个0.5.平分后的数字，每个部门老大拿 20%，其他由剩余员工拿，员工按照业绩来计算份额，每个月业绩为3600000，根据员工每个月贡献算出比例后计算奖金 (可设置n个员工，不同比例)</p><p>B公司10000个部门B公司份额为0.5，10000个部门平分这个9.5平分后的数字，每个部门老大拿 20%，其他由剩余员工拿，员工按照业绩来计算份额，每个月业绩为900000，根据员工每个月贡献算出比例后计算奖金(可设置n个员工，不同比例)上面算出来每个人奖金，<br>奖金有释放制度，<br>每个区块的奖金需要180天来释放完，<br>这个奖金的释放是新增一个区块就会释放一次,<br>就是说3秒释放一次，180天释放完成<br>需要使用 python来模拟这种场景，可手动增加区块，查看每个人的释放金额和未释放金额，可调整员工比例来查看数额是否正确</p><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-comment"># 定义员工类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, performance</span>):<br>        self.name = name<br>        self.performance = performance  <span class="hljs-comment"># 员工表现</span><br>        self.bonus_shares = <span class="hljs-number">0</span>  <span class="hljs-comment"># 员工分配到的奖金份额</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_bonus</span>(<span class="hljs-params">self, bonus_per_block</span>):<br>        <span class="hljs-comment"># 计算该员工当前分配到的奖金</span><br>        bonus = self.bonus_shares * bonus_per_block<br>        self.bonus_shares = <span class="hljs-number">0</span>  <span class="hljs-comment"># 清空该员工的奖金份额</span><br>        <span class="hljs-keyword">return</span> bonus<br><br><br><span class="hljs-comment"># 定义部门类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, leader_name, employee_names, company_shares</span>):<br>        self.name = name<br>        <span class="hljs-comment"># 部门领导</span><br>        self.leader = Employee(leader_name, <span class="hljs-number">3600000</span>)  <span class="hljs-comment"># 假设领导人员的表现固定为 3600000</span><br>        <span class="hljs-comment"># 部门员工</span><br>        self.employees = [Employee(n, <span class="hljs-number">3600000</span>) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> employee_names]  <span class="hljs-comment"># 假设员工表现固定为 3600000</span><br>        <span class="hljs-comment"># 部门所有员工的总表现</span><br>        self.total_performance = <span class="hljs-built_in">sum</span>(e.performance <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> self.employees)<br>        <span class="hljs-comment"># 公司分配给该部门的股份</span><br>        self.bonus_shares = company_shares / (<span class="hljs-built_in">len</span>(employee_names) + <span class="hljs-number">1</span>)  <span class="hljs-comment"># +1是因为要算上部门领导的份额</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">distribute_bonus</span>(<span class="hljs-params">self, bonus_per_block</span>):<br>        <span class="hljs-comment"># 部门分配到的奖金</span><br>        department_bonus = self.bonus_shares * <span class="hljs-number">0.8</span>  <span class="hljs-comment"># 假设部门分配到公司分配给该部门的股份的80%</span><br>        <span class="hljs-comment"># 部门领导获得的奖金</span><br>        leader_bonus = department_bonus * <span class="hljs-number">0.2</span>  <span class="hljs-comment"># 假设部门领导获得部门分配到的奖金的20%</span><br>        <span class="hljs-comment"># 部门领导分配到的股份</span><br>        self.leader.bonus_shares += leader_bonus<br>        <span class="hljs-comment"># 剩余的奖金股份</span><br>        rest_bonus_shares = department_bonus - leader_bonus<br>        <span class="hljs-keyword">for</span> employee <span class="hljs-keyword">in</span> self.employees:<br>            <span class="hljs-comment"># 员工分配到的奖金股份</span><br>            employee_bonus = rest_bonus_shares * (employee.performance / self.total_performance)<br>            employee.bonus_shares += employee_bonus<br>        <span class="hljs-comment"># 返回部门下的所有员工的奖金总和，包含领导获得的奖励</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(e.get_bonus(bonus_per_block) <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> self.employees) + self.leader.get_bonus(bonus_per_block)<br><br><br><span class="hljs-comment"># 定义公司类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Company</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, departments, shares</span>):<br>        self.name = name<br>        self.departments = departments  <span class="hljs-comment"># 公司部门数</span><br>        self.shares = shares  <span class="hljs-comment"># 公司剩余股份数量</span><br>        <span class="hljs-comment"># 创建部门实例列表，每个部门有100位员工</span><br>        self.departments_list = [<br>            Department(<span class="hljs-string">&#x27;Dep-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i), <span class="hljs-string">&#x27;Leader-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i), [<span class="hljs-string">&#x27;Emp-&#123;&#125;-&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, j) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)],<br>                       shares / departments)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(departments)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">distribute_bonus</span>(<span class="hljs-params">self, bonus_per_block</span>):<br>        total_bonus = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 遍历每个部门进行奖金分配</span><br>        <span class="hljs-keyword">for</span> department <span class="hljs-keyword">in</span> self.departments_list:<br>            total_bonus += department.distribute_bonus(bonus_per_block)<br>        self.shares -= total_bonus  <span class="hljs-comment"># 扣除公司剩余股份</span><br>        <span class="hljs-keyword">return</span> total_bonus<br><br><br><span class="hljs-comment"># 创建两个公司实例</span><br>company_a = Company(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">0.5</span>)<br>company_b = Company(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">0.5</span>)<br><br>block_height = <span class="hljs-number">1</span><br>bonus_per_block = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 循环运行，模拟区块</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    start_time = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Block #&#123;&#125;:&#x27;</span>.<span class="hljs-built_in">format</span>(block_height))<br>    <span class="hljs-comment"># 公司 A 分配奖金并输出结果</span><br>    a_bonus = company_a.distribute_bonus(bonus_per_block)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Company A bonus: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a_bonus))<br>    <span class="hljs-comment"># 公司 B 分配奖金并输出结果</span><br>    b_bonus = company_b.distribute_bonus(bonus_per_block)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Company B bonus: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(b_bonus))<br>    block_elapsed_time = time.time() - start_time<br>    <span class="hljs-comment"># 控制每个区块的时间为 3s</span><br>    <span class="hljs-keyword">if</span> block_elapsed_time &lt; <span class="hljs-number">3</span>:<br>        time.sleep(<span class="hljs-number">3</span> - block_elapsed_time)<br>    block_height += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="示例输出"><a href="#示例输出" class="headerlink" title="示例输出"></a>示例输出</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607203006186.png" alt="image-20230607203006186"></p><h2 id="点我请求-远程协助调试"><a href="#点我请求-远程协助调试" class="headerlink" title="点我请求-远程协助调试"></a><a href="https://yan-sheng-li.gitee.io/remote_help/">点我请求-远程协助调试</a></h2>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>停车场管理系统</title>
    <link href="/blog/posts/8300.html"/>
    <url>/blog/posts/8300.html</url>
    
    <content type="html"><![CDATA[<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>停车场进出车管理</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607155309617.png" alt="image-20230607155309617"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607155237736.png" alt="image-20230607155237736"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>登录验证</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607154657069.png" alt="image-20230607154657069"></p><p>用户信息管理</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607153107260.png" alt="image-20230607153107260"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607153121740.png" alt="image-20230607153121740"></p><p>车位信息管理</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607153203174.png" alt="image-20230607153203174"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607153214840.png" alt="image-20230607153214840"></p><p>IC卡信息管理</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607160500750.png" alt="image-20230607160500750"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607153249234.png" alt="image-20230607153249234"></p><p>停车场信息管理，进出管理</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607154259384.png" alt="image-20230607154259384"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607154318508.png" alt="image-20230607154318508"></p><p>临时停车管理</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607154413318.png" alt="image-20230607154413318"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607154426517.png" alt="image-20230607154426517"></p><p>修改密码</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230607154440048.png" alt="image-20230607154440048"></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>码云地址：<a href="https://gitee.com/yan-sheng-li/ai-parking">https://gitee.com/yan-sheng-li/ai-parking</a></p><h2 id="点我请求-远程协助调试"><a href="#点我请求-远程协助调试" class="headerlink" title="点我请求-远程协助调试"></a><a href="https://yan-sheng-li.gitee.io/remote_help/">点我请求-远程协助调试</a></h2>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图书信息管理系统</title>
    <link href="/blog/posts/53729.html"/>
    <url>/blog/posts/53729.html</url>
    
    <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a><strong>项目简介</strong></h2><p>​    随着社会的发展，人们对知识的需求也在不断增长。书籍作为人们获取并增长知识的只要途径，使得书城，书店在人们的生活中占有了一定的位置。但是近几年，随着书量的不断增长，造成了图书挤压，管理不善等等的问题。这就直接影响了图书管理员对书城或者书店图书的管理带来一定的难度。这时就需要开发一套图书管理系统，通过该系统提高书城或者书店的管理效率，从而减少管理方面的工作流程和成本。</p><p>​    本次课程设计旨在加深对数据库系统，软件工程，程序设计语言的理论知识的理解和应用水平，同时在理论和实验教学基础上进一步巩固已学基本理论及应用知识并加以综合提高，并学会将知识应用于实际的方法，提高分析和解决问题的能力，增强动手能力，为毕业设计和以后工作打下必要的基础。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>​当今图书作为一种信息资源已经相当丰富，面对庞大的书籍，特别是书城，书店一类的买卖平台，图书和用户购买资料繁多，包含很多的信息管理。图书管理系统是一个高度集成的图书信息管理系统，通过对图书管理的各种功能进行整合，从而达到可以方便进行信息检索，提高效率，降低管理成本等目的。图书信息管理系统的使用对象图书管理员，主要包含以下的功能：</p><ol><li>图书管理员可以在对图书信息进行增加，删除，修改，查询等操作。</li><li>系统有自动结算的功能，输入图书ISBN码，自动回填相关信息，包含价格，折扣等等，输入金额，自动计算找零。</li><li>图书管理员可以在系统中设置图书的今日折扣信息，以及标价标准。</li><li>图书查询，订单查询等等支持根据ISBN码，书名，模糊查询等多种方式。</li></ol><h2 id="用例图示"><a href="#用例图示" class="headerlink" title="用例图示"></a>用例图示</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/20210714195330101.png"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/20210714200358914.png"></p><h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><h3 id="管理员表"><a href="#管理员表" class="headerlink" title="管理员表"></a>管理员表</h3><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220611202223519.png"></p><h3 id="库存表"><a href="#库存表" class="headerlink" title="库存表"></a>库存表</h3><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220611202250583.png"></p><h3 id="进书表"><a href="#进书表" class="headerlink" title="进书表"></a>进书表</h3><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220611202316905.png"></p><h3 id="图书销售订单表"><a href="#图书销售订单表" class="headerlink" title="图书销售订单表"></a>图书销售订单表</h3><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220611202358812.png"></p><h2 id="部分效果图示"><a href="#部分效果图示" class="headerlink" title="部分效果图示"></a>部分效果图示</h2><p>系统登录弹窗</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220611202747601.png"></p><p>书库管理页</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220611202946279.png"></p><p>信息查询页</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220611203012901.png"></p><p>图书销售页</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220611203036093.png"></p><p>系统设置页</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220611203057204.png"></p><hr><p>程序源码获取 关注 <font color='red'><strong>编程亿点有趣</strong></font>  公众号  ，回复  <font color='cornflowerblue'><strong>图书系统</strong></font>   获取。</p><h4 id="直达码云仓库："><a href="#直达码云仓库：" class="headerlink" title="直达码云仓库："></a>直达码云仓库：</h4><p><a href="https://gitee.com/yan-sheng-li/book-information-management-system.git">https://gitee.com/yan-sheng-li/book-information-management-system.git</a></p><p>本次整理到这！！！</p><p>觉得不错三连支持一下哦！！！</p><h2 id="点我请求-远程协助调试"><a href="#点我请求-远程协助调试" class="headerlink" title="点我请求-远程协助调试"></a><a href="https://yan-sheng-li.gitee.io/remote_help/">点我请求-远程协助调试</a></h2><p>下期见！！！</p><p>拜拜！！！<br>    <img src="http://cdn.qiniu.liyansheng.top/typora/pvTQ1bYb9j2rLQe0WQEfmAqnbxLhUfje.gif"></p>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超市信息管理系统</title>
    <link href="/blog/posts/63669.html"/>
    <url>/blog/posts/63669.html</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>分享一个简单的Java+JDBC+MySQL数据库开发的简易版超市管理系统，完成简单的基础功能，如登录验证，进货管理，售货管理，信息查询等等，适合做课程设计呢，喜欢的小伙伴可以来看看呢</strong></p></blockquote><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><table><thead><tr><th>库存管理</th><th>销售管理</th><th>信息查询</th><th>系统</th></tr></thead><tbody><tr><td>进货</td><td>售货</td><td>库存查询  进货查询  售货查询</td><td>退出</td></tr></tbody></table><p>超市数据库</p><ul><li>进货表（顺序码，条形码，进价，采购数量，采购日期）</li><li>售货表（顺序码，条形码，数量，零售价，日期时间）</li><li>库存表（条形码，商品名称，库存量，生产厂商,商品规格，零售价）</li><li>用户表（顺序码，用户名，用户密码）</li></ul><p> 顺序码编程自动生成（每次加1）。</p><p>进货:当进新商品（第一次进此商品）时，用户需要输入条形码，商品名称，生产厂商，规格，进价，零售价、采购数量，采购日期。</p><p>当进的商品是已经进过的商品时,用户输入完条形码时,窗体的文本框中将自动显示商品名称,生产厂商,商品规格，零售价,用户只需要输入进价,采购数量,采购日期。</p><p>售货：只需要用户输入条形码，销售数量，而商品名称，零售价将自动显示，日期时间调用系统当前日期时间。</p><p>一次售货可以销售多种商品，最后一起结帐。显示应收货款，实收金额，找零。</p><hr><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>登录验证：</p><img src="https://picture-1302879452.cos.ap-guangzhou.myqcloud.com/img/login.gif" style="zoom:50%;" /><p>界面一览：</p><img src="https://picture-1302879452.cos.ap-guangzhou.myqcloud.com/img/exit.gif" style="zoom:50%;" /><p>进货：</p><img src="https://picture-1302879452.cos.ap-guangzhou.myqcloud.com/img/in.gif" style="zoom:50%;" /><p>售货：</p><img src="https://picture-1302879452.cos.ap-guangzhou.myqcloud.com/img/sell.gif" style="zoom:50%;" /><p>查询：</p><img src="https://picture-1302879452.cos.ap-guangzhou.myqcloud.com/img/find.gif" style="zoom:50%;" /><p>退出：</p><img src="https://picture-1302879452.cos.ap-guangzhou.myqcloud.com/img/exit.gif" style="zoom:50%;" /><p>以上是部分演示，代码有亿点点多，就不在这里展示代码了，详细的可以下载源码来自己看一下哦！</p><p>关注公众号 “<font color='red'>编程亿点有趣</font>” ，回复关键字 “<font color='red'>超市系统</font>” 获取源码哦！！！<br>或直达仓库：<a href="https://gitee.com/yan-sheng-li/SuperMarketSystem.git">https://gitee.com/yan-sheng-li/SuperMarketSystem.git</a><br>    <img src="http://cdn.qiniu.liyansheng.top/typora/pvTQ1bYb9j2rLQe0WQEfmAqnbxLhUfje.gif"></p>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LRU算法实现</title>
    <link href="/blog/posts/41037.html"/>
    <url>/blog/posts/41037.html</url>
    
    <content type="html"><![CDATA[<hr><h2 id="LRU算法实现"><a href="#LRU算法实现" class="headerlink" title="LRU算法实现"></a>LRU算法实现</h2><p>LRU算法（Least Recently Used）是一种用于<strong>页面置换</strong>的算法，也被称为最近最少使用算法。它的基本思想是，<font color='cornflowerblue'>系统保留一定数量的页面帧，当有新页面需要放入内存时，根据页面在内存中的访问时间，在已有的页面中找到一个最近最少使用（最久未使用）的页面，将其置换出去，然后将新页面放入该位置</font>。</p><p>具体来说，LRU算法使用一个队列来维护内存中的页面。每当一个页面被访问时，就将其移动到队列的末尾。当内存不足时，需要置换页面时，就将队列头部的页面置换出去。</p><p>相比于其他页面置换算法，如FIFO（先进先出）和随机置换算法，LRU算法更能够反映程序的局部性原理，即程序倾向于访问最近使用的页面或数据。</p><p>需要注意的是，实现LRU算法需要对<font color='red'>所有内存页面进行实时的访问跟踪，因此会造成一定的开销</font>。在实际应用中，可以通过硬件支持或软件优化等方式减少开销。</p><p>Java代码实现LRU算法可以采用LinkedHashMap这个类来实现，该类提供了按照访问顺序排序的功能，即将最近访问过的元素放在链表的末尾，而最久未被访问的则放在链表的头部。</p><p>具体做法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">java<br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span>&lt;K, V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;K, V&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> cacheSize;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LRUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> cacheSize)</span> &#123;<br>        <span class="hljs-built_in">super</span>(cacheSize, <span class="hljs-number">0.75f</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">this</span>.cacheSize = cacheSize;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 实现删除最老的元素</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeEldestEntry</span><span class="hljs-params">(Map.Entry&lt;K, V&gt; eldest)</span> &#123;<br>        <span class="hljs-keyword">return</span> size() &gt; cacheSize;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在以上代码中，我们定义了一个泛型类LRUCache，继承自LinkedHashMap，并且实现了删除最老元素(removeEldestEntry)的方法。通过调用超类LinkedHashMap的构造方法，指定了accessOrder参数为true，表示按照访问顺序排序。在添加新元素时，如果缓存已满，则会删除最老的元素，即第一个元素。</p><p>r<strong>emoveEldestEntry方法是LinkedHashMap提供的一个Hook方法</strong>（钩子方法），默认返回false，表示不删除任何元素。但是我们可以根据需要重写该方法，设定删除最老元素的条件并返回true，然后LinkedHashMap会在put、putAll等操作执行之后，自动调用removeEldestEntry方法，检查是否需要删除元素。如果需要删除，则删除头部元素，并返回true，否则返回false，不删除任何元素。</p><p>使用时只需创建一个LRUCache对象，然后通过put和get方法操作元素，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">java<br>LRUCache&lt;String, String&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LRUCache</span>&lt;String, String&gt;(<span class="hljs-number">5</span>);<br>cache.put(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>cache.put(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>cache.put(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br>cache.put(<span class="hljs-string">&quot;key4&quot;</span>, <span class="hljs-string">&quot;value4&quot;</span>);<br>cache.put(<span class="hljs-string">&quot;key5&quot;</span>, <span class="hljs-string">&quot;value5&quot;</span>);<br>cache.get(<span class="hljs-string">&quot;key1&quot;</span>); <span class="hljs-comment">// 访问key1，此时缓存中元素顺序为key2, key3, key4, key5, key1</span><br>cache.get(<span class="hljs-string">&quot;key2&quot;</span>); <span class="hljs-comment">// 访问key2，此时缓存中元素顺序为key3, key4, key5, key1, key2</span><br>cache.put(<span class="hljs-string">&quot;key6&quot;</span>, <span class="hljs-string">&quot;value6&quot;</span>); <span class="hljs-comment">// 添加新元素，此时需要删除最老的元素key3</span><br></code></pre></td></tr></table></figure><p>以上就是一个简单的Java实现LRU算法的例子。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>会议预约管理系统</title>
    <link href="/blog/posts/27465.html"/>
    <url>/blog/posts/27465.html</url>
    
    <content type="html"><![CDATA[<h2 id="标题：会议预约管理系统"><a href="#标题：会议预约管理系统" class="headerlink" title="标题：会议预约管理系统"></a>标题：会议预约管理系统</h2><blockquote><p><strong>分享一个简单的Java+JDBC+MySQL数据库开发的会议预约管理系统，完成简单的基础功能，如登录验证，会议预约，个人信息更新，预约审核等等，适合做课程设计呢，喜欢的小伙伴可以来看看呢</strong></p></blockquote><h2 id="课程设计目的"><a href="#课程设计目的" class="headerlink" title="课程设计目的"></a>课程设计目的</h2><ol><li>掌握数据库设计的基本方法，熟悉数据库设计的步骤。</li><li>通过设计数据库系统应用课题，进一步熟悉数据库管理系统的操作技术，提高动手能力，提高分析问题和解决问题的能力。</li><li>学习基本数据库编程方法。</li></ol><h2 id="开发环境与工具"><a href="#开发环境与工具" class="headerlink" title="开发环境与工具"></a>开发环境与工具</h2><ul><li>开发工具：Eclipse2021</li><li>数据库：MySQL 8.0+</li><li>编程语言：Java（jdk 12）</li><li>编码格式：UTF-8</li><li>辅助工具：Navicat数据库可视化</li></ul><h2 id="功能要求"><a href="#功能要求" class="headerlink" title="功能要求"></a>功能要求</h2><p>​在会议预约系统中，角色分普通用户和管理员两个角色。普通用户拥有账号，密码，姓名，电话，部门，邮箱等信息；管理员拥有账号，邮箱，密码，姓名等信息。用户在登录系统时， 先输入账号密码以及身份类别，如果身份验证失败应该有错误反馈。两个角色在进入系统后都可以根据实际修改自己的基本信息。普通用户进入系统后，可以查询会议室信息，发起预约会议室的申请，或者取消预约申请。会议室的信息应该有名称，地点，位置，状态等信息。管理员进入系统后，可以看到数据统计，也可以一览预约申请的信息，同时可对申请进行审批，即给予申请通过与否。系统的操作应有相应的操作反馈，界面友好，交互性强。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701123054356.png"></p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><ol><li><p>管理员表</p><p> ​<img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701123555136.png">                    </p></li><li><p>用户表</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701123508251.png"></p></li><li><p>会议室表</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701123524814.png"></p></li><li><p>会议预约表</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701123534796.png"></p></li></ol><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><ol><li><p>登录验证。首先用户输入账号和密码，并选择所属身份。如果身份验证通过，则可以进入系统，否则不能进入系统，并有错误反馈。</p><ol><li><p>验证失败示例：</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701123729647.png"></p></li><li><p>验证通过示例：</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701123749317.png"></p></li></ol></li><li><p>用户个人信息。用户可以在版面查看自己的基本信息，点击修改按钮，文本框切换到可编辑状态，此时可以修改个人基本信息，然后点保存即可更新完毕。</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701123820983.png"></p></li><li><p>会议室查询。可以一览全部可用会议室，也可以通过会议室名称搜索相应的会议室信息。</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701123848854.png"></p></li><li><p>会议预约。输入会议室的ID，然后点击“我要预约”按钮，如果操作成功，即可在我的预约记录里面新增一条。</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701123918560.png"></p></li><li><p>取消预约。通过输入已经预约的会议的ID，可取消预约。</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701123948492.png"></p></li><li><p>管理员数据统计。在此面板，可以看到系统的一些数据统计，如总用户数，可用会议数量，预约数量等。</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701124015061.png"></p></li><li><p>审核预约。在此模块管理员可以看到已审核的预约申请记录，也可以对待审核的申请进行“通过”与“未通过”标记。</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701124043895.png"></p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220701124055136.png"></p></li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>以上是部分演示，代码有亿点点多，就不在这里贴出代码了，详细的可以下载源码来自己看一下哦！</p><p><code>百度网盘</code>获取：</p><p><strong>链接：<a href="https://pan.baidu.com/s/1vMRmsm2wuLlfOJ6p2CLlVw">https://pan.baidu.com/s/1vMRmsm2wuLlfOJ6p2CLlVw</a></strong> </p><p><strong>提取码：1314</strong></p><p><code>码云</code>获取：</p><p><strong><a href="https://gitee.com/yan-sheng-li/meeting.git">https://gitee.com/yan-sheng-li/meeting.git</a></strong></p><hr><p><strong>更多课程设计作品请浏览公众号《编程亿点有趣》文章获取哦</strong><br>  <img src="http://cdn.qiniu.liyansheng.top/typora/pvTQ1bYb9j2rLQe0WQEfmAqnbxLhUfje.gif"></p>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络课程设计-在线聊天室设计</title>
    <link href="/blog/posts/8266.html"/>
    <url>/blog/posts/8266.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>《计算机网络》结课课程设计所需，选题：<strong>局域网聊天室设计</strong>，使用Java语言实现，核心的是socket通信应用。</p></blockquote><h2 id="设计目的"><a href="#设计目的" class="headerlink" title="设计目的"></a>设计目的</h2><p>本项目就是为了能够实现利用java语言实现实时聊天技术，并且网上很多的客服聊天都没有实现消息记录的功能，本项目能够提供消息记录的存储，使得服务端能记录用户的聊天信息。</p><h2 id="课题意义"><a href="#课题意义" class="headerlink" title="课题意义"></a>课题意义</h2><p>通过本次课程设计加深对计算机网络的理解，并实践制定通信规则，同时通过实践，进一步掌握套接字编程方法，为大型网络编程打下坚实基础，达到知识与技能两方面结合的目标，与此同时熟练掌握网络的基本概念和原理，熟练掌握网络编程接口Winsock概念及编程原理和基于TCP&#x2F;IP的Internet编程技术。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>语言，用eclipse在windows10的环境下进行开发，涉及套接字，通信协议，读写操作和i&#x2F;o流等技术问题，界面采用Java的Swing窗体设计。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>系统：win10</li><li>语言：Java（jdk版本为12版本)</li><li>测试：本机</li></ul><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><ul><li>客户端登录：用户需要输入账号密码，身份验证通过即可进入聊天室。（由于本课设重点是socket通信，故不涉及与数据库的数据交互，演示用默认的密码，账号名自定义都可以，后续可以自行改进加入数据库交互的逻辑）</li><li>客户端：用户登录聊天窗体，可以给所有在线的人发送消息，也可以指定某个人发送消息</li><li>服务端：可以看到用户列表，可以统计在线用户人数，服务端启动端口可以自定义，服务端的开关可以实时控制，当关闭了服务器，系统的所有用户都不能再互发消息。服务端可以看到所有用户的消息发送记录，也可以给所有人发送消息或者给指定的用户发送消息。</li></ul><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p>首先启动服务器，即运行<code>Chat2_Server</code>下面的<code>ChatServer.java</code>文件，初始窗口如下</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220619201519798.png"></p><p>然后自定义设置端口号（端口号范围：1024~49151），在点击<code>启动服务</code>按钮（我这里选用的端口号为8085）</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220619202635207.png"></p><p>看到上面的提示，说明服务端启动成功了，接着运行<code>Chat2_Client</code>下面的<code>Login.java</code>，用户名自定义，密码由于在程序中已经写死了，就是默认的六个零（后期优化如果要对接数据库，用户的身份验证逻辑可以另外改写），然后点击<code>登陆</code>按钮。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220619202238176.png"></p><p>客户端进入聊天室如下：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220619202716742.png"></p><p>客户端给服务端发送消息：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220619202826248.png"></p><p>服务端回应指定客户端（如这里我用服务器给小明发送个消息），<code>发送至</code>下拉按钮可以指定要发送的客户端</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220619203017873.png"></p><p>此时我们可以再启动一个客户端，然后用他发消息，同样选择发送对象，即指定某个人或者所有人</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220619203603382.png"></p><p>当有新用户进入聊天室时，可以看到在线用户也会相应地增加。</p><p>以上是部分效果展示图，就不在这里一一全部展示了，感兴趣的伙伴可以自己尝试一下呢。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>服务端和客户端的IP地址要在程序里面预设，如果是本机测试IP地址就填写<code>127.0.0.1</code>，如果是在局域网下，则根据实际填写<code>192.168.x.x</code>，具体可以通过打开<code>cmd</code>窗口，输入<code>ipconfig</code>查看自己的局域网ip地址</li><li>服务端的监听端口号可以在程序启动后通过在窗口输入来设定，但是客户端的监听端口则要在程序启动之前在代码里面预定义</li><li>客户端启动后，用户名自定义输入，密码默认是六个零</li></ul><p><code>其他</code></p><p>导入项目时，如果出现乱码，请将当前项目的编码格式设置为<code>utf-8</code>即可解决；</p><p>如果出现找不到主类的问题，请选中当前项目，鼠标右键，然后选择<code>build path</code>在 选择<code>Use as Source Folder</code>即可解决。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220619205613373.png"></p><hr><p><strong>源码获取</strong></p><p>链接：<a href="https://pan.baidu.com/s/1r5iioEoXOExiakNiH_lCdw">https://pan.baidu.com/s/1r5iioEoXOExiakNiH_lCdw</a><br>提取码：1314</p><p>感兴趣的小伙伴可以尝试一下呢！！！</p><p>本期就分享到这，下期见！！！</p><h2 id="更多作品请关注公众号《编程亿点有趣》，或者收藏本站"><a href="#更多作品请关注公众号《编程亿点有趣》，或者收藏本站" class="headerlink" title="更多作品请关注公众号《编程亿点有趣》，或者收藏本站"></a>更多作品请关注公众号《编程亿点有趣》，或者收藏本站</h2>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>嵌入式课程设计</title>
    <link href="/blog/posts/22685.html"/>
    <url>/blog/posts/22685.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>​    <strong>本次课程设计时间大概是两天半，磕磕碰碰，一路上遇到了很多的问题，也不断的查资料，想办法解决各种拦路的BUG，最后做出来的效果自己还是挺满意的，能够实现多台电脑之间模拟服务端，客户端，进行文件传送。下面做一下整理（附程序和运行效果截图）</strong></p></blockquote><h2 id="课程设计任务"><a href="#课程设计任务" class="headerlink" title="课程设计任务"></a>课程设计任务</h2><p>（1）学习TCP&#x2F;IP网络基本知识，学习socket通信基本知识，设计基于Socket的网络通信程序，在LINUX 系统与WINDOWS系统之间进行通信，使用C++语言实现。</p><p>（2）在Socket服务端，能够读出一副图像数据，经过网络通信，自己设计协议，将这副图片发送到客户端，客户端接收到这副图片后，将其显示在屏幕上。</p><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><p><code>PS</code>：程序代码并不多，这里直接贴出来了。主要是用C++语言实现的，感兴趣的伙伴可以直接粘贴到VS试一下。</p><h3 id="服务端程序"><a href="#服务端程序" class="headerlink" title="服务端程序"></a><strong>服务端程序</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//#include&lt;winsock.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initialization</span><span class="hljs-params">()</span></span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUF_SIZE 1024</span><br>SOCKET s_accept;<br>SOCKADDR_IN accept_addr;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sendFile</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入待传送的文件名：&quot;</span>;<br><span class="hljs-type">char</span> filename1[<span class="hljs-number">100</span>];<br>cin &gt;&gt; filename1;<br><span class="hljs-comment">//检查文件是否存在</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename = filename1;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> <span class="hljs-keyword">warning</span>(suppress : 4996)</span><br>FILE *fp = <span class="hljs-built_in">fopen</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>);<br><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不能打开文件，按任何键退出！&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;文件准备就绪&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//循环发送数据，直到文件结尾</span><br><span class="hljs-type">char</span> buffer[BUF_SIZE] = &#123; <span class="hljs-number">0</span> &#125;;<span class="hljs-comment">//缓冲区</span><br><span class="hljs-type">int</span> nCount;<br><span class="hljs-keyword">while</span> ((nCount = <span class="hljs-built_in">fread</span>(buffer, <span class="hljs-number">1</span>, BUF_SIZE, fp)) &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">send</span>(s_accept, buffer, nCount, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-built_in">shutdown</span>(s_accept, SD_SEND);文件读取完毕，断开输出流，向客户端发送FIN包,注意加头文件<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span>，不然报错</span><br><span class="hljs-built_in">recv</span>(s_accept, buffer, BUF_SIZE, <span class="hljs-number">0</span>);<span class="hljs-comment">//阻塞，等待客户端接收完毕</span><br><span class="hljs-comment">//关闭文件</span><br><span class="hljs-built_in">fclose</span>(fp);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">listen1</span><span class="hljs-params">(SOCKET s_server,<span class="hljs-type">int</span> len, SOCKADDR_IN accept_addr)</span> </span>&#123;<br><span class="hljs-comment">//设置套接字为监听状态</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(s_server, SOMAXCONN) &lt; <span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;设置监听状态失败！&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">WSACleanup</span>();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;设置监听状态成功！&quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;服务端正在监听连接，请稍候....&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;-------------------------------------&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//接受连接请求</span><br>len = <span class="hljs-built_in">sizeof</span>(SOCKADDR);<br>s_accept = <span class="hljs-built_in">accept</span>(s_server, (SOCKADDR*)&amp;accept_addr, &amp;len);<br><span class="hljs-keyword">if</span> (s_accept == SOCKET_ERROR) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;连接失败！&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">WSACleanup</span>();<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;连接就绪~&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//定义长度变量</span><br><span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//定义服务端套接字，接受请求套接字</span><br>SOCKET s_server;<br><span class="hljs-comment">//服务端地址客户端地址</span><br>SOCKADDR_IN server_addr;<br><span class="hljs-built_in">initialization</span>();<br><span class="hljs-comment">//填充服务端信息</span><br>server_addr.sin_family = AF_INET;<br>server_addr.sin_addr.S_un.S_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br><span class="hljs-comment">//设置端口号</span><br>server_addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">1234</span>);<br><span class="hljs-comment">//创建套接字</span><br>s_server = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//绑定套接字到一个IP地址和一个端口上</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(s_server, (SOCKADDR*)&amp;server_addr, <span class="hljs-built_in">sizeof</span>(SOCKADDR)) == SOCKET_ERROR) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;套接字绑定失败！&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">WSACleanup</span>();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;套接字绑定成功！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//监听</span><br><span class="hljs-built_in">listen1</span>(s_server, len, accept_addr);<br><span class="hljs-comment">//发送文件</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-built_in">sendFile</span>();<br>&#125;<br><span class="hljs-comment">//关闭套接字</span><br><span class="hljs-built_in">closesocket</span>(s_server);<br><span class="hljs-built_in">closesocket</span>(s_accept);<br><span class="hljs-comment">//释放DLL资源</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initialization</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//初始化套接字库</span><br>WORD w_req = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">//版本号</span><br>WSADATA wsadata;<br><span class="hljs-type">int</span> err;<br>err = <span class="hljs-built_in">WSAStartup</span>(w_req, &amp;wsadata);<br><span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;初始化套接字库失败！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;初始化套接字库成功！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="客户端程序"><a href="#客户端程序" class="headerlink" title="客户端程序"></a><strong>客户端程序</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;winsock.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUF_SIZE 1024</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initialization</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//定义服务端套接字，接受请求套接字</span><br>SOCKET s_server;<br><span class="hljs-comment">//服务端地址客户端地址</span><br>SOCKADDR_IN server_addr;<br><span class="hljs-built_in">initialization</span>();<br><span class="hljs-comment">//填充服务端信息</span><br>server_addr.sin_family = AF_INET;<br><span class="hljs-comment">//获取IP</span><br>cout &lt;&lt; <span class="hljs-string">&quot;-------------------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入服务器的IP：&quot;</span>;<br><span class="hljs-comment">//定义保存输入IP的字符数组</span><br><span class="hljs-type">char</span> Service_ip[<span class="hljs-number">15</span>];<br><span class="hljs-comment">//遇到空格或者回车结束输入</span><br>cin &gt;&gt; Service_ip;<br>server_addr.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(Service_ip);<br><span class="hljs-comment">//server_addr.sin_addr.S_un.S_addr = inet_addr(&quot;127.0.0.1&quot;);</span><br>server_addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">1234</span>);<br><span class="hljs-comment">//创建套接字</span><br>s_server = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(s_server, (SOCKADDR*)&amp;server_addr, <span class="hljs-built_in">sizeof</span>(SOCKADDR)) == SOCKET_ERROR) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;服务器连接失败！&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">WSACleanup</span>();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;服务器连接成功！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">//输入文件名，看文件能否创建成功</span><br><span class="hljs-type">char</span> filename[<span class="hljs-number">100</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入要保存的文件：&quot;</span>;<br>cin &gt;&gt; filename;<br><span class="hljs-comment">//以二进制创建文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> <span class="hljs-keyword">warning</span>(suppress : 4996)</span><br>FILE *fp = <span class="hljs-built_in">fopen</span>(filename, <span class="hljs-string">&quot;wb&quot;</span>);<span class="hljs-comment">//以只写方式打开或新建一个二进制文件，只允许写数据</span><br><span class="hljs-comment">//循环接受</span><br><span class="hljs-type">char</span> buffer[BUF_SIZE] = &#123; <span class="hljs-number">0</span> &#125;;<span class="hljs-comment">//文件保存缓冲区</span><br><span class="hljs-type">int</span> nCount = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> ((nCount = <span class="hljs-built_in">recv</span>(s_server, buffer, BUF_SIZE, <span class="hljs-number">0</span>)) &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//recv(对应的套接字，保存数据的地方，保存区的大小，第四个参数一般设置为 0</span><br>&#123;<br><span class="hljs-built_in">fwrite</span>(buffer, nCount, <span class="hljs-number">1</span>, fp);<span class="hljs-comment">//buffer输出数据的地址，nCount要输入内容的字节数，1位写入nCount字节的数据项的个数,fp为目标文件</span><br>&#125;<br><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;接收文件失败!&quot;</span>;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (fp != <span class="hljs-literal">NULL</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;文件接收成功！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//打开并显示图片</span><br><span class="hljs-built_in">ShellExecute</span>(<span class="hljs-literal">NULL</span>,<span class="hljs-string">&quot;open&quot;</span>, filename, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, SW_SHOWNORMAL);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">fclose</span>(fp);<br>&#125;<br><span class="hljs-comment">//关闭套接字</span><br><span class="hljs-built_in">closesocket</span>(s_server);<br><span class="hljs-comment">//释放DLL资源</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initialization</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//初始化套接字库</span><br>WORD w_req = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">//版本号</span><br>WSADATA wsadata;<br><span class="hljs-type">int</span> err;<br>err = <span class="hljs-built_in">WSAStartup</span>(w_req, &amp;wsadata);<br><br><span class="hljs-comment">//检测版本号</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">LOBYTE</span>(wsadata.wVersion) != <span class="hljs-number">2</span> || <span class="hljs-built_in">HIBYTE</span>(wsadata.wHighVersion) != <span class="hljs-number">2</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;套接字库版本号不符！&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">WSACleanup</span>();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;套接字库版本正确！&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><code>PS</code>：分别运行服务端和客户端，本机测试IP地址用127.0.0.1，局域网的话IP自己查IPv4对应的IP号（这里用本机回环测试演示）</p><p><img src="https://img-blog.csdnimg.cn/202107101338392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEwNzE0MA==,size_16,color_FFFFFF,t_70"></p><p>在客户端输入IP，然后回车可以看到连接是否成功</p><p><img src="https://img-blog.csdnimg.cn/20210710134126112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEwNzE0MA==,size_16,color_FFFFFF,t_70"></p><p> 然后在服务端输入要传送的文件的路径：（这里演示传送一个视频,发送图片的方式也同理）</p><p><img src="https://img-blog.csdnimg.cn/20210710134313954.png"></p><p> 在客户端也输入要保存服务端传送过来文件的地址，保存在哪里可以自己定义，文件名也可以自己定义，但是文件格式一定要跟服务器传过来的文件的文件格式一致，即文件后缀名要一样</p><p><img src="https://img-blog.csdnimg.cn/20210710134716335.png"></p><p> 文件传送成功后，程序会自动调用计算机的默认应用打开文件，即你是传送的文件，那么你收到文件后，系统会调用计算机的视频播放软件打开，如果是图片，那么就会用图片查看器打开，其他文件格式也同理</p><p><img src="https://img-blog.csdnimg.cn/202107101333472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEwNzE0MA==,size_16,color_FFFFFF,t_70"></p><p> 打开刚刚保存文件的路径，可以看到我们的文件传送过来了，两个文件大小一致</p><p><img src="https://img-blog.csdnimg.cn/20210710135309723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEwNzE0MA==,size_16,color_FFFFFF,t_70"></p><p><strong>不同计算机连接同一个局域网也能实现文件传送呢，感兴趣的伙伴可以试一下哦！！</strong></p><h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><p>一次运行只能传输一次文件，然后程序就结束退出了，需要再一次传送文件还得再重新先打开服务端然后打开客户端连接， 这个可以考虑把发送接收文件的代码块放到一个循环里，我今天简单尝试了一下，没有成功，时间问题，就没来得及继续完善这个不足了，感兴趣的伙伴可以把上面程序修改修改试试。</p><hr><p>本期内容分享到这！！ 下期见！！！</p><p>  <img src="http://cdn.qiniu.liyansheng.top/typora/pvTQ1bYb9j2rLQe0WQEfmAqnbxLhUfje.gif"></p>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL修改密码与设置字符编码集</title>
    <link href="/blog/posts/28882.html"/>
    <url>/blog/posts/28882.html</url>
    
    <content type="html"><![CDATA[<h3 id="如何重置密码"><a href="#如何重置密码" class="headerlink" title="如何重置密码"></a>如何重置密码</h3><p>在 MySQL 8 中，如果您是第一次安装 MySQL，那么默认的 root 用户无密码，您可以直接以 root 用户身份登录，并设置新密码。如果您已经设置了 root 用户的默认密码并忘记了它，则可以按照以下步骤修改它：</p><ol><li><p>停止 MySQL 服务</p><p>如果您在本地运行 MySQL，则可以使用以下命令停止 MySQL 服务：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo systemctl stop mysql<br></code></pre></td></tr></table></figure><p>(注意：如果是window系统上操作，打开任务管理器，将MySQL的进程结束任务即可)</p></li><li><p>使用以下命令以跳过身份验证启动 MySQL 实例：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">sudo mysqld_safe --skip-grant-tables <span class="hljs-meta">&amp;</span><br></code></pre></td></tr></table></figure><p>这将以跳过身份验证的方式启动 MySQL 实例。</p></li><li><p>连接到 MySQL。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql -u root</span><br></code></pre></td></tr></table></figure></li><li><p>设置新密码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;new_password&#x27;</span>;<br></code></pre></td></tr></table></figure><p>将 “new_password” 替换为您要设置的新密码。</p></li><li><p>刷新权限：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">FLUSH PRIVILEGES<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>退出 MySQL 并重新启动 MySQL 服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span>;<br>sudo systemctl start mysql<br></code></pre></td></tr></table></figure></li></ol><p>现在，您可以使用新密码以 root 用户身份登录 MySQL。</p><h3 id="如何设置字符编码集"><a href="#如何设置字符编码集" class="headerlink" title="如何设置字符编码集"></a>如何设置字符编码集</h3><p>在 MySQL 中，您可以通过以下步骤设置字符编码：</p><ol><li><p>查看当前的字符编码</p><p>可以通过以下命令查看当前 MySQL 的字符集及排序规则：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">SHOW <span class="hljs-keyword">VARIABLES</span> LIKE <span class="hljs-comment">&#x27;%character_set%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>如果您发现当前的字符编码不是您想要的编码，那么您可以按照以下步骤更改它。</p></li><li><p>修改 MySQL 配置文件</p><p>在 MySQL 配置文件中增加以下配置项：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">character-set-server</span>=utf8mb4<br><span class="hljs-attr">collation-server</span>=utf8mb4_unicode_ci<br></code></pre></td></tr></table></figure><p>这将设置 MySQL 服务器使用 utf8mb4 字符编码和 utf8mb4_unicode_ci 排序规则。如果您需要使用其他编码，请相应地设置 character-set-server 和 collation-server 配置项。</p></li><li><p>重启 MySQL 服务</p><p>保存更改后，需要重启 MySQL 服务使更改生效。可以使用以下命令重启 MySQL 服务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl restart mysql</span><br></code></pre></td></tr></table></figure></li><li><p>确认新的字符编码已生效</p><p>可以再次运行以下命令确认新的字符编码和排序规则已经生效：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">SHOW <span class="hljs-keyword">VARIABLES</span> LIKE <span class="hljs-comment">&#x27;%character_set%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>现在，MySQL 将使用新的字符编码和排序规则。</p></li></ol><p>请注意，在修改 MySQL 的字符编码时，需要确保数据库表和数据都与新的字符编码兼容。因此，在更改字符编码之前，建议先备份数据，以避免数据损坏。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot配置文件明文加密</title>
    <link href="/blog/posts/50514.html"/>
    <url>/blog/posts/50514.html</url>
    
    <content type="html"><![CDATA[<p>Spring Boot 里面的配置文件可以使用 <code>jasypt</code> 来实现加密和解密。</p><h3 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下"></a>步骤如下</h3><ol><li>添加依赖</li></ol><p>在 <code>pom.xml</code> 文件中添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>配置加密参数</li></ol><p>在 <code>application.properties</code> 或 <code>application.yml</code> 中添加以下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 加密算法，默认为 PBEWithMD5AndDES</span><br><span class="hljs-attr">jasypt.encryptor.algorithm</span>=<span class="hljs-string">PBEWithMD5AndDES</span><br><span class="hljs-comment"># 加密密钥，这个密码需要保密</span><br><span class="hljs-attr">jasypt.encryptor.password</span>=<span class="hljs-string">your_secret_password</span><br></code></pre></td></tr></table></figure><ol start="3"><li>使用加密参数进行加密</li></ol><p>使用以上配置后，在配置文件中，需要加密的字符串可以使用以下格式进行加密：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost/testdb</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">dbuser</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">ENC(encrypted_password)</span><br></code></pre></td></tr></table></figure><p>其中，<code>encrypted_password</code> 是要被加密的原始密码。使用 jasypt 的默认方式会将其加密成一个 Base64 字符串。</p><ol start="4"><li>使用解密</li></ol><p>在代码中可以直接使用 <code>@Value</code> 注解获取解密后的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String dbPassword;<br><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样，<code>dbPassword</code> 就是解密后的密码了。</p><p>注意：加密后的字符串要使用 <code>ENC()</code> 包含起来，否则 Spring Boot 无法识别它是一个加密的字符串。</p><h3 id="加密与解密"><a href="#加密与解密" class="headerlink" title="加密与解密"></a>加密与解密</h3><p>好的，下面是一个简单的测试方法，用于说明加密和解密的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JasyptTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Environment environment;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringEncryptor encryptor;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEncryptionAndDecryption</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalText</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mypassword&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">encryptedText</span> <span class="hljs-operator">=</span> encryptor.encrypt(originalText);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">decryptedText</span> <span class="hljs-operator">=</span> encryptor.decrypt(encryptedText);<br><br>        System.out.printf(<span class="hljs-string">&quot;Original text: %s%n&quot;</span>, originalText);<br>        System.out.printf(<span class="hljs-string">&quot;Encrypted text: %s%n&quot;</span>, encryptedText);<br>        System.out.printf(<span class="hljs-string">&quot;Decrypted text: %s%n&quot;</span>, decryptedText);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encryptedValue</span> <span class="hljs-operator">=</span> environment.getProperty(<span class="hljs-string">&quot;my.encrypted.property&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">decryptedValue</span> <span class="hljs-operator">=</span> environment.getProperty(<span class="hljs-string">&quot;my.decrypted.property&quot;</span>);<br><br>        System.out.printf(<span class="hljs-string">&quot;Encrypted value: %s%n&quot;</span>, encryptedValue);<br>        System.out.printf(<span class="hljs-string">&quot;Decrypted value: %s%n&quot;</span>, decryptedValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个测试方法使用了 <code>StringEncryptor</code> 接口来进行加密和解密操作，具体步骤如下：</p><ol><li>使用 <code>encryptor.encrypt()</code> 方法将原始文本加密成密文。</li><li>使用 <code>encryptor.decrypt()</code> 方法将密文解密成原始文本。</li><li>使用 <code>environment.getProperty()</code> 方法获取配置文件中的加密和解密后的值。</li></ol><p>在上述测试方法中，<code>my.encrypted.property</code> 对应的是一个加密过的值，<code>my.decrypted.property</code> 则对应的是一个未加密的值。使用 <code>getProperty()</code> 方法获取这两个属性的值时，Spring Boot 会自动为我们完成解密操作，因此可以直接使用获取到的值进行后续的操作。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python整合Django框架</title>
    <link href="/blog/posts/49036.html"/>
    <url>/blog/posts/49036.html</url>
    
    <content type="html"><![CDATA[<hr><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>以下是安装Django的步骤：</p><ol><li><p>确认Python已经安装：在终端（Mac&#x2F;Linux）或命令提示符（Windows）中输入python -V，如果出现Python版本号，则已经安装Python；如果未安装，则需要先安装Python。</p></li><li><p>安装pip：pip是Python的包管理工具，可以用来安装和管理Python包。在终端或命令提示符中输入以下命令安装pip：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ sudo apt-get <span class="hljs-keyword">install </span>python-pip    <span class="hljs-comment"># Ubuntu/Debian</span><br>$ sudo yum <span class="hljs-keyword">install </span>python-pip        <span class="hljs-comment"># CentOS/RHEL</span><br>$ sudo <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>python-pip       <span class="hljs-comment"># Mac</span><br></code></pre></td></tr></table></figure></li><li><p>安装Django：在终端或命令提示符中输入以下命令安装Django：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ pip <span class="hljs-keyword">install</span> Django<br></code></pre></td></tr></table></figure></li><li><p>验证安装：在终端或命令提示符中输入以下命令验证Django是否安装成功：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python</span> -<span class="hljs-keyword">m</span> django --<span class="hljs-keyword">version</span><br></code></pre></td></tr></table></figure><p>如果出现Django版本号，则安装成功。</p></li></ol><p>安装完成后，可以使用Django创建项目和应用程序。</p><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h2><ol><li>打开控制面板，选择“系统和安全”。</li><li>点击“系统”。</li><li>点击“高级系统设置”。</li><li>点击“环境变量”按钮。</li><li>在“系统变量”中，找到“Path”变量，并点击“编辑”按钮。</li><li>在“编辑环境变量”窗口中，点击“新建”按钮。</li><li>输入django-admin.exe所在的路径，例如“C:\Python34\Scripts”。</li><li>点击“确定”按钮，关闭所有窗口。</li><li>打开命令行窗口，输入“django-admin”，如果出现帮助信息，则表示环境变量已经添加成功。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\胜胜&gt;django-admin<br><br>Type &#x27;django-admin help &lt;subcommand&gt;&#x27; for help on a specific subcommand.<br><br>Available subcommands:<br><br>[django]<br>    check<br>    compilemessages<br>    createcachetable<br>    dbshell<br>    diffsettings<br>    dumpdata<br>    flush<br>    inspectdb<br>    loaddata<br>    makemessages<br>    makemigrations<br>    migrate<br>    optimizemigration<br>    runserver<br>    sendtestemail<br>    shell<br>    showmigrations<br>    sqlflush<br>    sqlmigrate<br>    sqlsequencereset<br>    squashmigrations<br>    startapp<br>    startproject<br>    test<br>    testserver<br></code></pre></td></tr></table></figure><h2 id="3-创建项目"><a href="#3-创建项目" class="headerlink" title="3.创建项目"></a>3.创建项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">G:\Python&gt;django-admin startproject dj_web<br></code></pre></td></tr></table></figure><h2 id="4-启动项目"><a href="#4-启动项目" class="headerlink" title="4.启动项目"></a>4.启动项目</h2><p>默认启动端口是8000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">G:\Python\dj_web&gt;python manage.py runserver<br>Watching for file changes with StatReloader<br>Performing system checks...<br><br>System check identified no issues (0 silenced).<br><br>You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.<br>Run &#x27;python manage.py migrate&#x27; to apply them.<br>April 02, 2023 - 16:50:44<br>Django version 4.1.7, using settings &#x27;dj_web.settings&#x27;<br>Starting development server at http://127.0.0.1:8000/<br>Quit the server with CTRL-BREAK.<br>[02/Apr/2023 16:51:05] &quot;GET / HTTP/1.1&quot; 200 10681<br>[02/Apr/2023 16:51:05] &quot;GET /static/admin/css/fonts.css HTTP/1.1&quot; 200 423<br>[02/Apr/2023 16:51:05] &quot;GET /static/admin/fonts/Roboto-Bold-webfont.woff HTTP/1.1&quot; 200 86184<br>[02/Apr/2023 16:51:05] &quot;GET /static/admin/fonts/Roboto-Regular-webfont.woff HTTP/1.1&quot; 200 85876<br>[02/Apr/2023 16:51:05] &quot;GET /static/admin/fonts/Roboto-Light-webfont.woff HTTP/1.1&quot; 200 85692<br></code></pre></td></tr></table></figure><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230402165656591.png" alt="image-20230402165656591"></p><p>自定义启动端口：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">G:\Python\dj_web&gt;<span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver localhos<span class="hljs-variable">t:8001</span><br></code></pre></td></tr></table></figure><h3 id="django模板渲染"><a href="#django模板渲染" class="headerlink" title="django模板渲染"></a>django模板渲染</h3><p>在 Django 中，可以使用模板系统来渲染 HTML 页面。下面是一个简单的示例：</p><ol><li>创建模板文件</li></ol><p>在 Django 项目中的 templates 目录下创建一个新的 HTML 文件（例如 index.html）。</p><ol start="2"><li>定义视图函数</li></ol><p>在 views.py 文件中定义一个视图函数，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> myapp.models <span class="hljs-keyword">import</span> Article<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 获取所有文章</span><br>    articles = Article.objects.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-comment"># 渲染模板并传递文章列表数据</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;index.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;articles&#x27;</span>: articles&#125;)<br></code></pre></td></tr></table></figure><p>这个视图函数将获取 Article 模型中的所有文章并传递到模板中。</p><ol start="3"><li>编写模板</li></ol><p>在 index.html 文件中，您可以使用 Django 提供的模板语言编写 HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% for article in articles %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; article.content &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>这个模板将会循环遍历传递进来的文章列表，并渲染每篇文章的标题和内容。</p><ol start="4"><li>运行应用程序</li></ol><p>最后，在浏览器中访问应用程序的 URL，Django 将会执行 index 视图函数并渲染模板，将文章数据呈现在页面上。</p><p>以上是一个简单的 Django 模板渲染示例，您可以将其扩展为符合自己需求的模板。</p><h3 id="django模板语言"><a href="#django模板语言" class="headerlink" title="django模板语言"></a>django模板语言</h3><p>Django 的模板语言是基于标记的语言，它提供了一系列标记和过滤器，用于在模板中显示数据、控制逻辑和执行其他操作。</p><p>下面是一些 Django 模板语言中经常使用的标记和过滤器：</p><p>标记</p><ul><li><code>&#123;% block %&#125;</code>：定义一个块，可以在子模板中被覆盖；</li><li><code>&#123;% if %&#125;</code>：条件语句，根据条件显示不同的内容；</li><li><code>&#123;% for %&#125;</code>：循环语句，遍历一个序列并输出其中的每个值；</li><li><code>&#123;% url %&#125;</code>：生成 URL 地址，根据给定的视图名称和参数生成相应的 URL；</li><li><code>&#123;% include %&#125;</code>：包含其他模板文件中的内容。</li></ul><p>过滤器</p><ul><li><code>&#123;&#123; var | default:"默认值" &#125;&#125;</code>：如果变量未定义，则使用默认值；</li><li><code>&#123;&#123; var | upper &#125;&#125;</code>：将字符串变为大写；</li><li><code>&#123;&#123; var | lower &#125;&#125;</code>：将字符串变为小写；</li><li><code>&#123;&#123; var | date:"D, d M Y" &#125;&#125;</code>：格式化日期和时间；</li><li><code>&#123;&#123; var | safe &#125;&#125;</code>：关闭 HTML 转义，使 HTML 代码可以直接在页面上显示。</li></ul><p>除了上述标记和过滤器之外，Django 模板语言还包括变量、注释、模板继承等特性，以帮助您更好地构建复杂的模板。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法：硬币问题</title>
    <link href="/blog/posts/53295.html"/>
    <url>/blog/posts/53295.html</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定不同面额的硬币 coins 和一个总金额 amount，编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回-1。</p><p>示例：</p><p>输入：</p><p>coins &#x3D; [1, 2, 5], amount &#x3D; 11</p><p>输出：</p><p>3</p><p>解释：</p><p>11 &#x3D; 5 + 5 + 1</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>采用动态规划的思路来解决这个问题。</p><p>定义一个数组 dp，其中 dp[i] 表示凑成金额 i 所需的最少硬币数。</p><p>对于 coins 中的每个硬币，我们依次更新 dp 数组。具体来说，对于第 i 个硬币，我们遍历 dp 数组，对于每个满足 j ≥ coins[i] 的 j，更新 dp[j] &#x3D; min(dp[j], dp[j - coins[i]] + 1)。</p><p>最后，可能存在一种情况，即没有任何一种硬币组合能组成总金额，此时 dp[amount] 为正无穷，我们需要将其改为 -1。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">coinChange</span><span class="hljs-params">(<span class="hljs-type">int</span>[] coins, <span class="hljs-type">int</span> amount)</span> &#123;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[amount + <span class="hljs-number">1</span>];<br>        Arrays.fill(dp, Integer.MAX_VALUE);<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; coins.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> coins[i]; j &lt;= amount; j++) &#123;<br>                <span class="hljs-keyword">if</span> (dp[j - coins[i]] != Integer.MAX_VALUE) &#123;<br>                    dp[j] = Math.min(dp[j], dp[j - coins[i]] + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[amount] == Integer.MAX_VALUE ? -<span class="hljs-number">1</span> : dp[amount];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法：打家劫舍问题</title>
    <link href="/blog/posts/36939.html"/>
    <url>/blog/posts/36939.html</url>
    
    <content type="html"><![CDATA[<p>假设你是一个专业的小偷，计划偷窃一条街上的所有房屋。每个房屋都有一定的现金，你<font color='red'>不能同时打劫相邻的两个房屋</font>。给定一个代表每个房屋存放金额的非负整数数组，计算你能够偷窃到的最高金额。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>这个问题可以用动态规划来解决。<strong>动态规划是一种解决最优化问题的算法思想</strong>，在某些情况下能够大大降低问题的复杂度。在打家劫舍问题中，动态规划的状态转移方程如下：</p><p>dp[i] &#x3D; max(dp[i-1], dp[i-2] + nums[i])</p><p>其中，dp[i] 表示偷到第 i 个房屋时的最大金额，nums[i] 表示第 i 个房屋的现金数。如果你偷第 i 个房屋，那么你就不能偷第 i-1 个房屋，所以偷到第 i 个房屋时的最大金额为偷到第 i-2 个房屋时的最大金额加上第 i 个房屋里的现金数。如果你不偷第 i  个房屋，那么你可以偷到第 i-1 个房屋，所以偷到第 i 个房屋时的最大金额为偷到第 i-1 个房屋时的最大金额。</p><p>最终要求的是最后一个房屋的最大金额，所以返回 dp[n-1]，其中 n 表示房屋数量。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title="Python代码实现"></a>Python代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>]<br>    dp = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(nums)<br>    dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>]<br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(nums[<span class="hljs-number">0</span>], nums[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(nums)):<br>        dp[i] = <span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>], dp[i-<span class="hljs-number">2</span>] + nums[i])<br>    <span class="hljs-keyword">return</span> dp[-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>时间复杂度：<font color='yellow'>O(n)，其中 n 表示房屋数量。</font></p><p>空间复杂度：<font color='yellow'>O(n)，需要用一个数组来保存偷到每个房屋时的最大金额</font>。</p><h4 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>    dp[<span class="hljs-number">1</span>] = Math.max(nums[<span class="hljs-number">0</span>], nums[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; n; i++) &#123;<br>        dp[i] = Math.max(dp[i - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">2</span>] + nums[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>相比于Python代码，Java代码只是语法上的差异。Java使用了数组来保存偷到每个房屋时的最大金额，数组的长度为房屋数量。Java中数组的下标从0开始，所以dp[0]表示偷到第一个房屋时的最大金额，dp[1]表示偷到第二个房屋时的最大金额，以此类推。Java中的for循环语法和Python有所不同，但是实现的思路是一样的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM组成</title>
    <link href="/blog/posts/54795.html"/>
    <url>/blog/posts/54795.html</url>
    
    <content type="html"><![CDATA[<h3 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h3><p>JVM（Java Virtual Machine）是Java平台的核心组件之一，它是一个虚拟机，可以在不同的操作系统上运行Java程序。JVM负责将Java程序编译后的字节码转换为机器指令，同时还负责内存管理、垃圾回收、线程管理等任务，保证Java程序在不同的操作系统上运行的稳定性和可移植性。JVM是Java语言跨平台的关键技术之一，使得Java程序可以在不同的操作系统上运行，而不需要修改代码。</p><h3 id="JVM的内存管理"><a href="#JVM的内存管理" class="headerlink" title="JVM的内存管理"></a>JVM的内存管理</h3><p>JVM的内存管理主要包括以下几个方面：</p><ol><li><p>堆内存管理：JVM中的堆内存是用来存储对象的，JVM会自动管理堆内存的分配和释放。当一个对象不再被引用时，JVM会自动回收该对象所占用的内存。</p></li><li><p>栈内存管理：栈内存用来存储方法的局部变量和方法调用的信息。JVM会自动分配和释放栈内存。</p></li><li><p>方法区内存管理：方法区用来存储类信息、常量、静态变量等数据。JVM会自动分配和释放方法区内存。</p></li><li><p>垃圾回收：JVM会自动扫描堆内存中的对象，找出不再被引用的对象，并将其回收。JVM使用不同的垃圾回收算法来回收内存，如标记清除、复制、标记整理等算法。</p></li><li><p>内存分配优化：JVM会根据内存的使用情况进行内存分配的优化，如对象复用、对象池等。这些优化可以减少内存的使用，提高程序的性能。</p></li></ol><h3 id="JVM的栈内存管理"><a href="#JVM的栈内存管理" class="headerlink" title="JVM的栈内存管理"></a>JVM的栈内存管理</h3><p>JVM的栈内存管理主要包括栈帧的创建、销毁和管理。</p><p>栈帧是JVM中的一个重要概念，它是一个用于存储方法执行过程中的局部变量、操作数栈、方法返回值和异常处理表等信息的数据结构。在方法执行时，JVM会为该方法创建一个栈帧，并将其压入当前线程的Java虚拟机栈中。当方法执行完毕后，JVM会销毁该栈帧，并将栈顶指针指向上一个栈帧。</p><p>栈帧的创建和销毁是由JVM自动完成的，程序员无法直接控制。但是，程序员可以通过调整JVM的栈大小来影响栈帧的数量和大小。如果栈大小不足以容纳所有的栈帧，就会发生栈溢出异常。</p><p>除了栈帧的创建和销毁，JVM还提供了一些栈帧管理的API，例如：</p><ol><li><p>getStackTrace()：获取当前线程的栈帧信息。</p></li><li><p>setStackTrace(StackTraceElement[])：设置当前线程的栈帧信息。</p></li><li><p>dumpStack()：打印当前线程的栈帧信息。</p></li></ol><p>这些API可以帮助程序员在调试和异常处理时更好地了解栈帧的状态和信息。</p><h3 id="JVM的方法区内存管理"><a href="#JVM的方法区内存管理" class="headerlink" title="JVM的方法区内存管理"></a>JVM的方法区内存管理</h3><p>JVM的方法区是用来存储类信息、常量、静态变量、编译器编译后的代码等数据的区域。方法区的内存管理主要包括以下几个方面：</p><ol><li><p>类信息的加载和卸载：当一个类被加载到方法区时，会在方法区中创建一个Class对象来表示该类，当该类不再被引用时，JVM会自动卸载该类，释放方法区中的内存空间。</p></li><li><p>常量池的管理：方法区中有一个常量池，用来存储类中的常量信息，包括字符串、数字、符号引用等。JVM会对常量池进行垃圾回收，将不再被使用的常量从常量池中移除。</p></li><li><p>静态变量的管理：方法区中存储着类的静态变量，JVM会负责管理这些静态变量的内存分配和释放。</p></li><li><p>字段和方法的访问控制：方法区中存储着类的字段和方法信息，JVM会根据访问权限控制字段和方法的访问。</p></li></ol><p>总之，JVM的方法区内存管理是非常重要的，它对Java程序的性能和稳定性都有很大的影响，开发人员需要了解方法区的内存管理机制，以便更好地优化程序性能。</p><h3 id="JVM的堆内存管理"><a href="#JVM的堆内存管理" class="headerlink" title="JVM的堆内存管理"></a>JVM的堆内存管理</h3><p>JVM的堆内存管理是指JVM对程序运行时堆内存的分配、回收和管理。堆内存是Java程序运行时用来存储对象的区域，包括新生代和老年代两个部分。</p><p>JVM通过垃圾回收机制来管理堆内存。垃圾回收机制是指JVM在程序运行时自动回收无用的对象，释放内存空间。JVM中的垃圾回收机制是基于分代收集算法的，即将堆内存分为新生代和老年代两个部分，分别进行垃圾回收。</p><p>新生代中的对象主要是生命周期较短的对象，JVM采用复制算法进行垃圾回收。将新生代分为一个较大的Eden空间和两个较小的Survivor空间，当Eden空间满时，JVM将存活的对象复制到一个Survivor空间中，同时清空Eden空间。当Survivor空间也满时，JVM将存活的对象复制到另一个Survivor空间中，同时清空原来的Survivor空间。这样，每次垃圾回收时，只需要扫描Eden空间和一个Survivor空间，将存活的对象复制到另一个Survivor空间中，同时清空原来的Eden和Survivor空间，这样就完成了一次垃圾回收。</p><p>老年代中的对象主要是生命周期较长的对象，JVM采用标记-清除算法进行垃圾回收。在标记阶段，JVM会标记所有存活的对象，并将其标记为“可达对象”，将未标记的对象标记为“垃圾对象”。在清除阶段，JVM将所有垃圾对象清除，并将剩余的存活对象移动到一端，然后将整个老年代空间清空。</p><p>JVM的堆内存管理对程序性能有很大影响，因此需要根据具体的应用场景对堆内存大小进行调整。可以通过JVM参数-Xmx和-Xms来设置堆内存的最大值和初始值。同时，还可以通过调整新生代和老年代的比例来优化JVM性能。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法：斐波那契数列</title>
    <link href="/blog/posts/25920.html"/>
    <url>/blog/posts/25920.html</url>
    
    <content type="html"><![CDATA[<p>斐波那契数列的算法思路和Java代码实现。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>斐波那契数列是一个非常经典的数列，在数学上以递推的方式定义为：</p><p><strong>F(0) &#x3D; 0 F(1) &#x3D; 1 F(n) &#x3D; F(n-1) + F(n-2) (n &gt;&#x3D; 2)</strong></p><p>根据这个递推关系式，我们可以用递归或者循环的方式来实现斐波那契数列。</p><h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><p>递归法是最基本的实现方式。当 n &#x3D; 0 或者 n &#x3D; 1 时，斐波那契数列的第 n 个数就是 n。当 n &gt;&#x3D; 2 时，斐波那契数列的第 n 个数就是前两个数之和。因此，我们可以使用递归来实现斐波那契数列，递归过程中依次计算前两个数之和。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> fib(n - <span class="hljs-number">1</span>) + fib(n - <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><p>迭代法是一种比较高效的实现方式。我们定义三个变量 a、b、c 表示斐波那契数列的前三个数，初始化时 a &#x3D; 0，b &#x3D; 1，c &#x3D; 0。然后从第三个数开始用循环计算每个数的值，直到计算到第 n 个数为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>, c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        c = a + b;<br>        a = b;<br>        b = c;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br></code></pre></td></tr></table></figure><p>这两种方法的时间复杂度和空间复杂度都不同，递归法时间复杂度较高，所以不推荐使用，迭<strong>代法时间复杂度较低，空间复杂度也较低，所以是最优的选择</strong>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论SpringBean循环依赖的解决</title>
    <link href="/blog/posts/56540.html"/>
    <url>/blog/posts/56540.html</url>
    
    <content type="html"><![CDATA[<h2 id="什么是循环依赖？"><a href="#什么是循环依赖？" class="headerlink" title="什么是循环依赖？"></a>什么是循环依赖？</h2><blockquote><p>循环依赖是指两个或多个 bean 之间相互依赖，形成了一个闭环。这种情况下，Spring 容器无法确定先创建哪个 bean，因为每个 bean 的创建都需要依赖另一个 bean，导致无法完成依赖注入。如下：</p></blockquote><p>假设有两个 bean，分别是 A 和 B，它们相互引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">private</span> B b;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(B b)</span> &#123;<br>        <span class="hljs-built_in">this</span>.b = b;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">private</span> A a;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">(A a)</span> &#123;<br>        <span class="hljs-built_in">this</span>.a = a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中，A 类的构造函数需要一个 B 类型的参数，而 B 类的构造函数需要一个 A 类型的参数。这样，在 Spring 容器启动时，由于循环依赖的存在，容器无法完成依赖注入，会抛出 BeanCurrentlyInCreationException 异常。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1-构造函数注入"><a href="#1-构造函数注入" class="headerlink" title="1.构造函数注入"></a>1.构造函数注入</h3><p>可以<strong>将其中一个类的构造函数改为使用 @Autowired 注解</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">private</span> B b;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(B b)</span> &#123;<br>        <span class="hljs-built_in">this</span>.b = b;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">private</span> A a;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setA</span><span class="hljs-params">(A a)</span> &#123;<br>        <span class="hljs-built_in">this</span>.a = a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中，A 类的构造函数依旧需要一个 B 类型的参数，但是 B 类的构造函数被去掉了，同时在 B 类的 setA 方法上使用了 @Autowired 注解，该方法将在容器创建 B 类实例后自动调用。这样就可以避免循环依赖的问题。</p><h3 id="2-settter注入"><a href="#2-settter注入" class="headerlink" title="2.settter注入"></a>2.settter注入</h3><p>Setter方法注入是一种依赖注入的方式，通过调用目标对象的setter方法，将依赖对象传递给目标对象。</p><p>举个例子，假设我们有一个ShoppingCart类，它依赖于一个DiscountStrategy接口的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DiscountStrategy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">applyDiscount</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShoppingCart</span> &#123;<br>    <span class="hljs-keyword">private</span> DiscountStrategy discountStrategy;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDiscountStrategy</span><span class="hljs-params">(DiscountStrategy discountStrategy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.discountStrategy = discountStrategy;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">checkout</span><span class="hljs-params">(<span class="hljs-type">double</span> totalPrice)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">discountedPrice</span> <span class="hljs-operator">=</span> discountStrategy.applyDiscount(totalPrice);<br>        <span class="hljs-comment">// perform checkout logic</span><br>        <span class="hljs-keyword">return</span> discountedPrice;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中，ShoppingCart类拥有一个名为discountStrategy的属性，它的类型是DiscountStrategy接口。这意味着ShoppingCart类需要依赖于一个实现了DiscountStrategy接口的对象才能正常工作。</p><p>通过定义setDiscountStrategy()方法，我们可以让外部对象将DiscountStrategy的实现注入到ShoppingCart对象中。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DiscountStrategy</span> <span class="hljs-variable">christmasDiscount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChristmasDiscount</span>();<br><span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCart</span>();<br>cart.setDiscountStrategy(christmasDiscount);<br><br><span class="hljs-type">double</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> <span class="hljs-number">100.0</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">discountedPrice</span> <span class="hljs-operator">=</span> cart.checkout(totalPrice);<br>System.out.println(<span class="hljs-string">&quot;Total price: &quot;</span> + totalPrice + <span class="hljs-string">&quot;, discounted price: &quot;</span> + discountedPrice);<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们创建了一个ChristmasDiscount对象，并将其注入到ShoppingCart对象中。然后我们调用checkout()方法，得到应用折扣后的价格，并输出到控制台上。</p><h3 id="3-使用-Lazy注解"><a href="#3-使用-Lazy注解" class="headerlink" title="3.使用@Lazy注解"></a>3.使用@Lazy注解</h3><p>为了解决这个问题，我们可以使用@Lazy注解将其中一个类延迟到第一次被使用时才进行实例化。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Lazy</span><br>    <span class="hljs-keyword">private</span> B b;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> A a;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们将类A中依赖于类B的属性b使用@Lazy注解进行标注，表示将其延迟初始化。这样，在类A被实例化时，依赖于类B的属性b<strong>并不会立即被初始化，只有在第一次访问该属性时</strong>，才会实例化类B。</p><h3 id="4-使用-Autowired-required-false-注解"><a href="#4-使用-Autowired-required-false-注解" class="headerlink" title="4.使用 @Autowired(required=false) 注解"></a>4.使用 <code>@Autowired(required=false)</code> 注解</h3><p>可以使用 <code>@Autowired(required=false)</code> 注解解决循环依赖问题。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ServiceA.java</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceA</span> &#123;<br><br>    <span class="hljs-meta">@Autowired(required=false)</span><br>    <span class="hljs-keyword">private</span> ServiceB serviceB;<br>&#125;<br><br><span class="hljs-comment">// ServiceB.java</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceB</span> &#123;<br><br>    <span class="hljs-meta">@Autowired(required=false)</span><br>    <span class="hljs-keyword">private</span> ServiceA serviceA;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述例子中，<code>ServiceA</code> 和 <code>ServiceB</code> 之间存在循环依赖关系，但是由于 <code>@Autowired(required=false)</code> 注解的存在，即使 <code>ServiceA</code> 在实例化过程中需要 <code>ServiceB</code> 的实例，但是它不会强制要求 <code>ServiceB</code> 已经完成实例化。这样，就避免了循环依赖的问题。</p><p><strong>需要注意的是</strong>，使用 <code>@Autowired(required=false)</code> 注解可能会导致空指针异常。因此，在使用时应当仔细考虑。</p><p>综上所述，使用构造函数注入或者 setter 方法注入，或者使用@Lazy 注解是解决循环依赖问题比较常见的方式。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringJPA的使用</title>
    <link href="/blog/posts/54852.html"/>
    <url>/blog/posts/54852.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>Spring JPA是Spring框架的一个模块，它提供了一种方便的方法来访问和管理关系型数据库中的数据。JPA是Java持久化API的缩写，它定义了一套标准的接口来管理对象与关系数据库之间的映射关系。</p></blockquote><p>使用Spring JPA，您可以通过配置实体类和关系型数据库之间的映射，从而简化了在应用程序中进行数据存储和检索的工作。Spring JPA还提供了一些方便的功能，如动态查询、事务管理和延迟加载等。</p><p>总之，Spring JPA为开发人员提供了更高效、更易维护的方式来处理数据存储和检索。</p><p>当然，我们可以创建一个简单的使用案例来演示Spring JPA的基本用法。假设我们有一个简单的博客应用程序，其中包括文章和评论。每篇文章可以有多个评论。</p><p>首先，我们需要定义实体类。在这个例子中，我们有两个实体类：<code>Article</code>和<code>Comment</code>。这些实体类分别对应于数据库中的两个表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;articles&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Article</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@Column(nullable = false)</span><br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-meta">@Column(nullable = false)</span><br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-meta">@OneToMany(mappedBy = &quot;article&quot;, cascade = CascadeType.ALL)</span><br>    <span class="hljs-keyword">private</span> List&lt;Comment&gt; comments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    <span class="hljs-comment">// getters and setters omitted for brevity</span><br>&#125;<br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;comments&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comment</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@Column(nullable = false)</span><br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-meta">@ManyToOne</span><br>    <span class="hljs-meta">@JoinColumn(name = &quot;article_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Article article;<br>    <br>    <span class="hljs-comment">// getters and setters omitted for brevity</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，我们使用<code>@Entity</code>注释将Java对象映射到数据库表，使用<code>@Table</code>注释指定表名。我们还为每个属性添加了适当的注释，以便将其映射到数据库列。</p><p>请注意，<code>Article</code>实体类具有一个<code>comments</code>属性，它是一个<code>List&lt;Comment&gt;</code>类型。此属性使用<code>@OneToMany</code>注释进行标注，指定它与<code>Comment</code>实体类之间的关系。我们还使用<code>mappedBy</code>属性指定<code>Comment</code>实体类中的<code>article</code>属性来反向维护这种关系，并使用<code>cascade</code>属性指定级联操作，以确保当我们删除文章时，相关的评论也被删除。</p><p>接下来，我们需要定义一个数据访问对象（DAO）来管理我们的实体类。我们可以使用Spring JPA提供的<code>JpaRepository</code>接口和其默认实现来处理常见的增删改查操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ArticleRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Article, Long&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，我们使用<code>@Repository</code>注释将接口标记为Spring组件，并扩展<code>JpaRepository</code>接口以获取常见的数据访问方法。我们还通过第二个泛型参数告诉Spring JPA这个仓库要管理哪个实体类，以及使用哪种类型的主键。</p><p>最后，我们可以编写一些业务逻辑代码来测试我们的应用程序。在这里，我将在应用程序启动时创建几篇文章和评论。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ArticleRepository articleRepository;<br>    <br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Article</span> <span class="hljs-variable">article1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Article</span>();<br>        article1.setTitle(<span class="hljs-string">&quot;Spring JPA&quot;</span>);<br>        article1.setContent(<span class="hljs-string">&quot;Spring JPA is a convenient way to access relational databases in Spring applications.&quot;</span>);<br>        <br>        <span class="hljs-type">Comment</span> <span class="hljs-variable">comment1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comment</span>();<br>        comment1.setContent(<span class="hljs-string">&quot;Great article!&quot;</span>);<br>        comment1.setArticle(article1);<br>        <br>        <span class="hljs-type">Comment</span> <span class="hljs-variable">comment2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comment</span>();<br>        comment2.setContent(<span class="hljs-string">&quot;Thanks for sharing!&quot;</span>);<br>        comment2.setArticle(article1);<br>        <br>        article1.getComments().add(comment1);<br>        article1.getComments().add(comment2);<br>        <br>        articleRepository.save(article1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，我们使用<code>@Service</code>注释将类标记为Spring组件，并注入<code>ArticleRepository</code>对象。我们还使用<code>@PostConstruct</code>注释将方法标记为在应用程序启动时执行的初始化方法。在这种情况下，我们创建一篇文章，并添加两个评论，然后将它们保存到数据库中。</p><p>您可以通过调用<code>findAll()</code>方法从数据库中检索所有文章。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Article&gt; articles = articleRepository.findAll();<br></code></pre></td></tr></table></figure><p>您还可以通过调用<code>findById()</code>方法按ID从数据库中检索单个文章。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Article&gt; article = articleRepository.findById(<span class="hljs-number">1L</span>);<br><span class="hljs-keyword">if</span> (article.isPresent()) &#123;<br>    <span class="hljs-comment">// do something with the article</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后，您可以通过调用<code>deleteById()</code>方法按ID从数据库中删除单个文章。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">articleRepository.deleteById(<span class="hljs-number">1L</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node升级版本到18步骤</title>
    <link href="/blog/posts/30537.html"/>
    <url>/blog/posts/30537.html</url>
    
    <content type="html"><![CDATA[<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="方式1：apt-get"><a href="#方式1：apt-get" class="headerlink" title="方式1：apt-get"></a>方式1：apt-get</h4><p>要将 Node.js 升级到最新版本（目前是版本 18），可以按照以下步骤操作：</p><p>1.首先，在命令行中使用以下命令卸载旧版本的 Node.js：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-built_in">remove</span> nodejs<br></code></pre></td></tr></table></figure><p>2.安装 Node.js 的 PPA 存储库。在命令行中使用以下命令：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">curl</span> -<span class="hljs-built_in">sL</span> https:<span class="hljs-comment">//deb.nodesource.com/setup_18.x | sudo -E bash -</span><br></code></pre></td></tr></table></figure><p>3.接下来，使用以下命令安装 Node.js 18 版本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install -y nodejs<br></code></pre></td></tr></table></figure><p>4.最后，您可以在命令行中运行以下命令来检查 Node.js 版本：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><p>这应该会显示您已安装的 Node.js 版本号（例如 v18.0.0）。</p><p>请注意，如果您在生产环境中使用 Node.js，则应该谨慎地升级版本，并在升级之前备份数据和配置文件。</p><h4 id="方式2：用yum安装"><a href="#方式2：用yum安装" class="headerlink" title="方式2：用yum安装"></a>方式2：用yum安装</h4><p>如果您使用的是基于Red Hat、CentOS或Fedora的Linux发行版，可以使用yum包管理器来安装Node.js。以下是在CentOS 7上安装Node.js 18版本的示例：</p><ol><li>安装EPEL存储库</li></ol><p>由于Node.js不在默认软件仓库中，因此需要添加EPEL存储库。运行以下命令：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo yum install epel-release<br></code></pre></td></tr></table></figure><ol><li>添加Node.js存储库</li></ol><p>现在，您需要添加Node.js存储库配置文件。可以通过以下命令创建一个名为nodesource.el7.repo的文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vi <span class="hljs-regexp">/etc/yum</span>.repos.d/nodesource.el7.repo<br></code></pre></td></tr></table></figure><p>然后将以下内容添加到文件中：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[nodesource]</span><br><span class="hljs-attr">name</span>=Node.js Packages for Enterprise Linux <span class="hljs-number">7</span> - <span class="hljs-variable">$basearch</span><br><span class="hljs-attr">baseurl</span>=https://rpm.nodesource.com/pub_18.x/el/<span class="hljs-number">7</span>/<span class="hljs-variable">$basearch</span><br><span class="hljs-attr">failovermethod</span>=priority<br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=file:///etc/pki/rpm-gpg/NODESOURCE-GPG-SIGNING-KEY-EL<br><br><span class="hljs-section">[nodesource-debuginfo]</span><br><span class="hljs-attr">name</span>=Node.js Packages for Enterprise Linux <span class="hljs-number">7</span> - <span class="hljs-variable">$basearch</span> - Debug<br><span class="hljs-attr">baseurl</span>=https://rpm.nodesource.com/pub_18.x/el/<span class="hljs-number">7</span>/debug-<span class="hljs-variable">$basearch</span>/<br><span class="hljs-attr">failovermethod</span>=priority<br><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">gpgkey</span>=file:///etc/pki/rpm-gpg/NODESOURCE-GPG-SIGNING-KEY-EL<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><br><span class="hljs-section">[nodesource-source]</span><br><span class="hljs-attr">name</span>=Node.js for Enterprise Linux <span class="hljs-number">7</span> - <span class="hljs-variable">$basearch</span> - Source<br><span class="hljs-attr">baseurl</span>=https://rpm.nodesource.com/pub_18.x/el/<span class="hljs-number">7</span>/SRPMS<br><span class="hljs-attr">failovermethod</span>=priority<br><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">gpgkey</span>=file:///etc/pki/rpm-gpg/NODESOURCE-GPG-SIGNING-KEY-EL<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol><li>安装Node.js 18</li></ol><p>现在，您可以使用以下命令安装Node.js 18：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> nodejs<br></code></pre></td></tr></table></figure><p>这将安装Node.js 18及其依赖项。完成后，您可以通过以下命令检查已安装的Node.js版本：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><p>注意：如果您使用的是其他Linux发行版，请首先检查官方文档以获得适当的指导。</p><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p>要将 Windows 上的 Node.js 升级到最新版本（目前是版本 18），可以按照以下步骤操作：</p><p>1.首先，在浏览器中打开 Node.js 的官方网站（<a href="https://nodejs.org/en/download/%EF%BC%89%E3%80%82">https://nodejs.org/en/download/）。</a></p><p>2.在下载页面中，找到并下载适合您的 Windows 系统版本的 .msi 安装程序。请注意，对于 64 位 Windows 系统，请选择“Windows Installer (.msi)”选项。</p><p>3.打开命令提示符或 PowerShell。</p><p>4.运行以下命令卸载旧版本的 Node.js：（也可以打开卸载程序来操作）</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">npm uninstall -g <span class="hljs-keyword">node</span><span class="hljs-title"></span><br></code></pre></td></tr></table></figure><p><code>注意</code>:完成后，您可以检查是否已成功卸载 Node.js。打开命令行终端，并输入以下命令：node -v。如果提示“’node’ 不是内部或外部命令，也不是可运行的程序 或批处理文件”，说明已经卸载成功。</p><p>5.双击下载的 .msi 文件，然后按照提示完成安装。</p><p>6.安装完成后，您可以在命令行中运行以下命令来检查 Node.js 版本：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><p>这应该会显示您已安装的 Node.js 版本号（例如 v18.0.0）。</p><p>请注意，如果您在生产环境中使用 Node.js，则应该谨慎地升级版本，并在升级之前备份数据和配置文件。</p><h3 id="补充：npm-和node是什么关系"><a href="#补充：npm-和node是什么关系" class="headerlink" title="补充：npm 和node是什么关系"></a>补充：npm 和node是什么关系</h3><p>npm 和 Node.js 之间有很紧密的关系。Node.js 是一种运行时环境，它允许 JavaScript 在服务器端运行，并且提供了许多有用的功能，如文件操作、网络通信等。而 npm 则是 Node.js 的包管理器，允许用户方便地安装、分享和管理 Node.js 模块。</p><p>在 Node.js 中，模块是可以被重复利用的代码单元，npm 上存在着大量的 Node.js 模块，开发者可以通过 npm 安装这些模块来实现自己的项目需求。同时，npm 还允许开发者发布自己的模块，供其他开发者使用。因此，npm 已经成为 Node.js 生态系统中非常重要的一部分。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>毕设整理：高校就业信息管理系统</title>
    <link href="/blog/posts/52114.html"/>
    <url>/blog/posts/52114.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>​趁周末，今天整理一下两个月前的毕业设计的资料。林林总总好多文件，单单论文格式修改就有16个版本。程序大概写了一个半月（那会技术也不大熟练，一个bug，一个奇奇怪怪的问题我可能得卡两天，o(╥﹏╥)o），建议即将写毕业设计的同学早点开工，不至于到后面手忙脚乱（当然如果你是大佬，可以忽略）。另外，我论文也是写得比较晚，同一个小组里面，人家初稿都快完成了，我还没开始写，不过后面也赶着在答辩前完成了。</p><p>​毕业设计也是大学所学的一次总结实践吧，能通过自己积累的知识去亲手完成这个毕业设计也是蛮有成就感的！困难是有<code>亿</code>点点，问题不大，需要<code>亿</code>点时间。干就完了！</p></blockquote><h2 id="选题"><a href="#选题" class="headerlink" title="选题"></a>选题</h2><blockquote><p>​在开始选题那会，我也是很纠结，到底要选什么题目好？（如果你有同样的苦恼，文末有选题供你参考）</p></blockquote><p>​后面我的选题是<code>《高校就业信息管理系统的设计与实现》</code>，这个系统主要是分三个角色：学生，教师，管理员。学生进入系统可以查看招聘信息，填写就业意向，签约工作信息。老师可以查看学生意向，签约信息，发布有效的照片信息。管理员对整个系统数据整体维护与审核，功能权限控制等等，中间根据实际需求动态调整功能细节。具体可以参考我的毕设论文。</p><p>​莫笑，很大众的选题，哈哈！ 同款的题目，百度一搜一大把。不要紧，别人做的是别人的，我又不是照搬，你说是不是，倒是可以参考一下人家做的，也可以给你提供一些思路嘛！</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>前端：</p><ul><li><code>vue</code></li><li><code>ElementUI</code> </li><li><code>Echart</code></li></ul><p>后端：</p><ul><li><code>SpringBoot</code> </li><li><code>Mybatis-plus</code></li></ul><p>数据库：<code>MySQL</code> </p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h3><p>前端</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220828184037448.png" alt="image-20220828184037448" style="zoom:67%;" /><p>后端</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220828184102803.png" alt="image-20220828184102803" style="zoom:67%;" /><p>系统部分截图</p><p>登录页</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220828184144070.png" alt="image-20220828184144070" style="zoom:67%;" /><p>教师进入系统</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220828185530667.png" alt="image-20220828185530667" style="zoom:67%;" /><p>教师端信息统计A</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220828184242376.png" alt="image-20220828184242376" style="zoom:67%;" /><p>管理员系统页面</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220828185807450.png" alt="image-20220828185807450" style="zoom:67%;" /><p>管理员端信息统计B</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220828184329276.png" alt="image-20220828184329276" style="zoom:67%;" /><p>图太多了，就不在这里一一展示了。</p><hr><h2 id="大礼包"><a href="#大礼包" class="headerlink" title="大礼包"></a>大礼包</h2><p>所有与毕设相关的资料都已经整理了，清单如下：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220828190458545.png"></p><p>如果你对毕业设计还没有什么想法，或者还在困扰要选什么题目，你可以下载我之前的毕设全套参考一下。</p><p>如果你有什么问题 或者想法，也欢迎你来私信找我探讨。</p><blockquote><p>关注本公众号《编程亿点有趣》</p><p>回复关键字   <strong><font color='green'>毕业设计</font></strong>   即可获取全部资料！！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>作品</category>
      
    </categories>
    
    
    <tags>
      
      <tag>毕设</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA整合Docker，快速打包部署</title>
    <link href="/blog/posts/36780.html"/>
    <url>/blog/posts/36780.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>尝试了IDEA整合Docker，坑有些多，但经过查阅资料都一一解决了，写了个案例，感觉这种方式确实要方便很多。下面来整理下步骤：</p></blockquote><h3 id="一、安装Docker"><a href="#一、安装Docker" class="headerlink" title="一、安装Docker"></a>一、安装Docker</h3><p>准备一台Linux，我这里用的是centos 7 mini 版，然后安装Docker</p><ol><li>安装Device Mapper：</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><ol start="2"><li>配置Docker的yum源：</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><ol start="3"><li>更新yum缓存</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum makecache fast<br></code></pre></td></tr></table></figure><ol start="4"><li>安装Docker-ce</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install docker-ce<br></code></pre></td></tr></table></figure><ol start="5"><li>等待上述加载完，然后启动Docker</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start docker<br></code></pre></td></tr></table></figure><ol start="6"><li>校验Docker是否安装成功</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker -v<br></code></pre></td></tr></table></figure><pre><code class="hljs">如果能输出版本号等信息，说明Docker安装OK，如下：</code></pre>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker -v<br>Docker version 20.10.22, build 3a2c30b<br></code></pre></td></tr></table></figure><h3 id="二、开启Docker的远程访问"><a href="#二、开启Docker的远程访问" class="headerlink" title="二、开启Docker的远程访问"></a>二、开启Docker的远程访问</h3><ol><li><p>修改服务文件：<code>/lib/systemd/system/docker.service</code></p><p> 新增一行：<code>ExecStart=/usr/bin/dockerd  -H tcp://0.0.0.0:2375  -H unix:///var/run/docker.sock</code></p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116001447210.png" alt=" "></p><p> <code>ps</code>：注意间隔，别写错了（我这步就是因为-H跟前面的写一块了，结果报了一堆奇怪的问题，(⊙o⊙)…</p></li><li><p>重新加载配置文件</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload<br></code></pre></td></tr></table></figure><ol start="3"><li>重启服务</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart docker<br></code></pre></td></tr></table></figure><ol start="4"><li><p>内部检验：curl <a href="http://127.0.0.1:2375/info">http://127.0.0.1:2375/info</a></p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116002022460.png"></p></li><li><p>外部访问（浏览器访问你Linux的IP+2375&#x2F;info）</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116002229312.png"></p><p> 能访问到如上信息，说明外部访问也是OK的</p><p> <code>ps</code>：如果你访问不到，注意检查下2375端口是否开放，我这里安装了宝塔面板，可以方便在安全里添加开放端口的规则，当然你不装这个也行，用命令行也是可以操作的呢。</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116002534553.png"></p></li></ol><h3 id="三、在IDEA整合Docker"><a href="#三、在IDEA整合Docker" class="headerlink" title="三、在IDEA整合Docker"></a>三、在IDEA整合Docker</h3><ol><li><p>先安装个插件<code>Docker</code>（在插件市场里面可以找到）</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116002756415.png"></p></li><li><p>配置连接远程Docker信息</p><p> 信息填写完整，下方出现<code>connection successful</code>说明连接成功！</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116003020509.png"></p></li><li><p>启动service</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116003253279.png"></p></li><li><p>然后就能浏览远程Docker里面的信息了</p><p> （里面我拉了一些其他的镜像，可忽略）</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116003343708.png"></p></li></ol><h3 id="四、服务打镜像"><a href="#四、服务打镜像" class="headerlink" title="四、服务打镜像"></a>四、服务打镜像</h3><p>1.创建一个简单的SpringBoot项目，结构如下：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116003633915.png"></p><p>2.pom.xml如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.lys<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>test-docker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 指定maven.compiler.plugin 配置版本，解决编译问题 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!--项目的启动类--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.lys.DemoApplication<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>ZIP<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.写一个简单的Controller，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lys.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoController</span> &#123;<br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test  123!!!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lys;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(DemoApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.启动项目，确保项目是正常启动</p><p>6.在项目的根目录下，编写Dockerfile，内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#指定基础镜像，在其上进行定制</span><br><span class="hljs-keyword">FROM</span> williamyeh/java8:latest<br><br><span class="hljs-comment">#维护者信息</span><br><span class="hljs-keyword">MAINTAINER</span> liyansheng<br><br><span class="hljs-comment">#这里的 /tmp 目录就会在运行时自动挂载为匿名卷，任何向 /tmp 中写入的信息都不会记录进容器存储层</span><br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> /tmp</span><br><br><span class="hljs-comment">#复制上下文目录下的target/demo-1.0.0.jar 到容器里</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> target/test-docker-1.0-SNAPSHOT.jar  docker-0.0.1.jar</span><br><br><span class="hljs-comment">#bash方式执行，使demo-1.0.0.jar可访问</span><br><span class="hljs-comment">#RUN新建立一层，在其上执行这些命令，执行结束后， commit 这一层的修改，构成新的镜像。</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> bash -c <span class="hljs-string">&quot;touch /docker-0.0.1.jar&quot;</span></span><br><br><span class="hljs-comment">#声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><br><span class="hljs-comment">#指定容器启动程序及参数   &lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;docker-0.0.1.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>7.将项目打jar包</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116004108628.png"></p><p>如果打包成功，在项目下的target下我们能看到jar包</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116004216546.png"></p><p>8.切换到Dockerfile文件，点击按钮打包镜像</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116004354868.png"></p><p>在之前可以新增一些简单的配置</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116004802417.png"></p><p>然后点击上图中的run按钮，进行镜像构建与容器启动</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116004953308.png"></p><p>切换到Log面板，我们可以看到容器启动的日志</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116005039825.png"></p><p>在Dashboard可以修改配置，比如我们新增端口映射：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116005209773.png"></p><p>这样我们在外部通过8080端口访问到容器内端口8080的服务</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116005328517.png"></p><p>在控制面板，还提供了一些快捷按钮给我们操作：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116005531044.png"></p><p>比如进入容器：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230116005547080.png"></p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>综上，在IDEA里面整合Docker确实为我们提供很大的便利，比起传统的打包上传-打镜像-启动容器，上面的方式要快速很多，更多细节大家可以进一步探索！！！</p><h3 id="六、踩坑"><a href="#六、踩坑" class="headerlink" title="六、踩坑"></a>六、踩坑</h3><ol><li><h4 id="启动容器失败"><a href="#启动容器失败" class="headerlink" title="启动容器失败"></a>启动容器失败</h4> 报错：</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">(iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 80 -j DNAT --to-destination 172.17.0.2:80 ! -i docker0: iptables: No chain/target/match by that name.<br> (exit status 1)).<br></code></pre></td></tr></table></figure><p>  <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230114231224128.png"></p><ol start="2"><li><h4 id="IDEA打镜像报错"><a href="#IDEA打镜像报错" class="headerlink" title="IDEA打镜像报错"></a>IDEA打镜像报错</h4><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230115220606008.png"></p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230115220836929.png"></p><p> 上述问题我也看了很多网上的解决方案，但是我没有得到解决，最后我是卸载然后重装了Docker然后才没有报上面的错误</p></li></ol><blockquote><p>本次分享到这，如有不对的地方欢迎指正！下方可评论留言！</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>📌强强支援：远程调试🖥 需求定做📝 疑难解答❓ 攻bug🐛.....</title>
    <link href="/blog/remote_help/"/>
    <url>/blog/remote_help/</url>
    
    <content type="html"><![CDATA[<h2 id="👍优势看得见，点我"><a href="#👍优势看得见，点我" class="headerlink" title="👍优势看得见，点我"></a><a href="/blog/issues_flow/">👍优势看得见，点我</a></h2><p><img src="http://cdn.qiniu.liyansheng.top/img/ad2.jpg"><br><img src="http://cdn.qiniu.liyansheng.top/img/20240621170353.png"></p><h2 id="📝调试分类"><a href="#📝调试分类" class="headerlink" title="📝调试分类"></a>📝调试分类</h2><table><thead><tr><th>序号</th><th>内容</th><th>服务费</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>博主亲作，普通课程设计（不含框架），大作业等</td><td>30</td><td></td></tr><tr><td>2</td><td>博主亲作，如SSM，Springboot，vue等综合型项目工程</td><td>45</td><td></td></tr><tr><td>3</td><td>博主亲作，二次功能扩展</td><td>45+</td><td><strong><font color='blue'>看具体项目商定</font></strong></td></tr><tr><td>4</td><td>来源互联网，调试改进，二改继续扩展</td><td>60+</td><td><strong><font color='blue'>看具体项目商定</font></strong></td></tr><tr><td>5</td><td>你有程序，普通项目调试</td><td>40+</td><td><strong><font color='blue'>看具体项目商定</font></strong></td></tr><tr><td>6</td><td>你有程序，综合项目，如SSM，Springboot，vue 等</td><td>50+</td><td><strong><font color='blue'>看具体项目商定</font></strong></td></tr><tr><td>7</td><td>你有需求，没有程序，帮你去试错匹配开源项目（含调试）</td><td>70+</td><td><strong><font color='blue'>看具体项目商定</font></strong></td></tr><tr><td>8</td><td>你有需求，程序定做，先来评估主题，需求，功能等说明文档，报价看工期，难度等</td><td>商定</td><td><strong><font color='blue'>看具体项目商定</font></strong></td></tr><tr><td>9</td><td>你有程序，需改bug，解决已知问题</td><td>35+</td><td><strong><font color='blue'>看具体项目商定</font></strong></td></tr><tr><td>10</td><td>你有程序，需要增加功能</td><td>45+</td><td><strong><font color='blue'>看具体项目商定</font></strong></td></tr><tr><td>11</td><td>一对一讲解与答疑</td><td>45+</td><td><strong><font color='blue'>看具体项目商定</font></strong></td></tr><tr><td>12</td><td>报告、论文代写，综合您的模板要求</td><td>40+</td><td><strong><font color='blue'>看具体项目商定</font></strong></td></tr><tr><td>13</td><td>软件工具安装：IDEA，MySQL，Eclipse，VSCode，JDK，SDK等等</td><td>10+</td><td><strong><font color='blue'>看具体项目商定</font></strong></td></tr><tr><td>14</td><td>代画图：功能图，类图，ER图，时序图，架构图等等</td><td>15+</td><td><strong><font color='blue'>看具体项目商定</font></strong></td></tr></tbody></table><h2 id="📍如何预约？远程调试"><a href="#📍如何预约？远程调试" class="headerlink" title="📍如何预约？远程调试"></a>📍如何预约？远程调试</h2><ol><li>扫码进入Q群（619298035）或者 <strong><font color='red'>点下方图标跳转👇</font></strong><br><a target="_blank" href="https://qm.qq.com/cgi-bin/qm/qr?k=NZUoWMzd3PQLWwxRGMiBNYEnVkEdNq__&jump_from=webapi&authKey=kgAofDqUzgwMCSX+UQQwxf837zMeWFGGmo4iIcbgkklW2pdfmVOlxPWAK6sMYMaC"><img border="0" src="http://cdn.qiniu.liyansheng.top/img/group.png" alt="远程调试-学习交流" title="远程调试-学习交流"></a></li><li>私聊<strong>群主</strong>🥇</li><li>预约远程调试时间</li></ol><h2 id="🛠远程软件"><a href="#🛠远程软件" class="headerlink" title="🛠远程软件"></a>🛠远程软件</h2><table><thead><tr><th>软件</th><th>备注</th></tr></thead><tbody><tr><td><strong>向日葵</strong></td><td>👉 <a href="https://sunlogin.oray.com/">点我去下载</a></td></tr><tr><td><strong>Todesk</strong></td><td>👉 <a href="https://www.todesk.com/">点我去下载</a></td></tr><tr><td><strong>QQ远程</strong></td><td>(可能会卡)</td></tr></tbody></table><h2 id="📚常用工具"><a href="#📚常用工具" class="headerlink" title="📚常用工具"></a>📚常用工具</h2><table><thead><tr><th>名称</th><th>地址</th></tr></thead><tbody><tr><td>IDEA社区版</td><td><a href="https://www.jetbrains.com/zh-cn/idea/download/?section=windows">点我去下载</a></td></tr><tr><td>DBeaver(数据库可视化)</td><td><a href="https://dbeaver.io/">点我去下载</a></td></tr><tr><td>Navcat(数据库可视化)</td><td><a href="https://www.navicat.com.cn/products#navicat">点我去下载</a></td></tr><tr><td>MySQL</td><td><a href="https://dev.mysql.com/downloads/mysql/">点我去下载</a> ❤ <a href="https://qm.qq.com/cgi-bin/qm/qr?k=NZUoWMzd3PQLWwxRGMiBNYEnVkEdNq__&jump_from=webapi&authKey=kgAofDqUzgwMCSX+UQQwxf837zMeWFGGmo4iIcbgkklW2pdfmVOlxPWAK6sMYMaC">一键安装版</a></td></tr><tr><td>Tomcat9</td><td><a href="https://qm.qq.com/cgi-bin/qm/qr?k=NZUoWMzd3PQLWwxRGMiBNYEnVkEdNq__&jump_from=webapi&authKey=kgAofDqUzgwMCSX+UQQwxf837zMeWFGGmo4iIcbgkklW2pdfmVOlxPWAK6sMYMaC">点我去群文件下载</a></td></tr><tr><td>VScode</td><td><a href="https://code.visualstudio.com/">点我去下载</a></td></tr><tr><td>Git</td><td><a href="https://git-scm.com/download/win">点我去下载</a></td></tr><tr><td>1Panel</td><td><a href="https://1panel.cn/docs/installation/online_installation/">Linux可视化操作面板，点我去下载</a></td></tr><tr><td>nodejs环境</td><td><a href="https://nodejs.cn/en/download">点我去下载</a></td></tr><tr><td>路过图床</td><td><a href="https://imgse.com/">点我前往</a></td></tr><tr><td>Shields在线徽章</td><td><a href="https://shields.io/">点我前往</a></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务2：毕设/课设等程序定制</title>
    <link href="/blog/posts/46056.html"/>
    <url>/blog/posts/46056.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>为满足有需要定制《毕业设计》、《课程设计》的伙伴，特推出<strong>程序定制</strong>服务。</p><p>流程如下：</p></blockquote><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20221017233625670.png"></p><ol><li><strong>确定选题</strong>（你要做什么类型的程序，如xxx系统）</li><li><strong>确定功能需求</strong>（你需要实现什么功能，达到怎样的效果）</li><li><strong>确定技术栈</strong>（你想用什么语言、框架去实现）</li><li><strong>确定周期</strong>（你能给多久时间去完成）</li><li><strong>成本预算</strong>（双方协商）</li><li>**付定金30%**（达成共识，预付总成本的30%作为定金）</li><li><strong>正式着手开发</strong></li><li><strong>第一次交付、测试</strong></li><li><strong>根据实际需要改进</strong>（你觉得哪做的不好，哪些地方需要改进，优化，调整）</li><li><strong>第二次交付，测试</strong></li><li><strong>验收通过，付尾款（另70%）</strong></li><li>（程序定制完成）</li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>有疑问的伙伴可以先咨询博主哦！</p>]]></content>
    
    
    <categories>
      
      <category>服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo添加live2d人物动画</title>
    <link href="/blog/posts/31779.html"/>
    <url>/blog/posts/31779.html</url>
    
    <content type="html"><![CDATA[<ol><li><p>在 Hexo 博客的 根目录下新建 &#x2F;live2d_models 文件夹</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230318061123366.png" alt="image-20230318061123366"></p></li><li><p>下载 live2d-widget.js 和对应模型库</p><p> 点击查看：<a href="https://blog.csdn.net/wang_123_zy/article/details/87181892?spm=1001.2014.3001.5506">Live2D看板娘+模型预览</a></p><p> 安装：打开根目录，命令窗口：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install live2d-widget-model-hijiki<br></code></pre></td></tr></table></figure></li><li><p>将下载的 live2d-widget.js (在node_modules里面)和模型库文件放入 &#x2F;live2d_models 文件夹中</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230318061645524.png" alt="image-20230318061645524"></p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20230318061711618.png" alt="image-20230318061711618"></p></li><li><p>在 Hexo 主题的配置文件中添加 live2d 配置</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Live2D</span><br><span class="hljs-comment">## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="hljs-attr">live2d:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># enable: false</span><br>  <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span> <span class="hljs-comment"># 默认</span><br>  <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span> <span class="hljs-comment"># 插件在站点上的根目录(相对路径)</span><br>  <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span> <span class="hljs-comment"># 脚本文件相对与插件根目录路径</span><br>  <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span> <span class="hljs-comment"># 模型文件相对与插件根目录路径</span><br>  <span class="hljs-comment"># scriptFrom: jsdelivr # jsdelivr CDN</span><br>  <span class="hljs-comment"># scriptFrom: unpkg # unpkg CDN</span><br>  <span class="hljs-comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span><br>  <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br>  <span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 调试, 是否在控制台输出日志</span><br>  <span class="hljs-attr">model:</span><br>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-hijiki</span><br>    <span class="hljs-attr">scale:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">hHeadPos:</span> <span class="hljs-number">0.5</span><br>    <span class="hljs-attr">vHeadPos:</span> <span class="hljs-number">0.618</span><br>    <span class="hljs-comment"># use: live2d-widget-model-wanko # npm-module package name</span><br>    <span class="hljs-comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span><br>    <span class="hljs-comment"># use: ./wives/wanko # 相对于博客根目录的路径</span><br>    <span class="hljs-comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span><br>  <span class="hljs-attr">display:</span><br>    <span class="hljs-attr">superSample:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">200</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">300</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>    <span class="hljs-attr">hOffset:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">vOffset:</span> <span class="hljs-number">-50</span><br>  <span class="hljs-attr">mobile:</span><br>    <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否在移动设备上显示</span><br>    <span class="hljs-attr">scale:</span> <span class="hljs-number">0.5</span> <span class="hljs-comment"># 移动设备上的缩放       </span><br>  <span class="hljs-attr">react:</span><br>    <span class="hljs-attr">opacityDefault:</span> <span class="hljs-number">0.7</span><br>    <span class="hljs-attr">opacityOnHover:</span> <span class="hljs-number">0.8</span><br></code></pre></td></tr></table></figure></li><li><p>执行 hexo g 和 hexo s 命令重新生成和启动博客，查看效果</p></li></ol><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230318062115087.png" alt="image-20230318062115087"></p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo集成admin插件</title>
    <link href="/blog/posts/37787.html"/>
    <url>/blog/posts/37787.html</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Hexo Admin</strong> 插件使你可以在浏览器中管理 Hexo 博客，包括新建、编辑和删除文章、页面和草稿。管理员可以在后台轻松地完成这些任务，而不需要进入命令行。</p></blockquote><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>安装 Hexo Admin 插件</li></ul><p>在 Hexo 博客的根目录中，使用以下命令安装 Hexo Admin 插件：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-admin</span><br></code></pre></td></tr></table></figure><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230318060055736.png" alt="image-20230318060055736"></p><ul><li>修改 _config.yml 文件</li></ul><p>打开 Hexo 博客的 _config.yml 文件，找到 <code># Extensions</code> 部分，然后添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">admin:</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-attr">password_hash:</span> <span class="hljs-string">098f6bcd4621d373cade4e832627b4f6</span><br>  <span class="hljs-comment"># 更改上面的密码时，请使用以下命令来生成新密码的 hash 值</span><br>  <span class="hljs-comment"># printf &quot;你的密码&quot; | openssl sha1</span><br>  <span class="hljs-comment"># 根据提示输入密码</span><br></code></pre></td></tr></table></figure><p>密码哈希值可由下面的命令生成：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">printf <span class="hljs-string">&quot;your password&quot;</span> <span class="hljs-string">| openssl sha1</span><br></code></pre></td></tr></table></figure><p>其中 <code>your password</code> 为你的密码。</p><p>将输出的密码哈希值复制到 <code>password_hash</code> 中。</p><p>另外也可以使用python生成密码哈希值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>password = <span class="hljs-string">&quot;your password&quot;</span><br>hash_object = hashlib.sha256(password.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>hex_dig = hash_object.hexdigest()<br><span class="hljs-built_in">print</span>(hex_dig)<br></code></pre></td></tr></table></figure><p>Hexo Admin 插件默认用户名为 <code>admin</code>，如果需要修改用户名，请将 <code>username</code> 修改为你所需的用户名。</p><ul><li>启动 Hexo Server</li></ul><p>使用以下命令启动 Hexo Server：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>打开管理员页面</p><p>在浏览器中访问 <code>http://localhost:4000/admin</code>，输入用户名和密码即可登录管理员页面。</p><p>在管理员页面中，你可以轻松地管理博客，包括创建、编辑和删除文章、页面和草稿。</p><p>需要注意的是，Hexo Admin 插件并不适用于所有的 Hexo 主题。如果主题无法与 Hexo Admin 插件兼容，请查看主题文档以获取管理博客的其他方法。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230318055623988.png" alt="image-20230318055623988"></p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPG公钥生成问题-解决(Linux)</title>
    <link href="/blog/posts/37189.html"/>
    <url>/blog/posts/37189.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天要用到GPG公钥，在码云上，于是按照官方的步骤去操作，软件我下载安装好了，就是不好使，遇到的问题挺多。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>下载地址：<a href="https://gpg4win.org/">Gpg4win</a></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230317005007100.png" alt="image-20230317005007100">这个工具安装，打开后提示报错</p><p>如下：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230317005100081.png" alt="image-20230317005100081"></p><p>点OK后</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230317005129974.png" alt="image-20230317005129974"></p><p>于是我找了网上的一些解决方案，还是不行</p><p>我也尝试在不同的硬盘上重装了几次，还是不行</p><blockquote><p>换种方式，既然在<strong>win</strong>上不好使，那就上<strong>Linux</strong>上试试</p></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li><p>在 Linux 终端中安装 GnuPG 工具。可以运行以下命令：</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yum install gnupg <br></code></pre></td></tr></table></figure></li><li><p>打开终端并运行以下命令，生成密钥对：</p> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">gpg <span class="hljs-comment">--gen-key</span><br></code></pre></td></tr></table></figure></li><li><p>根据提示，选择要使用的加密算法和密钥长度。选择默认选项即可。</p></li><li><p>输入你的用户名、电子邮件地址和密码。这些信息将与你的密钥关联，并最终生成公钥和私钥。</p></li><li><p>在生成过程中，系统会提示你随机移动鼠标或者其他的随机操作，以增加生成密钥的随机性和安全性。</p></li><li><p>GPG 工具将生成公钥和私钥。可以使用以下命令查看你的公钥：</p> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">gpg <span class="hljs-comment">--list-keys</span><br></code></pre></td></tr></table></figure></li><li><p>导出公钥，以便在其他设备上使用：</p> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gpg <span class="hljs-attr">--armor</span> <span class="hljs-attr">--export</span> your-email-<span class="hljs-selector-tag">address</span> &gt; publickey.asc<br></code></pre></td></tr></table></figure><p> 将 <code>your-email-address</code> 替换为你在生成密钥时使用的电子邮件地址。</p><p> 这会将公钥导出为 ASCII 格式，并将其保存在名为 <code>publickey.asc</code> 的文件中。</p></li><li><p>复制并粘贴 ASCII 格式的公钥到需要使用的地方，比如代码托管网站、电子邮件签名等。</p></li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>将上述的publickey.asc里面的全部内容粘贴到下方的公钥框，点确定即可成功添加！</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230317010046157.png" alt="image-20230317010046157"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot整合Kafka步骤</title>
    <link href="/blog/posts/3865.html"/>
    <url>/blog/posts/3865.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>简单整理下Springboot整合Kafka的步骤，并实现简单的案例</p></blockquote><p>1、创建Springboot项目</p><p>直接模板创建，或者先创建maven项目，然后改造成Springboot项目，这里不再演示这个</p><p>2、引入依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、填写配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.154</span><span class="hljs-number">.134</span><span class="hljs-string">:9092</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">enable-auto-commit:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">auto-commit-interval:</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>4、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lys;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@ContextConfiguration(classes = DiyApplication.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaProducer kafkaProducer;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testKafka</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 参数1：主题，参数2：信息</span><br>        kafkaProducer.sendMessage(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;你好&quot;</span>);<br>        kafkaProducer.sendMessage(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;在么&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>*<span class="hljs-number">10</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaProducer</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaTemplate kafkaTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String topic,String content)</span>&#123;<br>        kafkaTemplate.send(topic,content);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaConsumer</span>&#123;<br>    <span class="hljs-comment">// 当收到信息，自动执行这个方法</span><br>    <span class="hljs-meta">@KafkaListener(topics = &#123;&quot;test&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(ConsumerRecord record)</span>&#123;<br>        System.out.println(record.value());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、结果</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20230226184626286.png" alt="image-20230226184626286"></p><p>可能出现的问题连上服务器：<a href="https://www.cnblogs.com/qianxiaoPro/p/15788854.html">Kafka client 客户端远程连接 一直报网络错误问题 - 浅笑19 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch快速入门与部署</title>
    <link href="/blog/posts/6850.html"/>
    <url>/blog/posts/6850.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>这段时间因工作需要，学习了ElasticSearch的相关知识。下面就自己在实践中遇到问题以及操作要点做一个总结。</p></blockquote><h2 id="一、如何启动"><a href="#一、如何启动" class="headerlink" title="一、如何启动"></a>一、如何启动</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官网 &#x3D;》 <a href="https://www.elastic.co/cn/elasticsearch/">Elasticsearch：官方分布式搜索和分析引擎 | Elastic</a></p><p>下载压缩包，解压</p><p>进入配置，修改配置，主要有两个文件需要修改。</p><p>1.<code>elasticsearch.yml</code>(里面的配置默认都是注释了的，将下面的四个配置的打开，名称可以自定义)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">my-application</span><br><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-1</span><br><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>]<br><br></code></pre></td></tr></table></figure><p>2.<code>jvm.options</code>(默认配置内存是1G，可以修改小点，如我修改成256m，具体根据你的机器配置)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">-Xms256m<br>-Xmx256m<br></code></pre></td></tr></table></figure><h3 id="启动报错1"><a href="#启动报错1" class="headerlink" title="启动报错1"></a>启动报错1</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">@VM-16-12-centos bin]$ ./elasticsearch could not find java in bundled jdk at ...<br></code></pre></td></tr></table></figure><p>解决：上述报错并非没有装jdk，而是你从root用户切换到普通用户时，ES安装目录的所有者还是root，普通用户没有权限，因此先给非root用户授权，使用<code>chmod -R 组：成员 文件名</code>，之后再切换到该用户启动ES</p><h3 id="启动报错2"><a href="#启动报错2" class="headerlink" title="启动报错2"></a>启动报错2</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR: [1] bootstrap checks failed<br>[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<br>ERROR: Elasticsearch did not exit normally - check the logs at /usr/local/ES/logs/my-application.log<br>[2022-10-17T16:53:35,547][INFO ][o.e.n.Node               ] [node-1] stopping ...<br>[2022-10-17T16:53:35,556][INFO ][o.e.n.Node               ] [node-1] stopped<br>[2022-10-17T16:53:35,557][INFO ][o.e.n.Node               ] [node-1] closing ...<br>[2022-10-17T16:53:35,581][INFO ][o.e.n.Node               ] [node-1] closed<br>[2022-10-17T16:53:35,583][INFO ][o.e.x.m.p.NativeController] [node-1] Native controller process has stopped - no new native processes can be started<br></code></pre></td></tr></table></figure><p>解决：内存不足。用root身份编辑<code>/etc/sysctl.conf</code>，在里面添加一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vm.max_map_count=655360<br></code></pre></td></tr></table></figure><p>保存，切换到非root用户，再次启动ES即可。</p><h3 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下面的方式后台启动不好使</span><br>[wyp@VM-16-12-centos bin]$ nohup . elasticsearch &amp;<br>[1] 25834<br>[wyp@VM-16-12-centos bin]$ nohup: 忽略输入并把输出追加到&quot;nohup.out&quot;<br>nohup: 无法运行命令&quot;.&quot;: 权限不够<br>^C<br>[1]+  退出 126              nohup . elasticsearch<br>[wyp@VM-16-12-centos bin]$ sudo  nohup . elasticsearch &amp;<br>[1] 26670<br>[wyp@VM-16-12-centos bin]$ curl http://localhost:9200<br>curl: (7) Failed connect to localhost:9200; 拒绝连接<br><br>[1]+  已停止               sudo nohup . elasticsearch<br>[wyp@VM-16-12-centos bin]$ ps<br>  PID TTY          TIME CMD<br>24627 pts/0    00:00:00 bash<br>29107 pts/0    00:00:00 ps<br>[wyp@VM-16-12-centos bin]$ jps<br>30835 Jps<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">后台启动，直接在命令后面加上<span class="hljs-string">&#x27;-d&#x27;</span>即可</span><br>[wyp@VM-16-12-centos bin]$ ./elasticsearch -d<br>[wuyanping@VM-16-12-centos bin]$ jps<br>806 Jps<br>31831 Elasticsearch<br></code></pre></td></tr></table></figure><h3 id="测试ES是否启动成功"><a href="#测试ES是否启动成功" class="headerlink" title="测试ES是否启动成功"></a>测试ES是否启动成功</h3><p>格式：<code>[ip]:[端口]</code> ，（get请求）</p><p>如果是云服务器，记得先去开放相应的端口。</p><p>如：<a href="http://localhost:9200，响应如下：(安装ok)">http://localhost:9200，响应如下：(安装ok)</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LIYANSHENG&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cluster_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;elasticsearch&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cluster_uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;o7KAFPvPTA-d75SUy_TuOQ&quot;</span><span class="hljs-punctuation">,</span><br>-<span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7.8.0&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;build_flavor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;build_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zip&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;build_hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;757314695644ea9a1dc2fecd26d1a43856725e65&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;build_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2020-06-14T19:35:50.234439Z&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;build_snapshot&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;lucene_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8.5.1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;minimum_wire_compatibility_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6.8.0&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;minimum_index_compatibility_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6.0.0-beta1&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;tagline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;You Know, for Search&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h2><h3 id="创建索引（put"><a href="#创建索引（put" class="headerlink" title="创建索引（put)"></a>创建索引（put)</h3><p>格式：<code>[ip]:[端口]/[索引名称]</code></p><p>如我要创建一个”teacher”索引，往  <a href="http://localhost:9200/teacher">http://localhost:9200/teacher</a> 发送put请求即可，响应如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;shards_acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teacher&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如果索引已经存在了，会看到如下的响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;root_cause&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;resource_already_exists_exception&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index [teacher/n0laWxSFQmaMYSKDF5WFhw] already exists&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;index_uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;n0laWxSFQmaMYSKDF5WFhw&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teacher&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;resource_already_exists_exception&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index [teacher/n0laWxSFQmaMYSKDF5WFhw] already exists&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index_uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;n0laWxSFQmaMYSKDF5WFhw&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teacher&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="获取索引消息（get）"><a href="#获取索引消息（get）" class="headerlink" title="获取索引消息（get）"></a>获取索引消息（get）</h3><p>格式：<code>[ip]:[端口]/[索引名称]</code></p><p><a href="http://localhost:9200/shop">http://localhost:9200/shop</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;shop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;aliases&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>               <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                         <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                         <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                         <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                              <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                   <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>                                   <span class="hljs-attr">&quot;ignore_above&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>                              <span class="hljs-punctuation">&#125;</span><br>                         <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;images&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                         <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                         <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                              <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                   <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>                                   <span class="hljs-attr">&quot;ignore_above&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>                              <span class="hljs-punctuation">&#125;</span><br>                         <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                         <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                         <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                              <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                   <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>                                   <span class="hljs-attr">&quot;ignore_above&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>                              <span class="hljs-punctuation">&#125;</span><br>                         <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                         <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;float&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                         <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                         <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                              <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                   <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>                                   <span class="hljs-attr">&quot;ignore_above&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>                              <span class="hljs-punctuation">&#125;</span><br>                         <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>               <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>               <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;creation_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1663133757735&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;number_of_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;number_of_replicas&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nbTbT1AOT2aSXAn3-uchJQ&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                         <span class="hljs-attr">&quot;created&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7080099&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;provided_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shop&quot;</span><br>               <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>     <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="查询所有的索引（get"><a href="#查询所有的索引（get" class="headerlink" title="查询所有的索引（get)"></a>查询所有的索引（get)</h3><p>格式：<code>[ip]:[端口]/_cat/indices?v</code></p><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">health status index   uuid                   pri rep docs.count docs.deleted store.size pri.store.size<br>yellow open   shop    -cxpw_nYQCegHFdLfmmGYg   1   1          1            0      8.5kb          8.5kb<br>yellow open   teacher n0laWxSFQmaMYSKDF5WFhw   1   1          0            0       208b           208b<br>yellow open   student nimW9qq5RMmgST1VQKbjNQ   1   1          0            0       208b           208b<br></code></pre></td></tr></table></figure><h3 id="创建文档（添加数据）（post）"><a href="#创建文档（添加数据）（post）" class="headerlink" title="创建文档（添加数据）（post）"></a>创建文档（添加数据）（post）</h3><p>格式：<code>[ip]:[端口]/[索引名称]/_doc</code>，数据放在body里面</p><p>如：<a href="http://localhost:9200/teacher/_doc">http://localhost:9200/teacher/_doc</a></p><p>body的json数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;liming&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">20</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>发送请求反馈：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teacher&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;u-no7YMBmUlMW95VUwbG&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="发送数据时自定义主键（post）"><a href="#发送数据时自定义主键（post）" class="headerlink" title="发送数据时自定义主键（post）"></a>发送数据时自定义主键（post）</h3><p>格式：<code>[ip]:[端口]/[索引名称]/_doc/[键名称]</code></p><p>如：<a href="http://localhost:9200/teacher/_doc/1001">http://localhost:9200/teacher/_doc/1001</a> （在后面接上主键名即可，同样在body里提供要提交的数据）</p><h3 id="根据主键查询信息（get"><a href="#根据主键查询信息（get" class="headerlink" title="根据主键查询信息（get)"></a>根据主键查询信息（get)</h3><p>格式：<code>[ip]:[端口]/[索引名称]/_doc/[键名称]</code></p><p>如：<a href="http://localhost:9200/teacher/_doc/1001">http://localhost:9200/teacher/_doc/1001</a>   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teacher&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1001&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;found&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhangsan&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="更新文档（post）"><a href="#更新文档（post）" class="headerlink" title="更新文档（post）"></a>更新文档（post）</h3><p>格式：<code>[ip]:[端口]/[索引名称]/_doc/[键名称]</code>，（在body附上数据即可）</p><h3 id="查询全部"><a href="#查询全部" class="headerlink" title="查询全部"></a>查询全部</h3><p>格式：<code>[ip]:[端口]/[索引名称]/_search</code></p><p>发送get请求：<a href="http://localhost:9200/teacher/_search">http://localhost:9200/teacher/_search</a> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;took&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">633</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;timed_out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;skipped&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;relation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;max_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teacher&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;u-no7YMBmUlMW95VUwbG&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;liming&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teacher&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1001&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lisi&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="三、条件查询"><a href="#三、条件查询" class="headerlink" title="三、条件查询"></a>三、条件查询</h2><p>可以直接在地址栏后接查询参数，<code>q=[key][value]</code></p><p>直接在url拼接：如  <a href="http://localhost:9200/shop/_search?q=title:%E8%8B%B9%E6%9E%9C">http://localhost:9200/shop/_search?q=title:苹果</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;took&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">47</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;timed_out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;skipped&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;relation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;max_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.9616582</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shop&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;daDNOoMBS9TfkFcrrh5_&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.9616582</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;苹果手机&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;苹果&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;images&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6999.00</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在请求体给参数，如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;华&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>补充</code>：</p><p>查询全部也可以这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>查指定字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;title&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;desc&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="多条件匹配"><a href="#多条件匹配" class="headerlink" title="多条件匹配"></a>多条件匹配</h3><p>用到<code>must</code>相当于数据库的&amp;&amp;，举例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小米手机&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">3999.00</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>should</code>相当于数据库的||，如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小米&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;华为&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;gt&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2000</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><p>半匹配：类似模糊查询，只要命中条件关键字，都给提出来</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;手机&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>完全匹配</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match_phrase&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;category&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;手机&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span>   <span class="hljs-comment">//要高亮的字段</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by，当然还有很多其他的聚合，例如取最大值max、平均值avg等等。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//聚合操作</span><br><span class="hljs-attr">&quot;price_group&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//名称，随意起名</span><br><span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//分组</span><br><span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;price&quot;</span><span class="hljs-comment">//分组字段</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="映射关系"><a href="#映射关系" class="headerlink" title="映射关系"></a>映射关系</h3><p>（就好比数据库的“表结构”）</p><p>创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p><a href="http://localhost:9200/shop/_mapping">http://localhost:9200/shop/_mapping</a> （ index&#x2F; _mapping 即可）</p><p>创建</p><ol><li><p>先创建一个索引：<a href="http://localhost:9200/stu">http://localhost:9200/stu</a></p></li><li><p>创建映射： <a href="http://localhost:9200/stu/_mapping">http://localhost:9200/stu/_mapping</a> (post请求)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tel&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span>     <span class="hljs-comment">//查询时不能以此为关键字命中</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>添加数据：<a href="http://localhost:9200/stu/_create/1005">http://localhost:9200/stu/_create/1005</a>   (post)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;liyansheng&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tel&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">17236723</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>查询：<a href="http://localhost:9200/stu/_doc/1005">http://localhost:9200/stu/_doc/1005</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stu&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1005&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;found&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;liyansheng&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">17236723</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><h3 id="全量"><a href="#全量" class="headerlink" title="全量"></a>全量</h3><p>同样的请求，直接覆盖原来的数据</p><h3 id="局部"><a href="#局部" class="headerlink" title="局部"></a>局部</h3><p>修改一条数据的局部信息（<code>注意</code>：局部修改只能用post请求完成，由于局部更新, 每次更新的结果不是相同的, 因此不是幂等性操作, 因此不支持put操作, 只支持post请求操作.）</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>（逻辑删除）</p><p><a href="http://localhost:9200/shop/_doc/aqCwOoMBS9TfkFcreB4E">http://localhost:9200/shop/_doc/aqCwOoMBS9TfkFcreB4E</a>  （  &#x2F;index &#x2F; _doc &#x2F; key_name）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shop&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aqCwOoMBS9TfkFcreB4E&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;deleted&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="四、环境搭建"><a href="#四、环境搭建" class="headerlink" title="四、环境搭建"></a>四、环境搭建</h2><h3 id="win集群"><a href="#win集群" class="headerlink" title="win集群"></a>win集群</h3><p>三台服务器启动：（记得修改各自的端口和服务名），三台的<code>elasticsearch.yml</code>配置如下：</p><p>node-1：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">my-application</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-1</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9201</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9301</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>node-2：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">my-application</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-2</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9202</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9302</span><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;localhost:9301&quot;</span>]<br><span class="hljs-attr">discovery.zen.fd.ping_timeout:</span> <span class="hljs-string">1m</span><br><span class="hljs-attr">discovery.zen.fd.ping_retries:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>node-3：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">my-application</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-3</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9203</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9303</span><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;localhost:9301&quot;</span>, <span class="hljs-string">&quot;localhost:9302&quot;</span>]<br><span class="hljs-attr">discovery.zen.fd.ping_timeout:</span> <span class="hljs-string">1m</span><br><span class="hljs-attr">discovery.zen.fd.ping_retries:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p><code>注意</code>：如果你的内存不是很足，可以给es分配少一些内存，其默认是1G的，在<code>jvm.options</code>里面修改即可</p><p>默认如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs options">-Xms1g<br>-Xmx1g<br></code></pre></td></tr></table></figure><p>假如我要将分配内存修改为256m，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs options">-Xms256m<br>-Xmx256m<br></code></pre></td></tr></table></figure><p>启动测试：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220915142412626.png"></p><p>查看集群状态</p><blockquote><p><a href="http://localhost:9203/_cluster/health">http://localhost:9203/_cluster/health</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;cluster_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my-application&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;green&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;timed_out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;number_of_nodes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;number_of_data_nodes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;active_primary_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;active_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;relocating_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;initializing_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;unassigned_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;delayed_unassigned_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;number_of_pending_tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;number_of_in_flight_fetch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;task_max_waiting_in_queue_millis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;active_shards_percent_as_number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100.0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="linux集群"><a href="#linux集群" class="headerlink" title="linux集群"></a>linux集群</h3><p>方式：</p><p>1.一台机器上装多个ES</p><p>2.多台机器上装多个ES</p><p>不管是哪个方式，集群操作都是差不多的。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220915171748795.png"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220915171948319.png"></p><p>创建索引</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220915172126101.png"></p><p>在另一个节点获取节点</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220915172158462.png"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220915172220077.png"></p><p>可以看出，两个节点的数据是同步的。</p><h2 id="五、安全认证"><a href="#五、安全认证" class="headerlink" title="五、安全认证"></a>五、安全认证</h2><ol><li><p>进入安装目录，添加认证信息。编辑<code>config/elasticsearch.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-attr">xpack.security.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">xpack.license.self_generated.type:</span> <span class="hljs-string">trial</span><br></code></pre></td></tr></table></figure></li><li><p>重启es</p></li><li><p>根据提示依次设置elastic、apm_system、kibana、logstash_system、beats_system和remote_monitoring_user的认证密码。进入安装目录下，执行<code>./bin/elasticsearch-setup-passwords interactive</code>，按提示操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash-4.2$ ./elasticsearch-setup-passwords interactive<br>Initiating the setup of passwords for reserved users elastic,apm_system,kibana,logstash_system,beats_system,remote_monitoring_user.<br>You will be prompted to enter passwords as the process progresses.<br>Please confirm that you would like to continue [y/N]y<br><br><br>Enter password for [elastic]: <br>Reenter password for [elastic]: <br>Enter password for [apm_system]: <br>Reenter password for [apm_system]: <br>Passwords do not match.<br>Try again.<br>Enter password for [apm_system]: <br>Reenter password for [apm_system]: <br>Enter password for [kibana]: <br>Reenter password for [kibana]: <br>Enter password for [logstash_system]: <br>Reenter password for [logstash_system]: <br>Enter password for [beats_system]: <br>Reenter password for [beats_system]: <br>Enter password for [remote_monitoring_user]: <br>Reenter password for [remote_monitoring_user]: <br>Passwords do not match.<br>Try again.<br>Enter password for [remote_monitoring_user]: <br>Reenter password for [remote_monitoring_user]: <br>Changed password for user [apm_system]<br>Changed password for user [kibana]<br>Changed password for user [logstash_system]<br>Changed password for user [beats_system]<br>Changed password for user [remote_monitoring_user]<br>Changed password for user [elastic]<br><br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>账号密码设置后，你直接就访问不到es了，需要输入账号密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"> curl -u elastic 192.168.220.137:9200/_cluster/health?pretty<br>Enter host password for user &#x27;elastic&#x27;:<br></code></pre></td></tr></table></figure><p>或者直接在访问路径上加上密码，即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl elastic:elastic123@192.168.220.137:9200/_cluster/health?pretty<br></code></pre></td></tr></table></figure></li></ol><h2 id="六、结束语"><a href="#六、结束语" class="headerlink" title="六、结束语"></a>六、结束语</h2><blockquote><p>ES能够执行及合并多种类型的搜索，方式随心所变，RESTful风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。</p><p>推荐感兴趣的伙伴都来学习一下</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>启动Kafka步骤与常见问题</title>
    <link href="/blog/posts/41053.html"/>
    <url>/blog/posts/41053.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>每次用到kafka时都会出现各种奇怪的问题，综合实践，下面汇总下主要操作步骤：</p></blockquote><h2 id="Docker镜像形式启动"><a href="#Docker镜像形式启动" class="headerlink" title="Docker镜像形式启动"></a>Docker镜像形式启动</h2><h3 id="zookeeper启动"><a href="#zookeeper启动" class="headerlink" title="zookeeper启动"></a>zookeeper启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper<br></code></pre></td></tr></table></figure><h3 id="kafka启动"><a href="#kafka启动" class="headerlink" title="kafka启动"></a>kafka启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name kafka01 -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=150.158.16.123:12348 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://150.158.16.123:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -d  wurstmeister/kafka<br></code></pre></td></tr></table></figure><h3 id="进入kafka容器"><a href="#进入kafka容器" class="headerlink" title="进入kafka容器"></a>进入kafka容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it [容器id] /bin/bash<br></code></pre></td></tr></table></figure><p>创建topic</p><p>进入容器，在<code>/opt/kafka_2.13-2.8.1/bin</code> 目录下创建topic</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">./kafka-topics.sh --create --zookeeper 150.158.16.123:12348 --replication-factor 1 --partitions 1 --topic mykafka<br>./kafka-topics.sh --create --zookeeper 150.158.16.123:2181 --replication-factor 1 --partitions 1 --topic mykafka<br></code></pre></td></tr></table></figure><p>运行生产者</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220923112024973.png" alt="image-20220923112024973"></p><p>运行消费者</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220923112035890.png" alt="image-20220923112035890"></p><hr><h2 id="单机形式启动"><a href="#单机形式启动" class="headerlink" title="单机形式启动"></a>单机形式启动</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>1、Linux 机器</p><p>2、环境已准备好JDK，如果还没有装，推荐用yum一键安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum  install  -y  java-1.8.0-openjdk.x86_64<br></code></pre></td></tr></table></figure><p>检验：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# java -version<br>openjdk version &quot;1.8.0_362&quot;<br>OpenJDK Runtime Environment (build 1.8.0_362-b08)<br>OpenJDK 64-Bit Server VM (build 25.362-b08, mixed mode)<br></code></pre></td></tr></table></figure><p>3、将kafka压缩包上传到你的Linux</p><p>配置文件关注<code>config</code>目录下的<code>zookeeper.properties</code>和<code>server.properties</code>，启动服务时要指定</p><h3 id="配置-启动"><a href="#配置-启动" class="headerlink" title="配置-启动"></a>配置-启动</h3><p>有默认配置，可不做修改（有需要可以自定义启动端口和数据存放位置等参数）</p><p>1、先启动自带的 Zookeeper：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost bin]# ./zookeeper-server-start.sh ../config/zookeeper.properties <br>OpenJDK 64-Bit Server VM warning: If the number of processors is expected to increase from one, then you should configure the number of parallel GC threads appropriately using -XX:ParallelGCThreads=N<br>[2023-02-26 14:14:52,759] INFO Reading configuration from: ../config/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig)<br>[2023-02-26 14:14:52,766] INFO autopurge.snapRetainCount set to 3 (org.apache.zookeeper.server.DatadirCleanupManager)<br>[2023-02-26 14:14:52,767] INFO autopurge.purgeInterval set to 0 (org.apache.zookeeper.server.DatadirCleanupManager)<br>[2023-02-26 14:14:52,767] INFO Purge task is not scheduled. (org.apache.zookeeper.server.DatadirCleanupManager)<br>[2023-02-26 14:14:52,767] WARN Either no config or no quorum defined in config, running  in standalone mode (org.apache.zookeeper.server.quorum.QuorumPeerMain)<br>[2023-02-26 14:14:52,783] INFO Reading configuration from: ../config/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig)<br>[2023-02-26 14:14:52,784] INFO Starting server (org.apache.zookeeper.server.ZooKeeperServerMain)<br>[2023-02-26 14:14:52,796] INFO Server environment:zookeeper.version=3.4.14-4c25d480e66aadd371de8bd2fd8da255ac140bcf, built on 03/06/2019 16:18 GMT (org.apache.zookeeper.server.ZooKeeperServer)<br>[2023-02-26 14:14:52,796] INFO Server environment:host.name=localhost (org.apache.zookeeper.server.ZooKeeperServer)<br>[2023-02-26 14:14:52,796] INFO Server environment:java.version=1.8.0_362 (org.apache.zookeeper.server.ZooKeeperServer)<br>[2023-02-26 14:14:52,796] INFO Server environment:java.vendor=Red Hat, Inc. (org.apache.zookeeper.server.ZooKeeperServer)<br>[2023-02-26 14:14:52,796] INFO Server environment:java.home=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64/jre (org.apache.zookeeper.server.ZooKeeperServer)<br>(省略大部分)<br></code></pre></td></tr></table></figure><p>2、启动 Kafka</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost kafka_2.12-2.3.0]# bin/kafka-server-start.sh config/server.properties <br>OpenJDK 64-Bit Server VM warning: If the number of processors is expected to increase from one, then you should configure the number of parallel GC threads appropriately using -XX:ParallelGCThreads=N<br>[2023-02-26 14:16:00,261] INFO Registered kafka:type=kafka.Log4jController MBean (kafka.utils.Log4jControllerRegistration$)<br>[2023-02-26 14:16:01,004] INFO Registered signal handlers for TERM, INT, HUP (org.apache.kafka.common.utils.LoggingSignalHandler)<br>[2023-02-26 14:16:01,024] INFO starting (kafka.server.KafkaServer)<br>[2023-02-26 14:16:01,025] INFO Connecting to zookeeper on localhost:2181 (kafka.server.KafkaServer)<br>[2023-02-26 14:16:01,068] INFO [ZooKeeperClient Kafka server] Initializing a new session to localhost:2181. (kafka.zookeeper.ZooKeeperClient)<br>[2023-02-26 14:16:01,072] INFO Client environment:zookeeper.version=3.4.14-4c25d480e66aadd371de8bd2fd8da255ac140bcf, built on 03/06/2019 16:18 GMT (org.apache.zookeeper.ZooKeeper)<br>[2023-02-26 14:16:01,072] INFO Client environment:host.name=localhost (org.apache.zookeeper.ZooKeeper)<br>[2023-02-26 14:16:01,072] INFO Client environment:java.version=1.8.0_362 (org.apache.zookeeper.ZooKeeper)<br>[2023-02-26 14:16:01,072] INFO Client environment:java.vendor=Red Hat, Inc. (org.apache.zookeeper.ZooKeeper)<br>[2023-02-26 14:16:01,072] INFO Client environment:java.home=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64/jre (org.apache.zookeeper.ZooKeeper)<br>(省略大部分)<br></code></pre></td></tr></table></figure><blockquote><p>上述步骤只要启动过程没有报错信息，一般是没有问题的</p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>1、创建个topic</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost bin]# ./kafka-topics.sh --create --zookeeper 192.168.154.134:2181 --replication-factor 1 --partitions 1 --topic test<br>Created topic test.<br></code></pre></td></tr></table></figure><p>2、查看topic列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost bin]# ./kafka-topics.sh --zookeeper 192.168.154.134:2181 --list<br>OpenJDK 64-Bit Server VM warning: If the number of processors is expected to increase from one, then you should configure the number of parallel GC threads appropriately using -XX:ParallelGCThreads=N<br>test<br></code></pre></td></tr></table></figure><p>3、启动生产者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost bin]# ./kafka-console-producer.sh --broker-list 192.168.154.134:9092 --topic test<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">hi</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">什么意思啊</span><br></code></pre></td></tr></table></figure><p>4、启动消费者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost bin]# ./kafka-console-consumer.sh --bootstrap-server 192.168.154.134:9092 --topic test<br>hi<br>什么意思啊<br></code></pre></td></tr></table></figure><blockquote><p>正常启动，OK！</p></blockquote><h2 id="可视化：kafka-manager"><a href="#可视化：kafka-manager" class="headerlink" title="可视化：kafka-manager"></a>可视化：kafka-manager</h2><h3 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull sheepkiller/kafka-manager<br></code></pre></td></tr></table></figure><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name kafka-manager -p 12349:9000 --link zookeeper --link kafka01 --env ZK_HOSTS=zookeeper:2181 sheepkiller/kafka-manager  <br></code></pre></td></tr></table></figure><p>然后访问对应的<code>IP：端口</code>即可进入管理页面</p><blockquote><p>注意：<code>ZK_HOSTS</code> 后面在web页面上要用到！</p></blockquote><h3 id="管理界面"><a href="#管理界面" class="headerlink" title="管理界面"></a>管理界面</h3><p>进入主页面后，点击 <code>Add Cluster</code> 添加集群信息</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220818233716973.png" alt="image-20220818233716973"></p><p>然后填写配置信息，主要填写集群名称，Zookeeper的Hosts，还有指定kafka版本（选个跟你所使用的kafka版本号最接近的就行），其他的一些配置按默认的就行。</p><p>当你正确连接上以后，就能看到你的集群啦，如：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220818235108897.png" alt="image-20220818235108897"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220818235134261.png" alt="image-20220818235134261"></p><p><strong>更多关于kafka可视化操作就由你慢慢探索吧！这里将你引进门！</strong></p><blockquote><p>注意：</p><ol><li><p>如果你在启动<code>kafka manager</code>这个容器时指定了 <code>ZK_HOSTS</code> ，那么<strong>Cluster Zookeeper Hosts</strong>这项填的内容要和 <code>ZK_HOSTS</code> 一致，否则会出现连接不上，连接超时等情况。如下图：</p><p> <img src="http://cdn.qiniu.liyansheng.top/typora/image-20220818234605319.png" alt="image-20220818234605319"></p></li><li><p>另外有些配置默认值是1，但是你得将其改成1以上的整数，否则不能正确保存提交。如：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220818234844587.png" alt="image-20220818234844587"></p></li></ol></blockquote><hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>kafka版本不同，响应的api有区别</p><p>本版本是2.11</p><p>注意3.x是 –bootstrap-server localhost:9092方式新建，kafka2.x是以–zookeeper方式创建。下面查看新建的topic。</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220925165659756.png" alt="image-20220925165659756"></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220925165713665.png" alt="image-20220925165713665"></p><h2 id="奇葩问题"><a href="#奇葩问题" class="headerlink" title="奇葩问题"></a>奇葩问题</h2><h3 id="1-重启docker失败？"><a href="#1-重启docker失败？" class="headerlink" title="1.重启docker失败？"></a>1.重启docker失败？</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# systemctl restart docker<br>Job for docker.service failed because the control process exited with error code. See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details.<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# journalctl -xe<br>-- The result is failed.<br>2月 22 02:01:53 localhost.localdomain systemd[1]: Unit docker.service entered failed state.<br>2月 22 02:01:53 localhost.localdomain systemd[1]: Unit docker.service entered failed state.<br>2月 22 02:01:53 localhost.localdomain systemd[1]: docker.service failed.<br>2月 22 02:01:55 localhost.localdomain systemd[1]: docker.service holdoff time over, scheduling restart.<br>2月 22 02:01:55 localhost.localdomain systemd[1]: Stopped Docker Application Container Engine.<br>-- Subject: Unit docker.service has finished shutting down<br>-- Defined-By: systemd<br>-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel<br>-- <br>-- Unit docker.service has finished shutting down.<br>2月 22 02:01:55 localhost.localdomain systemd[1]: start request repeated too quickly for docker.service<br>2月 22 02:01:55 localhost.localdomain systemd[1]: Failed to start Docker Application Container Engine.<br>-- Subject: Unit docker.service has failed<br>-- Defined-By: systemd<br>-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel<br>-- <br>-- Unit docker.service has failed.<br>-- <br>-- The result is failed.<br></code></pre></td></tr></table></figure><p>原因：修改文件<code>/etc/docker/daemon.json</code>时不规范，可能存在空格什么的 </p><p>解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat &lt;&lt;EOF &gt;/etc/docker/daemon.json<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">&#123;</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>]</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">&#125;</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">EOF</span><br>[root@localhost ~]# cat /etc/docker/daemon.json <br>&#123;<br>&quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]<br>&#125;<br>[root@localhost ~]# <br>[root@localhost ~]# systemctl daemon-reload<br>[root@localhost ~]# systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="2-查询镜像无果？"><a href="#2-查询镜像无果？" class="headerlink" title="2.查询镜像无果？"></a>2.查询镜像无果？</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker search kafka<br>Error response from daemon: Get &quot;https://index.docker.io/v1/search?q=kafka&amp;n=25&quot;: x509: certificate has expired or is not yet valid: current time 2023-02-22T02:08:25+08:00 is before 2023-02-22T00:00:00Z<br></code></pre></td></tr></table></figure><p>原因：虚拟机时间与外部时间不一致</p><p>解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# date<br>2023年 02月 22日 星期三 02:09:50 CST<br>[root@localhost ~]# ntpdate cn.pool.ntp.org<br>26 Feb 13:31:38 ntpdate[44996]: step time server 119.28.206.193 offset 386475.634457 sec<br>[root@localhost ~]# date<br>2023年 02月 26日 星期日 13:31:48 CST<br>[root@localhost ~]# docker search kafka<br>NAME                                         DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>bitnami/kafka                                Apache Kafka is a distributed streaming plat…   615                  [OK]<br>ubuntu/kafka                                 Apache Kafka, a distributed event streaming …   25                   <br>bitnami/kafka-exporter                                                                       9                    <br>ibmcom/kafka                                 Docker Image for IBM Cloud Private-CE (Commu…   6                    <br>bitnami/kafka-trigger-controller             Source for this controller is in the kubeles…   5                    <br>ibmcom/kafka-python-console-sample           Docker image for the IBM Event Streams Pytho…   2                    <br>openwhisk/kafkaprovider                      Apache OpenWhisk event provider service for …   2                    [OK]<br></code></pre></td></tr></table></figure><h3 id="3-Docker容器内如何安装vim"><a href="#3-Docker容器内如何安装vim" class="headerlink" title="3.Docker容器内如何安装vim?"></a>3.Docker容器内如何安装vim?</h3><ol><li><p>apt-get install vim  （可能提示你安装失败！继续往下）</p></li><li><p>agt-get update 同步 &#x2F;etc&#x2F;apt&#x2F;sources.list 和 &#x2F;etc&#x2F;apt&#x2F;sources.list.d 中列出的源的索引</p><p>配置国内镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;deb http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;/etc/apt/sources.list<br>    echo &quot;deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list<br>    echo &quot;deb-src http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list<br>    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list<br></code></pre></td></tr></table></figure></li><li><p>返回第一步</p></li></ol><h3 id="4-无法启动kafka"><a href="#4-无法启动kafka" class="headerlink" title="4.无法启动kafka?"></a>4.无法启动kafka?</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">kafka.common.KafkaException: Socket server failed to bind to 150.158.16.123:9092: 无法指定被请求的地址.<br>        at kafka.network.Acceptor.openServerSocket(SocketServer.scala:327)<br>        at kafka.network.Acceptor.&lt;init&gt;(SocketServer.scala:252)<br>        at kafka.network.SocketServer$$anonfun$startup$1.apply(SocketServer.scala:91)<br>        at kafka.network.SocketServer$$anonfun$startup$1.apply(SocketServer.scala:83)<br>        at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)<br>        at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)<br>        at kafka.network.SocketServer.startup(SocketServer.scala:83)<br>        at kafka.server.KafkaServer.startup(KafkaServer.scala:222)<br>        at kafka.server.KafkaServerStartable.startup(KafkaServerStartable.scala:38)<br>        at kafka.Kafka$.main(Kafka.scala:65)<br>        at kafka.Kafka.main(Kafka.scala)<br><br></code></pre></td></tr></table></figure><p>注意，上面是配置里面有个地址写得不对，listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;10.20.30.153:9092后接的是内网地址，通过ip addr即可查看，如我的机器</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20221001140813960.png" alt="image-20221001140813960"></p><p>一个写内网地址，一个写外网地址</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20221001140917719.png" alt="image-20221001140917719"></p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转Linux虚拟机，从安装到实操</title>
    <link href="/blog/posts/29995.html"/>
    <url>/blog/posts/29995.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-VMware汉化"><a href="#1-VMware汉化" class="headerlink" title="1.VMware汉化"></a>1.VMware汉化</h2><p><code>tips</code>：下载地址：&#x3D;》<a href="https://www.123pan.com/s/in5A-5GRRd">123云盘_VMware (123pan.com)</a></p><blockquote><p>步骤：</p><ol><li>在桌面找到你的<code>VMware</code>图标，右键打开<code>属性</code></li><li>选择<code>快捷方式</code>，看<code>目标</code>那一栏</li><li>在<code>原路径</code>后面添加<code>--locale zh_CN</code></li><li>保存，重启VMware，你就会发现汉化OK！</li></ol></blockquote><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220823091203391.png" alt="image-20220823091203391" style="zoom:70%;" /><h2 id="2-安装centos7-mini"><a href="#2-安装centos7-mini" class="headerlink" title="2.安装centos7 mini"></a>2.安装centos7 mini</h2><p>下载地址：<a href="https://mirrors.aliyun.com/centos/7/isos/x86_64/">https://mirrors.aliyun.com/centos/7/isos/x86_64/</a></p><p><a href="http://mirror.nsc.liu.se/centos-store/">Index of &#x2F;centos-store&#x2F; (liu.se)</a></p><h3 id="自定义分区"><a href="#自定义分区" class="headerlink" title="自定义分区"></a>自定义分区</h3><blockquote><p>科普：</p><p><a href="https://blog.csdn.net/weixin_46818279/article/details/107007052?ops_request_misc=%7B%22request_id%22:%22166126527316782350845797%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166126527316782350845797&biz_id=0&spm=1018.2226.3001.4187">学Linux必须了解的系统分区！！！（通俗易懂）_熬夜泡枸杞的博客-CSDN博客_linux图形界面分区</a></p><p><a href="https://blog.csdn.net/mahoon411/article/details/115443526?ops_request_misc=%7B%22request_id%22:%22166126527316782350845797%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166126527316782350845797&biz_id=0&spm=1018.2226.3001.4187">Linux系统分区_吮指原味张的博客-CSDN博客_linux系统分区</a></p><p><a href="https://blog.csdn.net/Black_Customer/article/details/109693645?ops_request_misc=%7B%22request_id%22:%22166126687516781683990414%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166126687516781683990414&biz_id=0&spm=1018.2226.3001.4187">【linux】文件管理系统之手动分区_是馄饨呀的博客-CSDN博客_linux手动分区</a></p></blockquote><p>下方为VMware中安装centos mini版时手动分两个区的图示（swap区和”&#x2F;“区）</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220823092953960.png" alt="image-20220823092953960" style="zoom:50%;" /><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220823093049916.png" alt="image-20220823093049916" style="zoom:50%;" /><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220823093117428.png" alt="image-20220823093117428" style="zoom:50%;" /><h2 id="3-动态获取IP"><a href="#3-动态获取IP" class="headerlink" title="3.动态获取IP"></a>3.动态获取IP</h2><blockquote><p>刚装的centos，你可能获取不到动态IP，类似下面的情况：</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220823231118096.png" alt="image-20220823231118096"></p><p>解决方案：</p><ol><li><p>首先确定你网卡的名称，使用指令<code>ip addr</code>即可查看。如上图，我的当前网卡名称是 <strong>ens33</strong></p></li><li><p>修改网卡配置文件：指令 <code>vi /etc/sysconfig/network-scripts/ifcfg-[网卡名称]</code></p></li><li><p>将配置文件中修改两处：<code>BOOTPROTO=dhcp</code> ，<code>ONBOOT=yes</code>。修改后（记得保存）如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">BOOTPROTO=dhcp<br>DEVICE=eth0<br>HWADDR=52:54:00:d2:5a:83<br>ONBOOT=<span class="hljs-built_in">yes</span><br>PERSISTENT_DHCLIENT=<span class="hljs-built_in">yes</span><br>TYPE=Ethernet<br>USERCTL=no<br></code></pre></td></tr></table></figure></li><li><p>重启网络服务：<code>systemctl restart network</code></p></li><li><p>再次测试：<code>ip addr</code>，就可以看到动态的IP了</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220823233120116.png" alt="image-20220823233120116" style="zoom:67%;" /></li></ol><h2 id="4-关闭SELinux"><a href="#4-关闭SELinux" class="headerlink" title="4.关闭SELinux"></a>4.关闭SELinux</h2><blockquote><p>科普：SELinux是一个增强型的Linux，它是一个Linux的一个内核模块，是Linux的一个安全子系统。</p><p>具体可以参读：</p><p><a href="https://zhuanlan.zhihu.com/p/165974960">一文彻底明白linux中的selinux到底是什么 - 知乎 (zhihu.com)</a></p></blockquote><p>关闭步骤：</p><ol><li><p>首先查看SELinux的状态是否开启，使用命令：<code>cat  /etc/selinux/config</code></p></li><li><p>如果你的<code>SELINUX=enforcing</code>，说明SELinux处于<code>开启</code>状态</p></li><li><p>将<code>SELINUX</code>的值修改为<code>disabled</code>（如下）即可关闭（需要重启机器才能生效，快速重启：<code>shutdown -r now</code>）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@VM-16-12-centos ~]<span class="hljs-comment"># cat /etc/selinux/config </span><br><span class="hljs-comment"># This file controls the state of SELinux on the system.</span><br><span class="hljs-comment"># SELINUX= can take one of these three values:</span><br><span class="hljs-comment">#     enforcing - SELinux security policy is enforced.</span><br><span class="hljs-comment">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="hljs-comment">#     disabled - No SELinux policy is loaded.</span><br>SELINUX=disabled<br><span class="hljs-comment"># SELINUXTYPE= can take one of three values:</span><br><span class="hljs-comment">#     targeted - Targeted processes are protected,</span><br><span class="hljs-comment">#     minimum - Modification of targeted policy. Only selected processes are protected. </span><br><span class="hljs-comment">#     mls - Multi Level Security protection.</span><br>SELINUXTYPE=targeted<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-安装Nginx"><a href="#5-安装Nginx" class="headerlink" title="5.安装Nginx"></a>5.安装Nginx</h2><p><strong>Nginx下载链接</strong>：<a href="http://nginx.org/en/download.html">nginx: download</a></p><blockquote><p>安装教程参考：</p><p><a href="https://blog.csdn.net/t8116189520/article/details/81909574?ops_request_misc=%7B%22request_id%22:%22166126986116782425135807%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166126986116782425135807&biz_id=0&spm=1018.2226.3001.4187">LINUX安装nginx详细步骤_大蛇王的博客-CSDN博客_linux安装nginx</a></p></blockquote><p>安装步骤网上都有很全，我就不在这里赘述了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">查看Nginx的版本号：nginx -V<br><br>启动Nginx：start nginx<br><br>快速停止或关闭Nginx：nginx -s stop<br><br>正常停止或关闭Nginx：nginx -s quit<br><br>配置文件修改重装载命令：nginx -s reload<br></code></pre></td></tr></table></figure><p><strong>下面列举下我遇到的问题：</strong></p><blockquote><p><strong>问题1</strong>：安装前编译错误，如下图。</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220823105023719.png" alt="image-20220823105023719" style="zoom:67%;" /><p><strong>原因</strong>：是没有安装相关的依赖。</p><p><strong>解决</strong>：先安装依赖  <code>yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</code></p></blockquote><blockquote><p><strong>问题2</strong>：安装好nginx后，在虚拟机上访客是能看到nginx的欢迎界面的，但是我将IP地址放到外面的window的浏览器却访问不到，如下图。</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220823110122059.png" alt="image-20220823110122059" style="zoom:40%;" /><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220823105924804.png" alt="image-20220823105924804" style="zoom:40%;" /><p><strong>原因</strong>：防火墙没有开放相应的端口</p><p><strong>解决</strong>：将<code>80</code>端口打开（记得重启防火墙）</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220823111444095.png" alt="image-20220823111444095"></p></blockquote><h2 id="6-防火墙常用指令"><a href="#6-防火墙常用指令" class="headerlink" title="6.防火墙常用指令"></a>6.防火墙常用指令</h2><ol><li><p>查看防火墙状态：<code>systemctl status firewalld</code> 或<code>firewall-cmd --state</code></p></li><li><p>查看所有开启的端口：<code>firewall-cmd --list-ports</code></p></li><li><p>手动开启端口：<code>firewall-cmd  --zone=public --add-port=[端口号]/[tcp或者udp]  --permanent</code></p></li><li><p>设置防火墙开机自启：<code>systemctl enable firewalld.service</code></p></li><li><p>查看防火墙是否开机自启：<code>systemctl is-enabled firewalld.service ;echo &amp;?</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-12-centos ~]# systemctl is-enabled firewalld.service ;echo &amp;?<br>enabled<br>[1] 27811<br><br>-bash: ?: 未找到命令<br>[1]+  完成                  echo<br></code></pre></td></tr></table></figure></li><li><p>防火墙重启：<code>systemctl restart firewalld.service</code></p></li><li><p>查看防火墙版本：<code>firewall-cmd --version</code></p></li><li><p>永久关闭防火墙：<code>chkconfig iptables off</code></p></li></ol><h2 id="7-lsof命令没有找到？"><a href="#7-lsof命令没有找到？" class="headerlink" title="7.lsof命令没有找到？"></a>7.lsof命令没有找到？</h2><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220823143849017.png" alt="image-20220823143849017"></p><h2 id="8-手动安装命令依赖"><a href="#8-手动安装命令依赖" class="headerlink" title="8.手动安装命令依赖"></a>8.手动安装命令依赖</h2><blockquote><p><strong>场景</strong>：这次我测试安装的是<code>centos 7 mini</code>版，也就是精简版，没有系统桌面等，因此，常常遇到下面的情况：</p><p>当你输入一些命令的时候，系统提示你没有这个命令，如<code>lsof</code>，<code>ifconfig</code>都没有预装。</p></blockquote><p><strong>解决</strong>方式：</p><ol><li><p>先用<code>yum search [命令]</code> 找一下你需要安装哪个插件和工具，如这里我要找<code>lsof</code>相关的：</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220824093616969.png" alt="image-20220824093616969" style="zoom:67%;" /></li><li><p>使用<code>yum install [名称]</code> 进行安装</p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220823144055517.png" alt="image-20220823144055517" style="zoom:50%;" /></li><li><p>等安装完成后，就可以使用这个命令了。</p></li><li><p>（安装其他的命令也同理）</p></li></ol><h2 id="9-进程相关命令"><a href="#9-进程相关命令" class="headerlink" title="9.进程相关命令"></a>9.进程相关命令</h2><blockquote><p>1.查看进程号 或某个进程是否启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost home]# ps -ef | grep nginx<br>root      21939      1  0 10:55 ?        00:00:00 nginx: master process ./nginx<br>nobody    21940  21939  0 10:55 ?        00:00:00 nginx: worker process<br>root     111075   1374  0 14:43 pts/0    00:00:00 grep --color=auto nginx<br></code></pre></td></tr></table></figure><blockquote><p>2.查看pid与端口对应关系</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost home]# lsof -nP -iTCP -sTCP:LISTEN<br>COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME<br>sshd      876   root    3u  IPv4  18972      0t0  TCP *:22 (LISTEN)<br>sshd      876   root    4u  IPv6  18981      0t0  TCP *:22 (LISTEN)<br>master   1104   root   13u  IPv4  20058      0t0  TCP 127.0.0.1:25 (LISTEN)<br>master   1104   root   14u  IPv6  20059      0t0  TCP [::1]:25 (LISTEN)<br>nginx   21939   root    6u  IPv4 119065      0t0  TCP *:80 (LISTEN)<br>nginx   21940 nobody    6u  IPv4 119065      0t0  TCP *:80 (LISTEN)<br></code></pre></td></tr></table></figure><blockquote><p>3.查看端口对应的线程</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost home]# lsof -nP -i :80<br>COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME<br>nginx   21939   root    6u  IPv4 119065      0t0  TCP *:80 (LISTEN)<br>nginx   21940 nobody    6u  IPv4 119065      0t0  TCP *:80 (LISTEN)<br></code></pre></td></tr></table></figure><blockquote><p>4.查看进程对应的端口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost home]# lsof -nP |grep LISTEN | grep 21939<br>nginx      21939         root    6u     IPv4             119065       0t0        TCP *:80 (LISTEN)<br></code></pre></td></tr></table></figure><blockquote><p>5.查看监听端口的进程</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost home]# lsof -nP |grep LISTEN |grep 80<br>nginx      21939         root    6u     IPv4             119065       0t0        TCP *:80 (LISTEN)<br>nginx      21940       nobody    6u     IPv4             119065       0t0        TCP *:80 (LISTEN)<br></code></pre></td></tr></table></figure><h2 id="10-系统相关"><a href="#10-系统相关" class="headerlink" title="10.系统相关"></a>10.系统相关</h2><blockquote><p>1.查看系统资源</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost lys]# vmstat 3 5<br>procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st<br> 1  0      0 1058580   2072 588056    0    0     6    14  108  132  0  0 99  0  0<br> 0  0      0 1058304   2072 588064    0    0     0     0  226  273  0  0 100  0  0<br> 0  0      0 1058388   2072 588076    0    0     0     6  178  215  0  1 99  0  0<br> 0  0      0 1058444   2072 588084    0    0     0    10  213  260  0  0 99  0  0<br> 0  0      0 1058296   2072 588100    0    0     0     3  210  256  0  0 100  0  0<br></code></pre></td></tr></table></figure><blockquote><p>2.CPU信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost lys]# dmesg | grep CPU<br>[    0.000000] smpboot: Allowing 128 CPUs, 126 hotplug CPUs<br>[    0.000000] Detected CPU family 6 model 140 stepping 1<br>[    0.000000] setup_percpu: NR_CPUS:5120 nr_cpumask_bits:128 nr_cpu_ids:128 nr_node_ids:1<br>[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=128, Nodes=1<br>[    0.000000]  RCU restricting CPUs from NR_CPUS=5120 to nr_cpu_ids=128.<br>[    0.737289] smpboot: CPU0: 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz (fam: 06, model: 8c, stepping: 01)<br>[    0.787916] core: CPUID marked event: &#x27;cpu cycles&#x27; unavailable<br>[    0.787922] core: CPUID marked event: &#x27;instructions&#x27; unavailable<br>[    0.787928] core: CPUID marked event: &#x27;bus cycles&#x27; unavailable<br>[    0.787935] core: CPUID marked event: &#x27;cache references&#x27; unavailable<br>[    0.787941] core: CPUID marked event: &#x27;cache misses&#x27; unavailable<br>[    0.787947] core: CPUID marked event: &#x27;branch instructions&#x27; unavailable<br>[    0.787953] core: CPUID marked event: &#x27;branch misses&#x27; unavailable<br>[    0.807789] smpboot: CPU 1 Converting physical 2 to logical package 1<br>[    0.807796] smpboot: CPU 1 Converting physical 0 to logical die 1<br>[    0.807896] Brought up 2 CPUs<br></code></pre></td></tr></table></figure><blockquote><p>3.使用情况</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">top - 15:13:27 up  4:37,  2 users,  load average: 0.02, 0.03, 0.05<br>Tasks: 114 total,   1 running, 113 sleeping,   0 stopped,   0 zombie<br>top - 15:15:13 up  4:39,  2 users,  load average: 0.06, 0.03, 0.05<br>top - 15:16:14 up  4:40,  2 users,  load average: 0.02, 0.03, 0.05<br>Tasks: 115 total,   1 running, 114 sleeping,   0 stopped,   0 zombie<br><span class="hljs-meta prompt_">%</span><span class="language-bash">Cpu(s):  0.2 us,  0.3 sy,  0.0 ni, 99.3 <span class="hljs-built_in">id</span>,  0.0 wa,  0.0 hi,  0.2 si,  0.0 st</span><br>KiB Mem :  1862992 total,  1064840 free,   214692 used,   583460 buff/cache<br>KiB Swap:  2097148 total,  2097148 free,        0 used.  1475700 avail Mem <br><br>   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                     <br>     9 root      20   0       0      0      0 S   0.3  0.0   0:11.23 rcu_sched                                                   <br>  1372 root      20   0  162128   6540   4780 S   0.3  0.4   1:19.96 sshd                                                        <br>  1436 root      20   0  162732   2980   1604 S   0.3  0.2   0:14.53 top                                                         <br>     1 root      20   0  125352   3872   2608 S   0.0  0.2   0:02.53 systemd                                                     <br>     2 root      20   0       0      0      0 S   0.0  0.0   0:00.02 kthreadd                                                    <br>     4 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H                                                <br>     5 root      20   0       0      0      0 S   0.0  0.0   0:00.71 kworker/u256:0                                              <br>     6 root      20   0       0      0      0 S   0.0  0.0   0:05.60 ksoftirqd/0                                                 <br>     7 root      rt   0       0      0      0 S   0.0  0.0   0:01.93 migration/0                                                 <br>     8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh                                                      <br>    10 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 lru-add-drain                                               <br>    11 root      rt   0       0      0      0 S   0.0  0.0   0:00.23 watchdog/0                                                  <br>    12 root      rt   0       0      0      0 S   0.0  0.0   0:00.22 watchdog/1                                                  <br>    13 root      rt   0       0      0      0 S   0.0  0.0   0:01.19 migration/<br></code></pre></td></tr></table></figure><blockquote><p>4.内存信息查看</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost lys]# free<br>              total        used        free      shared  buff/cache   available<br>Mem:        1862992      214140     1064896        9768      583956     1476252<br>Swap:       2097148           0     2097148<br></code></pre></td></tr></table></figure><blockquote><p>5.磁盘信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost lys]# df -h<br>文件系统        容量  已用  可用 已用% 挂载点<br>devtmpfs        900M     0  900M    0% /dev<br>tmpfs           910M     0  910M    0% /dev/shm<br>tmpfs           910M  9.6M  901M    2% /run<br>tmpfs           910M     0  910M    0% /sys/fs/cgroup<br>/dev/sda2        18G  1.7G   17G   10% /<br>tmpfs           182M     0  182M    0% /run/user/0<br></code></pre></td></tr></table></figure><blockquote><p>6.网卡信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost lys]#  ifconfig<br>ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 192.168.220.128  netmask 255.255.255.0  broadcast 192.168.220.255<br>        inet6 fe80::a393:4a1f:f4bb:78c3  prefixlen 64  scopeid 0x20&lt;link&gt;<br>        ether 00:0c:29:a8:cd:91  txqueuelen 1000  (Ethernet)<br>        RX packets 381262  bytes 103026975 (98.2 MiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 535639  bytes 96851931 (92.3 MiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>        inet 127.0.0.1  netmask 255.0.0.0<br>        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;<br>        loop  txqueuelen 1000  (Local Loopback)<br>        RX packets 92  bytes 9058 (8.8 KiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 92  bytes 9058 (8.8 KiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br></code></pre></td></tr></table></figure><h2 id="11-给vi编辑器设置行数显示"><a href="#11-给vi编辑器设置行数显示" class="headerlink" title="11.给vi编辑器设置行数显示"></a>11.给vi编辑器设置行数显示</h2><p>很简单，三步搞定！</p><ol><li>首先打开配置文件：<code>vi ~/.vimrc</code></li><li>编辑输入<code>set number</code></li><li>保存退出</li></ol><p>当你下次再打开vi的时候，就会发现显示行号了！</p><h3 id="在docker容器中安装vi"><a href="#在docker容器中安装vi" class="headerlink" title="在docker容器中安装vi"></a>在docker容器中安装vi</h3><p>apt-get update</p><p>apt-get install vim</p><h3 id="鼠标移动光标"><a href="#鼠标移动光标" class="headerlink" title="鼠标移动光标"></a>鼠标移动光标</h3><p>命令模式下，输入set mouse&#x3D;a</p><h2 id="12-Linux常用指令"><a href="#12-Linux常用指令" class="headerlink" title="12.Linux常用指令"></a>12.Linux常用指令</h2><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/qq_23329167/article/details/83856430?ops_request_misc=%7B%22request_id%22:%22166130338016781432990897%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166130338016781432990897&biz_id=0&spm=1018.2226.3001.4187">Linux常用命令_Demon_gu的博客-CSDN博客_linux常用命令</a></p></blockquote><p>重点摘要：</p><ol><li>查看包含隐藏文件的列表：<code>ls  -a</code></li><li>清屏快捷键：<code>ctrl + l</code></li></ol><h2 id="13-权限修改"><a href="#13-权限修改" class="headerlink" title="13.权限修改"></a>13.权限修改</h2><p>文件属性信息：</p><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/JZjuechen/p/15689796.html">Linux文件属性详述 - JZEason - 博客园 (cnblogs.com)</a></p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220824143055753.png" alt="来源 (https://www.cnblogs.com/JZjuechen/p/15689796.html"></p><p>演示：</p><blockquote><p>权限标示：r-可读，w-可写，x-可执行</p><p>权限分配角色：u-文件创建者  g-用户所在组，o-用户组外的其他人</p></blockquote><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220829100130862.png" alt="image-20220829100130862"></p><h2 id="14-文件：打包、压缩与解压"><a href="#14-文件：打包、压缩与解压" class="headerlink" title="14.文件：打包、压缩与解压"></a>14.文件：打包、压缩与解压</h2><p>参考学习：<a href="https://blog.csdn.net/example440982/article/details/51712973">tar 解压缩命令详解_追求者2016的博客-CSDN博客_tar</a></p><blockquote><p>使用系统自带的   <strong>tar</strong>  工具即可完成文件的压缩与解压。</p><p>参数说明：</p><ul><li>-c: 建立压缩档案 </li><li>-x：解压 </li><li>-t：查看内容 </li><li>-r：向压缩归档文件末尾追加文件 </li><li>-u：更新原压缩包中的文件</li></ul><p>可选参数：</p><ul><li>-z：有gzip属性的 </li><li>-j：有bz2属性的 </li><li>-J：具有xz属性的 </li><li>-Z：有compress属性的 </li><li>-v：显示所有过程 </li><li>-O：将文件解开到标准输出</li></ul></blockquote><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><blockquote><p>仅打包，不压缩。</p></blockquote><p>命令：<code>tar -cvf [打包后文件名称] [要打包的文件]</code></p><p>示例：创建两个文件夹，并打包（如果打包全部文件，可以直接用<code>*</code>代替）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-12-centos demo]# touch d1.txt<br>[root@VM-16-12-centos demo]# touch d2.java<br>[root@VM-16-12-centos demo]# ll<br>总用量 0<br>-rw-r--r-- 1 root root 0 8月  24 23:31 d1.txt<br>-rw-r--r-- 1 root root 0 8月  24 23:31 d2.java<br>[root@VM-16-12-centos demo]# tar -cvf d.tar ./*<br>./d1.txt<br>./d2.java<br>[root@VM-16-12-centos demo]# ls<br>d1.txt  d2.java  d.tar<br>[root@VM-16-12-centos demo]# ll<br>总用量 12<br>-rw-r--r-- 1 root root     0 8月  24 23:31 d1.txt<br>-rw-r--r-- 1 root root     0 8月  24 23:31 d2.java<br>-rw-r--r-- 1 root root 10240 8月  24 23:32 d.tar<br></code></pre></td></tr></table></figure><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><blockquote><p>先打包，后压缩。以gzip压缩 在参数f后面的压缩文件名是自己取的，习惯上用tar来做，如果加z参数，则以tar.gz 或tgz来代表gzip压缩过的tar file文件。</p></blockquote><p>命令：<code>tar -zcvf [打包后文件名] [-C] [指定输出父目录]  [文件]</code></p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-12-centos demo]# ls<br>d1.txt  d2.java<br>[root@VM-16-12-centos demo]# tar -zcvf d.tar.gz ./*<br>./d1.txt<br>./d2.java<br>[root@VM-16-12-centos demo]# ls<br>d1.txt  d2.java  d.tar.gz<br></code></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>命令：<code>tar -zxvf [压缩包]  [-C] [解压位置]</code></p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-12-centos demo]# ls<br>d.tar.gz<br>[root@VM-16-12-centos demo]# tar -zxvf d.tar.gz <br>./d1.txt<br>./d2.java<br>[root@VM-16-12-centos demo]# ls<br>d1.txt  d2.java  d.tar.gz<br>[root@VM-16-12-centos demo]# <br></code></pre></td></tr></table></figure><h3 id="避雷-x3D-》"><a href="#避雷-x3D-》" class="headerlink" title="避雷&#x3D;》"></a>避雷&#x3D;》</h3><blockquote><p>tar 的命令参数一定要写完整，否则会出现卡住，无响应的情况。</p></blockquote><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220824152227333.png" alt="image-20220824152227333" style="zoom:50%;" /><p>否则会报错：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220824152254843.png" alt="image-20220824152254843"></p><h2 id="15-自定义主机名-多节点）互ping通"><a href="#15-自定义主机名-多节点）互ping通" class="headerlink" title="15.自定义主机名(多节点）互ping通"></a>15.自定义主机名(多节点）互ping通</h2><p>自定义主机名：<code>hostnamectl set-hostname [主机名]</code></p><p>查看主机名：<code>hostname</code></p><p>路径<code>C:\Windows\System32\drivers\etc</code></p><p>末尾添加：<code>192.168.220.128  node1</code></p><p>ping测试：打开cmd，直接ping主机名</p><p>问题1：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220825151904941.png" alt="image-20220825151904941"></p><p>linux  &#x3D;&gt;win  ping不通</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220825144443668.png" alt="image-20220825144443668"></p><p>win  &#x3D;&gt; linux  可以ping通</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220826100655421.png" alt="image-20220826100655421"></p><p>解决：win的防火墙没关   关闭防火墙命令：<code>netsh advfirewall set allprofiles state off</code></p><blockquote><p>更多防火墙操作，可以参考：</p><p><a href="https://www.cnblogs.com/tomtellyou/p/16300557.html">windows防火墙常用命令 - 苍山落暮 - 博客园 (cnblogs.com)</a></p></blockquote><h2 id="16-yum配置"><a href="#16-yum配置" class="headerlink" title="16.yum配置"></a>16.yum配置</h2><blockquote><p><strong>yum</strong> 主要功能是更方便的<code>添加</code>&#x2F;<code>删除</code>&#x2F;<code>更新</code>RPM包，<code>自动解决</code>包的依赖性问题，便于管理大量系统的更新问题。</p><p>学习参考：</p><p><a href="https://baijiahao.baidu.com/s?id=1708418392526536542&wfr=spider&for=pc">Linux新手入门系列：配置yum源 (baidu.com)</a></p></blockquote><p>原装镜像源：位于<code>/etc/yum.repos.d/</code>的<code>CentOS-Base.repo</code></p><p>优质镜像源：</p><ul><li><a href="http://mirrors.163.com/.help/centos.html">CentOS镜像使用帮助 (163.com)</a></li><li><a href="https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.3e221b11Lrn54l">centos镜像_centos下载地址_centos安装教程-阿里巴巴开源镜像站 (aliyun.com)</a></li></ul><p>如要修改原镜像源，请：</p><ol><li>将下载的镜像源文件放入<code>/etc/yum.repos.d/</code>目录下</li><li>清除yum缓存：<code>yum clear all</code></li><li>刷新：<code>yum makecache</code></li></ol><p>补充：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220825160515378.png" alt="image-20220825160515378"></p><h2 id="17-软件常用配置路径"><a href="#17-软件常用配置路径" class="headerlink" title="17.软件常用配置路径"></a>17.软件常用配置路径</h2><blockquote><p>学习参考：</p><p><a href="https://blog.csdn.net/qq_38317491/article/details/79217178?spm=1001.2101.3001.4242.2&utm_relevant_index=4"> linux常用的文件路径_爪穴心久的博客-CSDN博客_linux常用文件路径</a></p><p><a href="https://cloud.tencent.com/developer/news/224459">Linux配置文件路径大全 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p></blockquote><h2 id="18-systemd服务管理（难点）"><a href="#18-systemd服务管理（难点）" class="headerlink" title="18.systemd服务管理（难点）"></a>18.systemd服务管理（难点）</h2><p><a href="https://www.cnblogs.com/hsyw/p/15054079.html">systemd 介绍 - taotaozh - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/weixin_35742493/article/details/121028721">Linux 之systemd服务简介_Tian_cy_的博客-CSDN博客_linux systemd</a></p><p><a href="https://blog.csdn.net/ch21st/article/details/51383892?spm=1001.2101.3001.6650.1&depth_1-utm_relevant_index=2">Systemd 入门教程：实战篇_道素的博客-CSDN博客_systemd</a></p><h3 id="使用systemd启动Nginx"><a href="#使用systemd启动Nginx" class="headerlink" title="使用systemd启动Nginx"></a>使用systemd启动Nginx</h3><p>编写配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=nginx<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/nginx/sbin/nginx<br>ExecReload=/usr/local/nginx/sbin/nginx -s reload<br>ExecStop=/usr/local/nginx/sbin/nginx -s quit<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>启动、查看运行状态：</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220829112302731.png" alt="image-20220829112302731"></p><h2 id="19-神奇的-tail"><a href="#19-神奇的-tail" class="headerlink" title="19.神奇的   tail"></a>19.神奇的   tail</h2><blockquote><p>tail用于查看文件的内容</p></blockquote><p>常用参数：</p><p><code>-f</code>：查阅正在改变的日志文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">Print the last 10 lines of each FILE to standard output.<br>With more than one FILE, precede each with a header giving the file name.<br>With no FILE, or when FILE is -, read standard input.<br><br>Mandatory arguments to long options are mandatory for short options too.<br>  -c, --bytes=K            output the last K bytes; or use -c +K to output<br>                             bytes starting with the Kth of each file<br>  -f, --follow[=&#123;name|descriptor&#125;]<br>                           output appended data as the file grows;<br>                             an absent option argument means &#x27;descriptor&#x27;<br>  -F                       same as --follow=name --retry<br>  -n, --lines=K            output the last K lines, instead of the last 10;<br>                             or use -n +K to output starting with the Kth<br>      --max-unchanged-stats=N<br>                           with --follow=name, reopen a FILE which has not<br>                             changed size after N (default 5) iterations<br>                             to see if it has been unlinked or renamed<br>                             (this is the usual case of rotated log files);<br>                             with inotify, this option is rarely useful<br>      --pid=PID            with -f, terminate after process ID, PID dies<br>  -q, --quiet, --silent    never output headers giving file names<br>      --retry              keep trying to open a file if it is inaccessible<br>  -s, --sleep-interval=N   with -f, sleep for approximately N seconds<br>                             (default 1.0) between iterations;<br>                             with inotify and --pid=P, check process P at<br>                             least once every N seconds<br>  -v, --verbose            always output headers giving file names<br>      --help            显示此帮助信息并退出<br>      --version         显示版本信息并退出<br></code></pre></td></tr></table></figure><h2 id="20-sed命令"><a href="#20-sed命令" class="headerlink" title="20.sed命令"></a>20.sed命令</h2><blockquote><p>用于脚本处理文本内容，实现自动编辑，简化对文件的反复操作</p></blockquote><h2 id="21-后台启动命令"><a href="#21-后台启动命令" class="headerlink" title="21.后台启动命令"></a>21.后台启动命令</h2><p><a href="https://blog.csdn.net/lukabruce/article/details/82698935">(51条消息) linux后台永久启动Kafka、Flume命令(测试通过）_卢子墨的博客-CSDN博客_linux后台启动kafka</a></p><ol><li><p>命令前添加nohup</p><p>  a.  1&gt;&#x2F;dev&#x2F;null  2&gt;&amp;1 是将命令产生的输入和错误都输入到空设备，也就是不输出的意思。&#x2F;dev&#x2F;null 代表空设备，“&#x2F;”不要漏掉，否则会报 -bash: dev&#x2F;null not a file or dirctory 的错误 ；</p><p>   b.  &#x2F;home&#x2F;espai&#x2F;kafka&#x2F; 指的是config&#x2F;server.properties存在的路径，可以根据自己安装的路径进行修改。</p><p>   c.  启动命令首位加上nohup，即使停掉crt，kafka、flume依然可以在后台执行，这样就不用每次登陆，重新运行启动命令了。如果需要停掉服务，只需运行 kill -9 [程序运行的号即可，比如上面kafka的是15568]   –&gt; kill -9 15568</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初学shell常用操作</title>
    <link href="/blog/posts/3820.html"/>
    <url>/blog/posts/3820.html</url>
    
    <content type="html"><![CDATA[<h3 id="1-格式化输出时间"><a href="#1-格式化输出时间" class="headerlink" title="1.格式化输出时间"></a>1.格式化输出时间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[root]# </span><span class="language-bash"><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">date</span> +%Y%m%d-%H:%M:%S`</span><br>20221027-10:30:56<br></code></pre></td></tr></table></figure><p>应用：记录日志，程序执行时间等等</p><p>举例：将程序的执行信息输出到指定的文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>log_file=logs/clear-dup-data-`date +%Y%m%d-%H:%M:%S`.log<br>echo  start_time-`date +%Y%m%d-%H:%M:%S` &amp;&gt;&gt; $log_file<br>/bin/python3 /clean_dup_data/main.py &amp;&gt;&gt; $log_file<br>echo  end_time-`date +%Y%m%d-%H:%M:%S` &amp;&gt;&gt; $log_file<br></code></pre></td></tr></table></figure><h3 id="2-命令行操作文本"><a href="#2-命令行操作文本" class="headerlink" title="2.命令行操作文本"></a>2.命令行操作文本</h3><p>对每行匹配到的每一个字符串进行替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/原字符串/新字符串/&#x27; ab.txt  （&quot;/&quot;也可以换成&quot;#&quot;）<br></code></pre></td></tr></table></figure><p>应用：直接搜索修改指定文件的位置，这样你就不用再cd 目录，然后vi 文件，等等这么麻烦了，在脚本中使用特别快捷</p><p>举例：使用命令行的形式去修改selinux配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config<br></code></pre></td></tr></table></figure><p>指定分割点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-12-centos ~]# hostname -I | awk &#x27;&#123;print $1&#125;&#x27;<br>10.0.16.12<br>[root@VM-16-12-centos ~]# hostname -I | awk &#x27;&#123;print $1&#125;&#x27; | awk -F . &#x27;&#123;print $1&#125;&#x27;<br>10<br></code></pre></td></tr></table></figure><h3 id="3-读取键盘输入"><a href="#3-读取键盘输入" class="headerlink" title="3.读取键盘输入"></a>3.读取键盘输入</h3><p>用到<code>read</code>来获取用户的输入 </p><p>应用：脚本为了提高与用户的交互，有时候我们希望在脚本运行期间，读取用户的输入，如让用户输入账号，密码等。  </p><p>参数说明：</p><ul><li>-p 提示信息</li><li>-t 等待输入秒数</li><li>-n 接受指定的字符数便执行</li><li>-s 隐藏输入的字符</li></ul><p>举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-12-centos demo4]# read -p &#x27;enter your name:&#x27; name ; echo $name<br>enter your name:liming<br>liming<br></code></pre></td></tr></table></figure><h3 id="4-开发指定端口"><a href="#4-开发指定端口" class="headerlink" title="4.开发指定端口"></a>4.开发指定端口</h3><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20221028104222903.png" alt="image-20221028104222903"></p><p>5.查看已开发端口</p><p>netstat -ntpl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@liyansheng bin]# netstat -ntpl<br>Active Internet connections (only servers)<br>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    <br>tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      11780/redis-server  <br>tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      9603/sshd           <br>tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      9901/master         <br>tcp6       0      0 :::3306                 :::*                    LISTEN      11707/docker-proxy  <br>tcp6       0      0 :::6379                 :::*                    LISTEN      11780/redis-server  <br>tcp6       0      0 :::8080                 :::*                    LISTEN      11871/docker-proxy  <br>tcp6       0      0 :::2389                 :::*                    LISTEN      11822/docker-proxy  <br>tcp6       0      0 :::22                   :::*                    LISTEN      9603/sshd           <br>tcp6       0      0 ::1:25                  :::*                    LISTEN      9901/master         <br>tcp6       0      0 :::42493                :::*                    LISTEN      28129/java          <br>tcp6       0      0 :::2181                 :::*                    LISTEN      28129/java <br></code></pre></td></tr></table></figure><p>开发端口：</p><p>firewall-cmd –zone&#x3D;public –add-port&#x3D;9200&#x2F;tcp –permanent</p><p>查看端口：</p><p>firewall-cmd –list-ports</p><h3 id="5-命令行的特殊符号"><a href="#5-命令行的特殊符号" class="headerlink" title="5.命令行的特殊符号"></a>5.命令行的特殊符号</h3><ul><li><code>&gt;</code> ：输出重定向，将输出写入指定的文件（如果文件存在，则覆盖；否则创建文件）</li><li><code>&gt;&gt;</code>：输出重定向，在指定的文件里面<strong>追加</strong>输出的内容</li><li><code>&lt;</code>：输入重定向，后跟的文件取代键盘作为新的输入设备</li><li><code>|</code>：管道，将上一条的命令作为下一条命令的输入参数</li><li><code>||</code>：上一条命令执行失败后，就执行下一条</li><li><code>&amp;</code>：将任务放到后台执行</li><li><code>&amp;&amp;</code>：上一条命令执行成功后，继续执行下一条，否则不往下</li><li><code>0</code>：stdin 标准输入</li><li><code>1</code>：stdout标准正确输出</li><li><code>2</code>：stderr标准错误输出</li><li><code>2&gt;$1</code>：标准错误重新定向到标准输出</li><li><code>1&gt;$2</code>：标准输出重定向到标准错误</li><li><code>/dev/null</code>：空设备文件（无底洞）</li></ul><h3 id="6-虚拟机配置静态IP"><a href="#6-虚拟机配置静态IP" class="headerlink" title="6.虚拟机配置静态IP"></a>6.虚拟机配置静态IP</h3><p>背景：主要解决每次虚拟机开机后，IP就变换了，不利于finalshell连接，每次都得修改IP麻烦。</p><p>查看VM的网络配置。</p><p>首先VM&#x3D;》编辑 &#x3D;》 虚拟网络编辑器</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20221030165854873.png" alt="image-20221030165854873"></p><p>选择NAT类型这行，然后打开设置</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20221030165930597.png" alt="image-20221030165930597"></p><p>根据下图修改网卡配置文件</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20221030165950728.png" alt="image-20221030165950728"></p><p>修改网卡配置：<code>vi /etc/sysconfig/network-scripts/ifcfg-ens33 </code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">TYPE=&quot;Ethernet&quot;<br>PROXY_METHOD=&quot;none&quot;<br>BROWSER_ONLY=&quot;no&quot; <br>BOOTPROTO=static  #这个配置修改为&quot;static&quot;<br>DEFROUTE=&quot;yes&quot;<br>IPV4_FAILURE_FATAL=&quot;no&quot;<br>IPV6INIT=&quot;yes&quot;<br>IPV6_AUTOCONF=&quot;yes&quot;<br>IPV6_DEFROUTE=&quot;yes&quot;<br>IPV6_FAILURE_FATAL=&quot;no&quot;<br>IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;<br>NAME=&quot;ens33&quot;<br>UUID=&quot;38fab940-4871-41f9-b1e1-3f123c3bc217&quot;<br>DEVICE=&quot;ens33&quot;<br>ONBOOT=&quot;yes&quot; #修改为&quot;yes&quot;,代表每次开机后开启<br>IPADDR=192.168.220.137 #你要设置的IP<br>NETMASK=255.255.255.0 #子网掩码<br>GATEWAY=182.168.220.2 #网关<br>DNS1=8.8.8.8 #域名解析器地址<br></code></pre></td></tr></table></figure><p>保存，重启网卡：<code>systemctl restart network</code></p><p>再次查看IP地址：<code>ip addr</code>，可见ip修改成静态的OK了。</p><p>7.添加自启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@zookeeper init.d]# vim zookeeper <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">chkconfig:2345 20 90</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">description:zookeeper</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">processname:zookeeper</span><br>export JAVA_HOME=/opt/aspire/product/mirror/java/jdk1.8.0_131<br>case $1 in<br>        start) su root /opt/aspire/product/mirror/zookeeper/zookeeper-3.4.10/bin/zkServer.sh start;;<br>        stop) su root /opt/aspire/product/mirror/zookeeper/zookeeper-3.4.10/bin/zkServer.sh stop;;<br>        status) su root /opt/aspire/product/mirror/zookeeper/zookeeper-3.4.10/bin/zkServer.sh status;;<br>        restart) su /opt/aspire/product/mirror/zookeeper/zookeeper-3.4.10/bin/zkServer.sh restart;;<br>        *) echo &quot;require start|stop|status|restart&quot; ;;<br>esac<br></code></pre></td></tr></table></figure><h3 id="7-添加开机启动服务"><a href="#7-添加开机启动服务" class="headerlink" title="7.添加开机启动服务"></a>7.添加开机启动服务</h3><blockquote><p>方式1：将应用做成服务，以“开机启动zookeeper”为例</p></blockquote><ol><li><p>在<code>/etc/rc.d/init.d/</code>目录下，创建zookeeper服务文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@liyansheng ~]# cd /etc/rc.d/init.d/<br>[root@liyansheng init.d]# ls<br>functions  netconsole  network  README  zookeeper<br></code></pre></td></tr></table></figure></li><li><p>将服务文件设置为可执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@liyansheng init.d]# chmod +x zookeeper<br></code></pre></td></tr></table></figure></li><li><p>编辑服务文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">chkconfig:2345 20 90</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">description:zookeeper</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">processname:zookeeper</span><br>export JAVA_HOME=/opt/aspire/product/mirror/java/jdk1.8.0_131<br>case $1 in<br>        start) su root /opt/aspire/product/mirror/zookeeper/zookeeper-3.4.10/bin/zkServer.sh start;;<br>        stop) su root /opt/aspire/product/mirror/zookeeper/zookeeper-3.4.10/bin/zkServer.sh stop;;<br>        status) su root /opt/aspire/product/mirror/zookeeper/zookeeper-3.4.10/bin/zkServer.sh status;;<br>        restart) su /opt/aspire/product/mirror/zookeeper/zookeeper-3.4.10/bin/zkServer.sh restart;;<br>        *) echo &quot;require start|stop|status|restart&quot; ;;<br>esac<br><br></code></pre></td></tr></table></figure></li><li><p>测试启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@liyansheng init.d]# service zookeeper start<br></code></pre></td></tr></table></figure><p>ok的</p></li><li><p>添加到开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@liyansheng init.d]# chkconfig --add zookeeper <br></code></pre></td></tr></table></figure></li><li><p>查看开机启动列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@liyansheng init.d]# chkconfig --list<br>netconsole      0:关    1:关    2:关    3:关    4:关    5:关    6:关<br>network         0:关    1:关    2:开    3:开    4:开    5:开    6:关<br>zookeeper       0:关    1:关    2:开    3:开    4:开    5:开    6:关<br></code></pre></td></tr></table></figure><blockquote><p>方式2：直接修改**&#x2F;etc&#x2F;rc.d&#x2F;rc.local文件**</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@liyansheng init.d]# vim /etc/rc.d/rc.local <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># This script will be executed *after* all the other init scripts.</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">You can put your own initialization stuff <span class="hljs-keyword">in</span> here <span class="hljs-keyword">if</span> you don<span class="hljs-string">&#x27;t</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">want to do the full Sys V style init stuff.</span></span><br><br>touch /var/lock/subsys/local<br>export JAVA_HOME=/usr/java/jdk1.8.0_112<br>/usr/local/zookeeper-3.4.5/bin/zkServer.sh start<br></code></pre></td></tr></table></figure><p>保存，重启即生效。</p></li></ol><h3 id="8-systemctl-添加开机启动"><a href="#8-systemctl-添加开机启动" class="headerlink" title="8.systemctl 添加开机启动"></a>8.systemctl 添加开机启动</h3><ol><li><p>进入目录<code>/lib/systemd/system</code></p></li><li><p>编辑服务文件<code>xxx.service</code></p></li><li><p>保存，执行<code>systemctl daemon-reload</code>，使新增的服务生效</p></li><li><p>设置开机启动<code>systemctl enable xxx.service</code></p></li><li><p>查看服务状态<code>systemctl status xxx.service</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=xxx<br>After=network.target<br><br>[Service]<br>Type=simple<br>PIDFile=<br>ExecStart=/home/gopath/bin/xxx<br>ExecReload=/home/gopath/bin/xxx<br>ExecStop=/home/gopath/bin/xxx<br>RemainAfterExit=yes<br>Restart=no<br>PrivateTmp=true<br>Restart=always<br>RestartSec=1<br>User=root<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure></li></ol><h3 id="9-超简洁获取IP地址"><a href="#9-超简洁获取IP地址" class="headerlink" title="9.超简洁获取IP地址"></a>9.超简洁获取IP地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hostname -I |awk &#x27;&#123;print $1&#125;&#x27;<br></code></pre></td></tr></table></figure><h3 id="10-便捷快速文件传输-scp"><a href="#10-便捷快速文件传输-scp" class="headerlink" title="10.便捷快速文件传输-scp"></a>10.便捷快速文件传输-scp</h3><p>语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">usage: scp [-346BCpqrTv] [-c cipher] [-F ssh_config] [-i identity_file]<br>            [-J destination] [-l limit] [-o ssh_option] [-P port]<br>            [-S program] source ... target<br></code></pre></td></tr></table></figure><ul><li><p>本机 &#x3D;》 远程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp local_file remote_username@remote_ip:remote_folder <br>或者 <br>scp local_file remote_username@remote_ip:remote_file <br></code></pre></td></tr></table></figure></li><li><p>远程 &#x3D;》 本机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp  remote_username@remote_ip:remote_folder local_file<br>或者 <br>scp  remote_username@remote_ip:remote_file local_file<br></code></pre></td></tr></table></figure></li></ul><p>注意：<br>1.当远程服务器防火墙有特殊限制时，scp要走特殊端口(#scp 命令使用端口号 4588)<br>2.注意所使用的用户是否具有可读取远程服务器相应文件的权限</p><h3 id="11-set-e-用法"><a href="#11-set-e-用法" class="headerlink" title="11. set  e 用法"></a>11. set  e 用法</h3><ul><li>set -e 之后出现的代码，一但出现返回值非零（脚本出错），整个脚本立即退出。</li><li>set +e 则 即使基本有报错，但是仍继续执行下面的脚本。</li></ul><h3 id="12-z-str"><a href="#12-z-str" class="headerlink" title="12.-z str"></a>12.-z str</h3><p>如果str长度为零为真</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20221116122413712.png" alt="image-20221116122413712"></p><h3 id="13-shift用法"><a href="#13-shift用法" class="headerlink" title="13.shift用法"></a>13.shift用法</h3><p>当传入多个参数时，shift前$1可用，shift后原来的$1不可用，原来的$2变成$1，$#获取参数个数会相应-1</p><h3 id="14-source用法"><a href="#14-source用法" class="headerlink" title="14.source用法"></a>14.source用法</h3><ul><li>刷新当前环境</li><li>source 执行shell脚本</li><li>从脚本中导入shell函数</li><li>从另一个脚本读取变量</li></ul><p>15.command -v 参数  ：判断一个命令是否支持</p><h2 id="自动化配置"><a href="#自动化配置" class="headerlink" title="自动化配置"></a>自动化配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@liyansheng target-config]# cat application-prod.yml | grep brokers | awk &#x27;&#123;print $2&#125;&#x27;<br>10.12.7.116:9092<br><br>[root@liyansheng target-config]# cat application-prod.yml | grep zk-nodes | awk &#x27;&#123;print $2&#125;&#x27;<br>10.12.7.116:2181<br><br>[root@liyansheng target-config]# cat application-prod.yml | grep preferred-networks | awk &#x27;&#123;print $2&#125;&#x27;<br>10.12.7<br><br>[root@liyansheng target-config]# cat application-prod.yml | grep defaultZone | awk &#x27;&#123;print $2&#125;&#x27;| awk &#x27;&#123;print $1&#125;&#x27;<br>http://10.12.7.115:8761/eureka/<br><br></code></pre></td></tr></table></figure><h2 id="中间件部署脚本"><a href="#中间件部署脚本" class="headerlink" title="中间件部署脚本"></a>中间件部署脚本</h2><p><a href="http://120.24.82.106:10880/ljunyfor/docker-middleware">ljunyfor&#x2F;docker-middleware - Gogs</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue引入三方库ElementUi,Echarts等避坑</title>
    <link href="/blog/posts/498.html"/>
    <url>/blog/posts/498.html</url>
    
    <content type="html"><![CDATA[<h4 id="引入vue-router"><a href="#引入vue-router" class="headerlink" title="引入vue-router"></a>引入<code>vue-router</code></h4><ol><li><p>在<code>package.json</code>中添加依赖版本</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;vue-router&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure></li><li><p>然后打开终端，键入<code>npm install</code>，回车，这时会自动下载<code>vue-router</code>相关的包</p></li><li><p>打开项目下的<code>node_modules</code>如果发现有<code>vue-router</code>说明相关的依赖下载好了</p></li><li><p>在项目的<code>src</code>目录下新建<code>router</code>文件夹，此文件放置路由相关的核心文件，然后新建<code>index.js</code>，输入以下内容</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-keyword">const</span> router=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>    <span class="hljs-attr">mode</span>:<span class="hljs-string">&#x27;history&#x27;</span>,<span class="hljs-comment">//默认是Hash 模式,地址后有一个“#”符号,这里可以根据实际需要定义使用不同的模式</span><br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<br>            <span class="hljs-comment">//这里写路由配置</span><br>        &#125;,<br>        <br>    ]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>里面引入路由信息</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/index&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure></li><li><p>完成以上，就简单配置好了，路由出口记得用<code>&lt;router-view&gt;</code>，否则你会以为引入的路由没有生效(曾经踩坑…..)</p></li></ol><h4 id="引入ECharts"><a href="#引入ECharts" class="headerlink" title="引入ECharts"></a>引入<code>ECharts</code></h4><p>方式1：直接使用命令<code>npm install echarts -S </code></p><p>方式2：</p><ol><li><p>在<code>package.json</code>中添加依赖的版本</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;echarts&quot;</span>: <span class="hljs-string">&quot;^4.8.0&quot;</span>,<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>打开终端，输入<code>npm install</code>，回车，这时会自动下载相关的依赖，下载完成后，在项目目录下<code>node_module</code>里看到有<code>echarts</code>说明下载好了</p></li></ol><p>【使用】在vue中全局引用，在<code>main.js</code>中添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;echarts&quot;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$echarts</span> = echarts<br></code></pre></td></tr></table></figure><p>后面引用就可以<code>this.$echarts.init()</code>图表，页面中使用<code>mounted</code></p><h4 id="引入Element-UI"><a href="#引入Element-UI" class="headerlink" title="引入Element-UI"></a>引入<code>Element-UI</code></h4><ol><li><p>在<code>package.json</code>中添加依赖的版本</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;element-ui&quot;</span>: <span class="hljs-string">&quot;^2.0.10&quot;</span><br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>打开终端，输入<code>npm install</code>，回车，这时会自动下载相关的依赖，下载完成后，在项目目录下<code>node_module</code>里看到有<code>element-ui</code>说明下载好了</p></li><li><p>在<code>main.js</code>中引入使用</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span> <span class="hljs-comment">//这行别忘了，否则不生效</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>)<br><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/index&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure></li><li><p>这样就可以使用了</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速实现免费使用typora</title>
    <link href="/blog/posts/28281.html"/>
    <url>/blog/posts/28281.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>用过Typora的伙伴都知道，用它来写作是挺丝滑的事情，但新版的Typora已经开始收费了，如果你还想继续free使用，请往下看（支持正版哈）</p></blockquote><p>tips：本演示基于1.3.8版本</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220930085334062.png"></p><blockquote><p>如果你还没有安装包，可以在我的百度网盘获取</p><p>链接：<a href="https://pan.baidu.com/s/1NW5ieA9sDwt1we3xcFguBg">https://pan.baidu.com/s/1NW5ieA9sDwt1we3xcFguBg</a><br>提取码：8iyi</p></blockquote><p>安装激活步骤：</p><ol><li><p>下载安装包，解压</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220930090443217.png"></p></li><li><p>点击Setup.exe进行安装，可自定义安装目录</p></li><li><p>将<code>Crack</code>目录下的<code>.dll</code>文件添加到你的typora安装目录</p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220930090528384.png"></p></li><li><p>验证：打开typora，点击上方的<code>帮助</code>，然后查看我的<code>许可证</code></p><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220930090953756.png"></p></li><li><p>恭喜你，喜提free使用<code>typora</code>，继续专注你的写作吧！</p></li></ol><p><img src="http://cdn.qiniu.liyansheng.top/typora/image-20220930091009686.png"></p><hr><p>本次分享到这，下期再见！</p>]]></content>
    
    
    <categories>
      
      <category>工具神器集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode高效插件：Jump</title>
    <link href="/blog/posts/48434.html"/>
    <url>/blog/posts/48434.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>大家有没有这样的体验，在敲代码的过程中，当我们要移动光标的时候，要么用键盘方向键上下左右控制光标（比较繁琐，特别是比较远的，要按方向键好多次），要么用鼠标点（这样不得不一个手在键盘和鼠标之间来回切换，效率低），而插件Jump正是解决了这两大问题，当你要在编辑页面中移动光标到某个位置的时候，无需键盘方向键或者鼠标就可以完成。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在扩展中搜索Jump,注意看图标，找到后点击安装</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p><strong>跳转到一个词的前面</strong>    </p><p> 快捷键   <font color='orange'>Alt+Q   Alt+Q</font>   (即按两次这个组合键，下面的同)</p></li></ol><p><img src="https://img-blog.csdnimg.cn/eebc669ebdfc4a3babc181c56e34f88c.gif#pic_center" alt="在这里插入图片描述"></p><ol start="2"><li><p><strong>跳转到一个词的后面</strong></p><p> 快捷键   <font color='orange'>Alt+Q   Alt+W</font><br> <img src="https://img-blog.csdnimg.cn/345968dbd7a94ba3b2d5e1221517293b.gif#pic_center" alt="在这里插入图片描述"></p></li><li><p><strong>从有一个词的开头选择</strong></p><p> 快捷键    <font color='orange'>Alt+Q    Alt+E</font><br> <img src="https://img-blog.csdnimg.cn/f80360d15b8142a3847bfc262ea0a869.gif#pic_center" alt="在这里插入图片描述"></p></li><li><p><strong>从一个词的结尾选择</strong></p><p> 快捷键    <font color='orange'>Alt+Q    Alt+R</font><br> <img src="https://img-blog.csdnimg.cn/e68e22bbfd2e423bb20f8cd768316532.gif#pic_center" alt="在这里插入图片描述"></p></li><li><p><strong>退出跳转模式</strong> </p><p> 快捷键   <font color='orange'> space（空格键)</font>   或   <font color='orange'>Enter(回车键)</font><br> <img src="https://img-blog.csdnimg.cn/c1a103e1343142d098fbb77042ef643f.gif#pic_center" alt="在这里插入图片描述"></p></li></ol><blockquote><p><strong>觉得不错的小伙伴点个赞哦</strong></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这是一个示例文章</title>
    <link href="/blog/posts/31258.html"/>
    <url>/blog/posts/31258.html</url>
    
    <content type="html"><![CDATA[<h3 id="我"><a href="#我" class="headerlink" title="我"></a>我</h3><p>失业了</p><h3 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h3><p>很抱歉听到您失业了。这是一个很困难的时期，但请不要失去希望。您可以尝试以下几个方法来帮助您重新找到工作：</p><ol><li>更新您的简历和求职信，并确保它们与您的技能和经验相匹配。</li><li>在招聘网站上搜索工作机会，并向您感兴趣的公司发送求职信。</li><li>与您的朋友、家人和社区联系，看看他们是否知道有任何工作机会。</li><li>考虑参加职业培训课程，以提高您的技能和市场价值。</li><li>保持积极的态度和信心，坚持不懈地寻找工作机会。</li></ol><p>最后，记住失业并不代表您个人的失败，而是全球经济环境的一个常态。请确保照顾好自己的身体和心理健康，这样您才能更好地应对失业的挑战。</p><h3 id="我-1"><a href="#我-1" class="headerlink" title="我"></a>我</h3><p>写段励志文案</p><h3 id="ChatGPT-1"><a href="#ChatGPT-1" class="headerlink" title="ChatGPT"></a>ChatGPT</h3><p>每个人都有自己的梦想和追求，但要想实现它们并不容易。在追求梦想的路上，你会遇到各种困难和挑战，但只要你坚定自己的信念，努力奋斗，就一定能够实现自己的目标。</p><p>成功不是一蹴而就的，需要经历无数的失败和挫折，但这些都是你成长的过程。每一次失败都是一次宝贵的经验，让你更加坚强和成熟。只有不畏挫折，不放弃追求，才能走向成功的道路。</p><p>不要让自己的梦想只停留在脑海中，要付诸行动。行动是实现梦想的第一步，只有付出行动，才有可能实现自己的目标。要坚持不懈地努力，追求卓越，不断提升自己的能力和素质。</p><p>生命的旅途中，我们会遇到很多人，有些人会给我们力量，鼓励我们前行；有些人会让我们失望，让我们感到挫败。但无论遇到什么样的人和事，都要保持自己的信心和勇气，坚定自己的方向，不断前行。</p><p>总之，只要你有梦想，就要勇敢地去追求它，不断学习和成长，不断挑战自我，才能让自己的人生更加精彩。相信自己，相信未来，你一定能够实现自己的梦想！</p><h3 id="我-2"><a href="#我-2" class="headerlink" title="我"></a>我</h3><p>知乎的风格是：用”谢邀”开头，用很多学术语言，引用很多名言，做大道理的论述，提到自己很厉害的教育背景并且经验丰富，最后还要引用一些论文。请用知乎风格 回答以后的社会里，学历重要吗？</p><h3 id="ChatGPT-2"><a href="#ChatGPT-2" class="headerlink" title="ChatGPT"></a>ChatGPT</h3><p>谢邀。</p><p>在当今社会中，学历仍然是一个重要的因素，但并不是唯一的衡量标准。</p><p>首先，学历可以反映出一个人的学习能力和知识水平。通过系统的学习和培训，人们可以获得更广泛和深入的知识，提高自己的认知水平和思维能力，这对于职业发展和个人成长都具有重要的意义。</p><p>其次，学历也可以为个人的职业发展提供更多的机会和选择。在竞争激烈的就业市场中，拥有更高的学历可以增加求职者的竞争力，获得更好的工作机会和薪资待遇。</p><p>但是，学历并非是唯一的衡量标准。在现实生活中，很多成功的人士并没有接受过高等教育，但他们凭借自身的才智、勤奋和努力，取得了很大的成就。</p><p>因此，我们应该看到学历的重要性，但也要注意到，学历并不是成功的唯一因素。在不同的人生阶段和职业发展阶段，我们都需要不断地学习和提升自己，以适应不断变化的社会和市场需求。</p><h3 id="我-3"><a href="#我-3" class="headerlink" title="我"></a>我</h3><p>失业带来的焦虑与迷茫</p><h3 id="ChatGPT-3"><a href="#ChatGPT-3" class="headerlink" title="ChatGPT"></a>ChatGPT</h3><p>失业带来的焦虑和迷茫是很常见的问题。一旦失去工作，人们往往会感到不安和不确定，因为他们可能不知道下一步该做什么，也可能担心他们的财务状况和未来的前景。</p><p>失业带来的焦虑可能表现为担心找不到新工作，担心家庭财务问题，担心失去社交圈子和职业身份等。同时，失业也可能会引起自我怀疑和自尊心受损，因为许多人将他们的职业身份视为自我价值的一部分。</p><p>迷茫可能表现为不知道下一步该做什么，或者不知道自己想要做什么。这种感觉可能会导致人们感到迷茫和无助，因为他们不知道自己的方向和目标。</p><p>为了应对失业带来的焦虑和迷茫，可以尝试以下建议：</p><ol><li><p>接受你的情绪。失业可能会让你感到不安和不确定。理解这些情绪是正常的，并且可以帮助你更好地处理它们。</p></li><li><p>制定计划。考虑你想要的下一步是什么，然后制定一个计划来实现它。这可以帮助你感到更有控制力，并减少焦虑和迷茫感。</p></li><li><p>寻求支持。与家人、朋友或专业人士交谈，寻求支持和建议。这可以帮助你感到更好，并且可以提供有价值的建议和资源。</p></li><li><p>学习新技能。利用失业期间的时间来学习新技能或提高现有技能。这可以帮助你增加就业机会，并提高自信心。</p></li><li><p>保持积极。保持积极的态度，并相信自己可以找到新的工作。这可以帮助你摆脱焦虑和迷茫，继续前进。</p></li></ol><h3 id="我-4"><a href="#我-4" class="headerlink" title="我"></a>我</h3><p>抖音进来有哪些爆火的话题</p><h3 id="ChatGPT-4"><a href="#ChatGPT-4" class="headerlink" title="ChatGPT"></a>ChatGPT</h3><ol><li>舞蹈挑战</li><li>美食制作</li><li>宠物萌宠</li><li>好声音翻唱</li><li>搞笑短片</li><li>美容化妆</li><li>旅游风景</li><li>时尚穿搭</li><li>情感故事</li><li>健身运动</li><li>小品相声</li><li>影视剪辑</li><li>二次元动漫</li><li>知识科普</li><li>手工DIY</li><li>生活日常</li><li>摄影摄像</li><li>惊悚恐怖</li><li>音乐创作</li><li>儿童教育</li></ol><h3 id="我-5"><a href="#我-5" class="headerlink" title="我"></a>我</h3><p>写个MYSQL多表联查的案例</p><h3 id="ChatGPT-5"><a href="#ChatGPT-5" class="headerlink" title="ChatGPT"></a>ChatGPT</h3><p>假设我们有两个表：学生表(student)和成绩表(score)，它们的结构如下：</p><p>学生表(student)：</p><table><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>小明</td><td>18</td></tr><tr><td>2</td><td>小红</td><td>20</td></tr><tr><td>3</td><td>小刚</td><td>19</td></tr></tbody></table><p>成绩表(score)：</p><table><thead><tr><th>id</th><th>student_id</th><th>subject</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>语文</td><td>90</td></tr><tr><td>2</td><td>1</td><td>数学</td><td>85</td></tr><tr><td>3</td><td>1</td><td>英语</td><td>92</td></tr><tr><td>4</td><td>2</td><td>语文</td><td>88</td></tr><tr><td>5</td><td>2</td><td>数学</td><td>90</td></tr><tr><td>6</td><td>2</td><td>英语</td><td>95</td></tr><tr><td>7</td><td>3</td><td>语文</td><td>85</td></tr><tr><td>8</td><td>3</td><td>数学</td><td>92</td></tr><tr><td>9</td><td>3</td><td>英语</td><td>90</td></tr></tbody></table><p>现在我们要查询每个学生的总成绩和平均成绩，并按照总成绩从高到低排序，可以使用以下SQL语句：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> student.id, student.name, SUM(score.score) <span class="hljs-keyword">AS</span> total_score, AVG(score.score) <span class="hljs-keyword">AS</span> avg_score<br><span class="hljs-keyword">FROM</span> student <br><span class="hljs-keyword">LEFT JOIN</span> score <span class="hljs-keyword">ON</span> student.id = score.student_id <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> student.id, student.name <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> total_score <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><table><thead><tr><th>id</th><th>name</th><th>total_score</th><th>avg_score</th></tr></thead><tbody><tr><td>2</td><td>小红</td><td>273</td><td>91</td></tr><tr><td>1</td><td>小明</td><td>267</td><td>89</td></tr><tr><td>3</td><td>小刚</td><td>267</td><td>89</td></tr></tbody></table><p>这个SQL语句使用了多表联查，通过LEFT JOIN将学生表和成绩表连接起来，然后使用SUM和AVG聚合函数计算每个学生的总成绩和平均成绩，最后按照总成绩从高到低排序。</p>]]></content>
    
    
    
    <tags>
      
      <tag>示例</tag>
      
      <tag>演示</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
